var crypto = require("crypto")
  
function Keygrip(keys, algorithm, encoding) ***REMOVED***
  if (!algorithm) algorithm = "sha1";
  if (!encoding) encoding = "base64";
  if (!(this instanceof Keygrip)) return new Keygrip(keys, algorithm, encoding)

  if (!keys || !(0 in keys)) ***REMOVED***
    throw new Error("Keys must be provided.")
  ***REMOVED***

  function sign(data, key) ***REMOVED***
    return crypto
      .createHmac(algorithm, key)
      .update(data).digest(encoding)
      .replace(/\/|\+|=/g, function(x) ***REMOVED***
        return (***REMOVED*** "/": "_", "+": "-", "=": "" ***REMOVED***)[x]
      ***REMOVED***)
  ***REMOVED***

  this.sign = function(data)***REMOVED*** return sign(data, keys[0]) ***REMOVED***

  this.verify = function(data, digest) ***REMOVED***
    return this.index(data, digest) > -1
  ***REMOVED***

  this.index = function(data, digest) ***REMOVED***
    for (var i = 0, l = keys.length; i < l; i++) ***REMOVED***
      if (constantTimeCompare(digest, sign(data, keys[i]))) return i
    ***REMOVED***

    return -1
  ***REMOVED***
***REMOVED***

Keygrip.sign = Keygrip.verify = Keygrip.index = function() ***REMOVED***
  throw new Error("Usage: require('keygrip')(<array-of-keys>)")
***REMOVED***

//http://codahale.com/a-lesson-in-timing-attacks/
var constantTimeCompare = function(val1, val2)***REMOVED***
    if(val1 == null && val2 != null)***REMOVED***
        return false;
    ***REMOVED*** else if(val2 == null && val1 != null)***REMOVED***
        return false;
    ***REMOVED*** else if(val1 == null && val2 == null)***REMOVED***
        return true;
    ***REMOVED***

    if(val1.length !== val2.length)***REMOVED***
        return false;
    ***REMOVED***

    var matches = 1;

    for(var i = 0; i < val1.length; i++)***REMOVED***
        matches &= (val1.charAt(i) === val2.charAt(i) ? 1 : 0); //Don't short circuit
    ***REMOVED***

    return matches === 1;
***REMOVED***;

module.exports = Keygrip
