/**
 * Module dependencies.
 */
var passport = require('passport-strategy')
  , util = require('util')
  , lookup = require('./utils').lookup;


/**
 * `Strategy` constructor.
 *
 * The local authentication strategy authenticates requests based on the
 * credentials submitted through an HTML-based login form.
 *
 * Applications must supply a `verify` callback which accepts `username` and
 * `password` credentials, and then calls the `done` callback supplying a
 * `user`, which should be set to `false` if the credentials are not valid.
 * If an exception occured, `err` should be set.
 *
 * Optionally, `options` can be used to change the fields in which the
 * credentials are found.
 *
 * Options:
 *   - `usernameField`  field name where the username is found, defaults to _username_
 *   - `passwordField`  field name where the password is found, defaults to _password_
 *   - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)
 *
 * Examples:
 *
 *     passport.use(new LocalStrategy(
 *       function(username, password, done) ***REMOVED***
 *         User.findOne(***REMOVED*** username: username, password: password ***REMOVED***, function (err, user) ***REMOVED***
 *           done(err, user);
 *         ***REMOVED***);
 *       ***REMOVED***
 *     ));
 *
 * @param ***REMOVED***Object***REMOVED*** options
 * @param ***REMOVED***Function***REMOVED*** verify
 * @api public
 */
function Strategy(options, verify) ***REMOVED***
  if (typeof options == 'function') ***REMOVED***
    verify = options;
    options = ***REMOVED******REMOVED***;
  ***REMOVED***
  if (!verify) ***REMOVED*** throw new TypeError('LocalStrategy requires a verify callback'); ***REMOVED***
  
  this._usernameField = options.usernameField || 'username';
  this._passwordField = options.passwordField || 'password';
  
  passport.Strategy.call(this);
  this.name = 'local';
  this._verify = verify;
  this._passReqToCallback = options.passReqToCallback;
***REMOVED***

/**
 * Inherit from `passport.Strategy`.
 */
util.inherits(Strategy, passport.Strategy);

/**
 * Authenticate request based on the contents of a form submission.
 *
 * @param ***REMOVED***Object***REMOVED*** req
 * @api protected
 */
Strategy.prototype.authenticate = function(req, options) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;
  var username = lookup(req.body, this._usernameField) || lookup(req.query, this._usernameField);
  var password = lookup(req.body, this._passwordField) || lookup(req.query, this._passwordField);
  
  if (!username || !password) ***REMOVED***
    return this.fail(***REMOVED*** message: options.badRequestMessage || 'Missing credentials' ***REMOVED***, 400);
  ***REMOVED***
  
  var self = this;
  
  function verified(err, user, info) ***REMOVED***
    if (err) ***REMOVED*** return self.error(err); ***REMOVED***
    if (!user) ***REMOVED*** return self.fail(info); ***REMOVED***
    self.success(user, info);
  ***REMOVED***
  
  try ***REMOVED***
    if (self._passReqToCallback) ***REMOVED***
      this._verify(req, username, password, verified);
    ***REMOVED*** else ***REMOVED***
      this._verify(username, password, verified);
    ***REMOVED***
  ***REMOVED*** catch (ex) ***REMOVED***
    return self.error(ex);
  ***REMOVED***
***REMOVED***;


/**
 * Expose `Strategy`.
 */
module.exports = Strategy;
