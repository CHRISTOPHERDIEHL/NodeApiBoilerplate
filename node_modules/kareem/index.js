'use strict';

function Kareem() ***REMOVED***
  this._pres = ***REMOVED******REMOVED***;
  this._posts = ***REMOVED******REMOVED***;
***REMOVED***

Kareem.prototype.execPre = function(name, context, callback) ***REMOVED***
  var pres = this._pres[name] || [];
  var numPres = pres.length;
  var numAsyncPres = pres.numAsync || 0;
  var currentPre = 0;
  var asyncPresLeft = numAsyncPres;
  var done = false;

  if (!numPres) ***REMOVED***
    return process.nextTick(function() ***REMOVED***
      callback(null);
    ***REMOVED***);
  ***REMOVED***

  var next = function() ***REMOVED***
    if (currentPre >= numPres) ***REMOVED***
      return;
    ***REMOVED***
    var pre = pres[currentPre];

    if (pre.isAsync) ***REMOVED***
      pre.fn.call(
        context,
        function(error) ***REMOVED***
          if (error) ***REMOVED***
            if (done) ***REMOVED***
              return;
            ***REMOVED***
            done = true;
            return callback(error);
          ***REMOVED***

          ++currentPre;
          next.apply(context, arguments);
        ***REMOVED***,
        function(error) ***REMOVED***
          if (error) ***REMOVED***
            if (done) ***REMOVED***
              return;
            ***REMOVED***
            done = true;
            return callback(error);
          ***REMOVED***

          if (--numAsyncPres === 0) ***REMOVED***
            return callback(null);
          ***REMOVED***
        ***REMOVED***);
    ***REMOVED*** else if (pre.fn.length > 0) ***REMOVED***
      var args = [function(error) ***REMOVED***
        if (error) ***REMOVED***
          if (done) ***REMOVED***
            return;
          ***REMOVED***
          done = true;
          return callback(error);
        ***REMOVED***

        if (++currentPre >= numPres) ***REMOVED***
          if (asyncPresLeft > 0) ***REMOVED***
            // Leave parallel hooks to run
            return;
          ***REMOVED*** else ***REMOVED***
            return callback(null);
          ***REMOVED***
        ***REMOVED***

        next.apply(context, arguments);
      ***REMOVED***];
      if (arguments.length >= 2) ***REMOVED***
        for (var i = 1; i < arguments.length; ++i) ***REMOVED***
          args.push(arguments[i]);
        ***REMOVED***
      ***REMOVED***
      pre.fn.apply(context, args);
    ***REMOVED*** else ***REMOVED***
      pre.fn.call(context);
      if (++currentPre >= numPres) ***REMOVED***
        if (asyncPresLeft > 0) ***REMOVED***
          // Leave parallel hooks to run
          return;
        ***REMOVED*** else ***REMOVED***
          return process.nextTick(function() ***REMOVED***
            callback(null);
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***
      next();
    ***REMOVED***
  ***REMOVED***;

  next();
***REMOVED***;

Kareem.prototype.execPreSync = function(name, context) ***REMOVED***
  var pres = this._pres[name] || [];
  var numPres = pres.length;

  for (var i = 0; i < numPres; ++i) ***REMOVED***
    pres[i].fn.call(context);
  ***REMOVED***
***REMOVED***;

Kareem.prototype.execPost = function(name, context, args, options, callback) ***REMOVED***
  if (arguments.length < 5) ***REMOVED***
    callback = options;
    options = null;
  ***REMOVED***
  var posts = this._posts[name] || [];
  var numPosts = posts.length;
  var currentPost = 0;

  var firstError = null;
  if (options && options.error) ***REMOVED***
    firstError = options.error;
  ***REMOVED***

  if (!numPosts) ***REMOVED***
    return process.nextTick(function() ***REMOVED***
      callback.apply(null, [firstError].concat(args));
    ***REMOVED***);
  ***REMOVED***

  var next = function() ***REMOVED***
    var post = posts[currentPost];
    var numArgs = 0;
    var argLength = args.length;
    for (var i = 0; i < argLength; ++i) ***REMOVED***
      numArgs += args[i] && args[i]._kareemIgnore ? 0 : 1;
    ***REMOVED***

    if (firstError) ***REMOVED***
      if (post.length === numArgs + 2) ***REMOVED***
        post.apply(context, [firstError].concat(args).concat(function(error) ***REMOVED***
          if (error) ***REMOVED***
            firstError = error;
          ***REMOVED***
          if (++currentPost >= numPosts) ***REMOVED***
            return callback.call(null, firstError);
          ***REMOVED***
          next();
        ***REMOVED***));
      ***REMOVED*** else ***REMOVED***
        if (++currentPost >= numPosts) ***REMOVED***
          return callback.call(null, firstError);
        ***REMOVED***
        next();
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      if (post.length === numArgs + 2) ***REMOVED***
        // Skip error handlers if no error
        if (++currentPost >= numPosts) ***REMOVED***
          return callback.apply(null, [null].concat(args));
        ***REMOVED***
        return next();
      ***REMOVED***
      if (post.length === numArgs + 1) ***REMOVED***
        post.apply(context, args.concat(function(error) ***REMOVED***
          if (error) ***REMOVED***
            firstError = error;
            return next();
          ***REMOVED***

          if (++currentPost >= numPosts) ***REMOVED***
            return callback.apply(null, [null].concat(args));
          ***REMOVED***

          next();
        ***REMOVED***));
      ***REMOVED*** else ***REMOVED***
        post.apply(context, args);

        if (++currentPost >= numPosts) ***REMOVED***
          return callback.apply(null, [null].concat(args));
        ***REMOVED***

        next();
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;

  next();
***REMOVED***;

Kareem.prototype.execPostSync = function(name, context) ***REMOVED***
  var posts = this._posts[name] || [];
  var numPosts = posts.length;

  for (var i = 0; i < numPosts; ++i) ***REMOVED***
    posts[i].call(context);
  ***REMOVED***
***REMOVED***;

function _handleWrapError(instance, error, name, context, args, options, callback) ***REMOVED***
  if (options.useErrorHandlers) ***REMOVED***
    var _options = ***REMOVED*** error: error ***REMOVED***;
    var newArgs = [];
    // Filter out trailing undefineds
    for (var i = args.length; i >= 0; --i) ***REMOVED***
      if (newArgs.length > 0 || args[i] !== void 0) ***REMOVED***
        newArgs.unshift(args[i]);
      ***REMOVED***
    ***REMOVED***
    return instance.execPost(name, context, newArgs, _options, function(error) ***REMOVED***
      return typeof callback === 'function' && callback(error);
    ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    return typeof callback === 'function' ?
      callback(error) :
      undefined;
  ***REMOVED***
***REMOVED***

Kareem.prototype.wrap = function(name, fn, context, args, options) ***REMOVED***
  var lastArg = (args.length > 0 ? args[args.length - 1] : null);
  var argsWithoutCb = typeof lastArg === 'function' ?
    args.slice(0, args.length - 1) :
    args;
  var _this = this;

  var useLegacyPost;
  if (typeof options === 'object') ***REMOVED***
    useLegacyPost = options && options.useLegacyPost;
  ***REMOVED*** else ***REMOVED***
    useLegacyPost = options;
  ***REMOVED***
  options = options || ***REMOVED******REMOVED***;

  this.execPre(name, context, function(error) ***REMOVED***
    if (error) ***REMOVED***
      return _handleWrapError(_this, error, name, context, argsWithoutCb,
        options, lastArg)
    ***REMOVED***

    var end = (typeof lastArg === 'function' ? args.length - 1 : args.length);

    fn.apply(context, args.slice(0, end).concat(function() ***REMOVED***
      var args = arguments;
      var argsWithoutError = Array.prototype.slice.call(arguments, 1);
      if (arguments[0]) ***REMOVED***
        // Assume error
        return _handleWrapError(_this, arguments[0], name, context,
          args, options, lastArg);
      ***REMOVED*** else ***REMOVED***
        if (useLegacyPost && typeof lastArg === 'function') ***REMOVED***
          lastArg.apply(context, arguments);
        ***REMOVED***

        _this.execPost(name, context, argsWithoutError, function() ***REMOVED***
          if (arguments[0]) ***REMOVED***
            return typeof lastArg === 'function' ?
              lastArg(arguments[0]) :
              undefined;
          ***REMOVED***

          return typeof lastArg === 'function' && !useLegacyPost ?
            lastArg.apply(context, arguments) :
            undefined;
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***));
  ***REMOVED***);
***REMOVED***;

Kareem.prototype.createWrapper = function(name, fn, context, options) ***REMOVED***
  var _this = this;
  return function() ***REMOVED***
    var args = Array.prototype.slice.call(arguments);
    _this.wrap(name, fn, context, args, options);
  ***REMOVED***;
***REMOVED***;

Kareem.prototype.pre = function(name, isAsync, fn, error) ***REMOVED***
  if (typeof arguments[1] !== 'boolean') ***REMOVED***
    error = fn;
    fn = isAsync;
    isAsync = false;
  ***REMOVED***

  this._pres[name] = this._pres[name] || [];
  var pres = this._pres[name];

  if (isAsync) ***REMOVED***
    pres.numAsync = pres.numAsync || 0;
    ++pres.numAsync;
  ***REMOVED***

  pres.push(***REMOVED*** fn: fn, isAsync: isAsync ***REMOVED***);

  return this;
***REMOVED***;

Kareem.prototype.post = function(name, fn) ***REMOVED***
  (this._posts[name] = this._posts[name] || []).push(fn);
  return this;
***REMOVED***;

Kareem.prototype.clone = function() ***REMOVED***
  var n = new Kareem();
  for (var key in this._pres) ***REMOVED***
    if (!this._pres.hasOwnProperty(key)) ***REMOVED***
      continue;
    ***REMOVED***
    n._pres[key] = this._pres[key].slice();
  ***REMOVED***
  for (var key in this._posts) ***REMOVED***
    if (!this._posts.hasOwnProperty(key)) ***REMOVED***
      continue;
    ***REMOVED***
    n._posts[key] = this._posts[key].slice();
  ***REMOVED***

  return n;
***REMOVED***;

module.exports = Kareem;
