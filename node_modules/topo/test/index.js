// Load modules

var Code = require('code');
var Lab = require('lab');
var Hoek = require('hoek');
var Topo = require('..');


// Declare internals

var internals = ***REMOVED******REMOVED***;


// Test shortcuts

var lab = exports.lab = Lab.script();
var describe = lab.describe;
var it = lab.it;
var expect = Code.expect;


describe('Topo', function () ***REMOVED***

    var testDeps = function (scenario) ***REMOVED***

        var topo = new Topo();
        scenario.forEach(function (record, i) ***REMOVED***

            var options = record.before || record.after || record.group ? ***REMOVED*** before: record.before, after: record.after, group: record.group ***REMOVED*** : null;
            topo.add(record.id, options);
        ***REMOVED***);

        return topo.nodes.join('');
    ***REMOVED***;

    it('sorts dependencies', function (done) ***REMOVED***

        var scenario = [
            ***REMOVED*** id: '0', before: 'a' ***REMOVED***,
            ***REMOVED*** id: '1', after: 'f', group: 'a' ***REMOVED***,
            ***REMOVED*** id: '2', before: 'a' ***REMOVED***,
            ***REMOVED*** id: '3', before: ['b', 'c'], group: 'a' ***REMOVED***,
            ***REMOVED*** id: '4', after: 'c', group: 'b' ***REMOVED***,
            ***REMOVED*** id: '5', group: 'c' ***REMOVED***,
            ***REMOVED*** id: '6', group: 'd' ***REMOVED***,
            ***REMOVED*** id: '7', group: 'e' ***REMOVED***,
            ***REMOVED*** id: '8', before: 'd' ***REMOVED***,
            ***REMOVED*** id: '9', after: 'c', group: 'a' ***REMOVED***
        ];

        expect(testDeps(scenario)).to.equal('0213547869');
        done();
    ***REMOVED***);

    it('sorts dependencies (before as array)', function (done) ***REMOVED***

        var scenario = [
            ***REMOVED*** id: '0', group: 'a' ***REMOVED***,
            ***REMOVED*** id: '1', group: 'b' ***REMOVED***,
            ***REMOVED*** id: '2', before: ['a', 'b'] ***REMOVED***
        ];

        expect(testDeps(scenario)).to.equal('201');
        done();
    ***REMOVED***);

    it('sorts dependencies (after as array)', function (done) ***REMOVED***

        var scenario = [
            ***REMOVED*** id: '0', after: ['a', 'b'] ***REMOVED***,
            ***REMOVED*** id: '1', group: 'a' ***REMOVED***,
            ***REMOVED*** id: '2', group: 'b' ***REMOVED***
        ];

        expect(testDeps(scenario)).to.equal('120');
        done();
    ***REMOVED***);


    it('sorts dependencies (seq)', function (done) ***REMOVED***

        var scenario = [
            ***REMOVED*** id: '0' ***REMOVED***,
            ***REMOVED*** id: '1' ***REMOVED***,
            ***REMOVED*** id: '2' ***REMOVED***,
            ***REMOVED*** id: '3' ***REMOVED***
        ];

        expect(testDeps(scenario)).to.equal('0123');
        done();
    ***REMOVED***);

    it('sorts dependencies (explicitly using after or before)', function (done) ***REMOVED***

        var set = '0123456789abcdefghijklmnopqrstuvwxyz';
        var groups = set.split('');

        // Use Fisher-Yates for shuffling

        var fisherYates = function (array) ***REMOVED***

            var i = array.length;
            while (--i) ***REMOVED***
                var j = Math.floor(Math.random() * (i + 1));
                var tempi = array[i];
                var tempj = array[j];
                array[i] = tempj;
                array[j] = tempi;
            ***REMOVED***
        ***REMOVED***;

        var scenarioAfter = [];
        var scenarioBefore = [];
        for (var i = 0, il = groups.length; i < il; ++i) ***REMOVED***
            var item = ***REMOVED***
                id: groups[i],
                group: groups[i]
            ***REMOVED***;
            var afterMod = ***REMOVED***
                after: i ? groups.slice(0, i) : []
            ***REMOVED***;
            var beforeMod = ***REMOVED***
                before: groups.slice(i + 1)
            ***REMOVED***;

            scenarioAfter.push(Hoek.applyToDefaults(item, afterMod));
            scenarioBefore.push(Hoek.applyToDefaults(item, beforeMod));
        ***REMOVED***

        fisherYates(scenarioAfter);
        expect(testDeps(scenarioAfter)).to.equal(set);

        fisherYates(scenarioBefore);
        expect(testDeps(scenarioBefore)).to.equal(set);
        done();
    ***REMOVED***);

    it('throws on circular dependency', function (done) ***REMOVED***

        var scenario = [
            ***REMOVED*** id: '0', before: 'a', group: 'b' ***REMOVED***,
            ***REMOVED*** id: '1', before: 'c', group: 'a' ***REMOVED***,
            ***REMOVED*** id: '2', before: 'b', group: 'c' ***REMOVED***
        ];

        expect(function () ***REMOVED***

            testDeps(scenario);
        ***REMOVED***).to.throw('item added into group c created a dependencies error');

        done();
    ***REMOVED***);

    describe('merge()', function () ***REMOVED***

        it('merges objects', function (done) ***REMOVED***

            var topo = new Topo();
            topo.add('0', ***REMOVED*** before: 'a' ***REMOVED***);
            topo.add('2', ***REMOVED*** before: 'a' ***REMOVED***);
            topo.add('4', ***REMOVED*** after: 'c', group: 'b' ***REMOVED***);
            topo.add('6', ***REMOVED*** group: 'd' ***REMOVED***);
            topo.add('8', ***REMOVED*** before: 'd' ***REMOVED***);
            expect(topo.nodes.join('')).to.equal('02486');

            var other = new Topo();
            other.add('1', ***REMOVED*** after: 'f', group: 'a' ***REMOVED***);
            other.add('3', ***REMOVED*** before: ['b', 'c'], group: 'a' ***REMOVED***);
            other.add('5', ***REMOVED*** group: 'c' ***REMOVED***);
            other.add('7', ***REMOVED*** group: 'e' ***REMOVED***);
            other.add('9', ***REMOVED*** after: 'c', group: 'a' ***REMOVED***);
            expect(other.nodes.join('')).to.equal('13579');

            topo.merge(other);
            expect(topo.nodes.join('')).to.equal('0286135479');
            done();
        ***REMOVED***);

        it('merges objects (explicit sort)', function (done) ***REMOVED***

            var topo = new Topo();
            topo.add('0', ***REMOVED*** before: 'a', sort: 1 ***REMOVED***);
            topo.add('2', ***REMOVED*** before: 'a', sort: 2 ***REMOVED***);
            topo.add('4', ***REMOVED*** after: 'c', group: 'b', sort: 3 ***REMOVED***);
            topo.add('6', ***REMOVED*** group: 'd', sort: 4 ***REMOVED***);
            topo.add('8', ***REMOVED*** before: 'd', sort: 5 ***REMOVED***);
            expect(topo.nodes.join('')).to.equal('02486');

            var other = new Topo();
            other.add('1', ***REMOVED*** after: 'f', group: 'a', sort: 6 ***REMOVED***);
            other.add('3', ***REMOVED*** before: ['b', 'c'], group: 'a', sort: 7 ***REMOVED***);
            other.add('5', ***REMOVED*** group: 'c', sort: 8 ***REMOVED***);
            other.add('7', ***REMOVED*** group: 'e', sort: 9 ***REMOVED***);
            other.add('9', ***REMOVED*** after: 'c', group: 'a', sort: 10 ***REMOVED***);
            expect(other.nodes.join('')).to.equal('13579');

            topo.merge(other);
            expect(topo.nodes.join('')).to.equal('0286135479');
            done();
        ***REMOVED***);

        it('merges objects (mixed sort)', function (done) ***REMOVED***

            var topo = new Topo();
            topo.add('0', ***REMOVED*** before: 'a', sort: 1 ***REMOVED***);
            topo.add('2', ***REMOVED*** before: 'a', sort: 3 ***REMOVED***);
            topo.add('4', ***REMOVED*** after: 'c', group: 'b', sort: 5 ***REMOVED***);
            topo.add('6', ***REMOVED*** group: 'd', sort: 7 ***REMOVED***);
            topo.add('8', ***REMOVED*** before: 'd', sort: 9 ***REMOVED***);
            expect(topo.nodes.join('')).to.equal('02486');

            var other = new Topo();
            other.add('1', ***REMOVED*** after: 'f', group: 'a', sort: 2 ***REMOVED***);
            other.add('3', ***REMOVED*** before: ['b', 'c'], group: 'a', sort: 4 ***REMOVED***);
            other.add('5', ***REMOVED*** group: 'c', sort: 6 ***REMOVED***);
            other.add('7', ***REMOVED*** group: 'e', sort: 8 ***REMOVED***);
            other.add('9', ***REMOVED*** after: 'c', group: 'a', sort: 10 ***REMOVED***);
            expect(other.nodes.join('')).to.equal('13579');

            topo.merge(other);
            expect(topo.nodes.join('')).to.equal('0213547869');
            done();
        ***REMOVED***);

        it('merges objects (multiple)', function (done) ***REMOVED***

            var topo1 = new Topo();
            topo1.add('0', ***REMOVED*** before: 'a', sort: 1 ***REMOVED***);
            topo1.add('2', ***REMOVED*** before: 'a', sort: 3 ***REMOVED***);
            topo1.add('4', ***REMOVED*** after: 'c', group: 'b', sort: 5 ***REMOVED***);

            var topo2 = new Topo();
            topo2.add('6', ***REMOVED*** group: 'd', sort: 7 ***REMOVED***);
            topo2.add('8', ***REMOVED*** before: 'd', sort: 9 ***REMOVED***);

            var other = new Topo();
            other.add('1', ***REMOVED*** after: 'f', group: 'a', sort: 2 ***REMOVED***);
            other.add('3', ***REMOVED*** before: ['b', 'c'], group: 'a', sort: 4 ***REMOVED***);
            other.add('5', ***REMOVED*** group: 'c', sort: 6 ***REMOVED***);
            other.add('7', ***REMOVED*** group: 'e', sort: 8 ***REMOVED***);
            other.add('9', ***REMOVED*** after: 'c', group: 'a', sort: 10 ***REMOVED***);
            expect(other.nodes.join('')).to.equal('13579');

            topo1.merge([topo2, null, other]);
            expect(topo1.nodes.join('')).to.equal('0213547869');
            done();
        ***REMOVED***);

        it('throws on circular dependency', function (done) ***REMOVED***

            var topo = new Topo();
            topo.add('0', ***REMOVED*** before: 'a', group: 'b' ***REMOVED***);
            topo.add('1', ***REMOVED*** before: 'c', group: 'a' ***REMOVED***);

            var other = new Topo();
            other.add('2', ***REMOVED*** before: 'b', group: 'c' ***REMOVED***);

            expect(function () ***REMOVED***

                topo.merge(other);
            ***REMOVED***).to.throw('merge created a dependencies error');

            done();
        ***REMOVED***);
    ***REMOVED***);
***REMOVED***);
