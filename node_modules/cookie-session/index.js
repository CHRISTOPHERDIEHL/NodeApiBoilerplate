/*!
 * cookie-session
 * Copyright(c) 2013 Jonathan Ong
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module dependencies.
 * @private
 */

var debug = require('debug')('cookie-session')
var Cookies = require('cookies')
var onHeaders = require('on-headers')

/**
 * Module exports.
 * @public
 */

module.exports = cookieSession

/**
 * Create a new cookie session middleware.
 *
 * @param ***REMOVED***object***REMOVED*** [options]
 * @param ***REMOVED***boolean***REMOVED*** [options.httpOnly=true]
 * @param ***REMOVED***array***REMOVED*** [options.keys]
 * @param ***REMOVED***string***REMOVED*** [options.name=session] Name of the cookie to use
 * @param ***REMOVED***boolean***REMOVED*** [options.overwrite=true]
 * @param ***REMOVED***string***REMOVED*** [options.secret]
 * @param ***REMOVED***boolean***REMOVED*** [options.signed=true]
 * @return ***REMOVED***function***REMOVED*** middleware
 * @public
 */

function cookieSession (options) ***REMOVED***
  var opts = options || ***REMOVED******REMOVED***

  // cookie name
  var name = opts.name || 'session'

  // secrets
  var keys = opts.keys
  if (!keys && opts.secret) keys = [opts.secret]

  // defaults
  if (opts.overwrite == null) opts.overwrite = true
  if (opts.httpOnly == null) opts.httpOnly = true
  if (opts.signed == null) opts.signed = true

  if (!keys && opts.signed) throw new Error('.keys required.')

  debug('session options %j', opts)

  return function _cookieSession (req, res, next) ***REMOVED***
    var cookies = req.sessionCookies = new Cookies(req, res, ***REMOVED***
      keys: keys
    ***REMOVED***)
    var sess

    // to pass to Session()
    req.sessionOptions = Object.create(opts)
    req.sessionKey = name

    req.__defineGetter__('session', function getSession () ***REMOVED***
      // already retrieved
      if (sess) ***REMOVED***
        return sess
      ***REMOVED***

      // unset
      if (sess === false) ***REMOVED***
        return null
      ***REMOVED***

      // get or create session
      return (sess = tryGetSession(req) || createSession(req))
    ***REMOVED***)

    req.__defineSetter__('session', function setSession (val) ***REMOVED***
      if (val == null) ***REMOVED***
        // unset session
        sess = false
        return val
      ***REMOVED***

      if (typeof val === 'object') ***REMOVED***
        // create a new session
        sess = Session.create(this, val)
        return sess
      ***REMOVED***

      throw new Error('req.session can only be set as null or an object.')
    ***REMOVED***)

    onHeaders(res, function setHeaders () ***REMOVED***
      if (sess === undefined) ***REMOVED***
        // not accessed
        return
      ***REMOVED***

      try ***REMOVED***
        if (sess === false) ***REMOVED***
          // remove
          cookies.set(name, '', req.sessionOptions)
        ***REMOVED*** else if ((!sess.isNew || sess.isPopulated) && sess.isChanged) ***REMOVED***
          // save populated or non-new changed session
          sess.save()
        ***REMOVED***
      ***REMOVED*** catch (e) ***REMOVED***
        debug('error saving session %s', e.message)
      ***REMOVED***
    ***REMOVED***)

    next()
  ***REMOVED***
***REMOVED***;

/**
 * Session model.
 *
 * @param ***REMOVED***Context***REMOVED*** ctx
 * @param ***REMOVED***Object***REMOVED*** obj
 * @private
 */

function Session (ctx, obj) ***REMOVED***
  Object.defineProperty(this, '_ctx', ***REMOVED***
    value: ctx
  ***REMOVED***)

  if (obj) ***REMOVED***
    for (var key in obj) ***REMOVED***
      this[key] = obj[key]
    ***REMOVED***
  ***REMOVED***
***REMOVED***

/**
 * Create new session.
 * @private
 */

Session.create = function create (req, obj) ***REMOVED***
  var ctx = new SessionContext(req)
  return new Session(ctx, obj)
***REMOVED***

/**
 * Create session from serialized form.
 * @private
 */

Session.deserialize = function deserialize (req, str) ***REMOVED***
  var ctx = new SessionContext(req)
  var obj = decode(str)

  ctx._new = false
  ctx._val = str

  return new Session(ctx, obj)
***REMOVED***

/**
 * Serialize a session to a string.
 * @private
 */

Session.serialize = function serialize (sess) ***REMOVED***
  return encode(sess)
***REMOVED***

/**
 * Return if the session is changed for this request.
 *
 * @return ***REMOVED***Boolean***REMOVED***
 * @public
 */

Object.defineProperty(Session.prototype, 'isChanged', ***REMOVED***
  get: function getIsChanged () ***REMOVED***
    return this._ctx._new || this._ctx._val !== Session.serialize(this)
  ***REMOVED***
***REMOVED***)

/**
 * Return if the session is new for this request.
 *
 * @return ***REMOVED***Boolean***REMOVED***
 * @public
 */

Object.defineProperty(Session.prototype, 'isNew', ***REMOVED***
  get: function getIsNew () ***REMOVED***
    return this._ctx._new
  ***REMOVED***
***REMOVED***)

/**
 * Return how many values there are in the session object.
 * Used to see if it's "populated".
 *
 * @return ***REMOVED***Number***REMOVED***
 * @public
 */

Object.defineProperty(Session.prototype, 'length', ***REMOVED***
  get: function getLength () ***REMOVED***
    return Object.keys(this).length
  ***REMOVED***
***REMOVED***)

/**
 * populated flag, which is just a boolean alias of .length.
 *
 * @return ***REMOVED***Boolean***REMOVED***
 * @public
 */

Object.defineProperty(Session.prototype, 'isPopulated', ***REMOVED***
  get: function getIsPopulated () ***REMOVED***
    return Boolean(this.length)
  ***REMOVED***
***REMOVED***)

/**
 * Save session changes by performing a Set-Cookie.
 * @private
 */

Session.prototype.save = function save () ***REMOVED***
  var ctx = this._ctx
  var val = Session.serialize(this)

  var cookies = ctx.req.sessionCookies
  var name = ctx.req.sessionKey
  var opts = ctx.req.sessionOptions

  debug('save %s', val)
  cookies.set(name, val, opts)
***REMOVED***

/**
 * Session context to tie session to req.
 *
 * @param ***REMOVED***Request***REMOVED*** req
 * @private
 */

function SessionContext (req) ***REMOVED***
  this.req = req

  this._new = true
  this._val = undefined
***REMOVED***

/**
 * Create a new session.
 * @private
 */

function createSession (req) ***REMOVED***
  debug('new session')
  return Session.create(req)
***REMOVED***

/**
 * Decode the base64 cookie value to an object.
 *
 * @param ***REMOVED***String***REMOVED*** string
 * @return ***REMOVED***Object***REMOVED***
 * @private
 */

function decode (string) ***REMOVED***
  var body = new Buffer(string, 'base64').toString('utf8')
  return JSON.parse(body)
***REMOVED***

/**
 * Encode an object into a base64-encoded JSON string.
 *
 * @param ***REMOVED***Object***REMOVED*** body
 * @return ***REMOVED***String***REMOVED***
 * @private
 */

function encode (body) ***REMOVED***
  var str = JSON.stringify(body)
  return new Buffer(str).toString('base64')
***REMOVED***

/**
 * Try getting a session from a request.
 * @private
 */

function tryGetSession (req) ***REMOVED***
  var cookies = req.sessionCookies
  var name = req.sessionKey
  var opts = req.sessionOptions

  var str = cookies.get(name, opts)

  if (!str) ***REMOVED***
    return undefined
  ***REMOVED***

  debug('parse %s', str)

  try ***REMOVED***
    return Session.deserialize(req, str)
  ***REMOVED*** catch (err) ***REMOVED***
    if (!(err instanceof SyntaxError)) throw err
    return undefined
  ***REMOVED***
***REMOVED***
