/*!
 * Module requirements
 */

var MongooseError = require('../error.js');

/**
 * Document Validation Error
 *
 * @api private
 * @param ***REMOVED***Document***REMOVED*** instance
 * @inherits MongooseError
 */

function ValidationError(instance) ***REMOVED***
  this.errors = ***REMOVED******REMOVED***;
  if (instance && instance.constructor.name === 'model') ***REMOVED***
    MongooseError.call(this, instance.constructor.modelName + ' validation failed');
  ***REMOVED*** else ***REMOVED***
    MongooseError.call(this, 'Validation failed');
  ***REMOVED***
  if (Error.captureStackTrace) ***REMOVED***
    Error.captureStackTrace(this);
  ***REMOVED*** else ***REMOVED***
    this.stack = new Error().stack;
  ***REMOVED***
  this.name = 'ValidationError';
  if (instance) ***REMOVED***
    instance.errors = this.errors;
  ***REMOVED***
***REMOVED***

/*!
 * Inherits from MongooseError.
 */

ValidationError.prototype = Object.create(MongooseError.prototype);
ValidationError.prototype.constructor = MongooseError;


/**
 * Console.log helper
 */

ValidationError.prototype.toString = function() ***REMOVED***
  var ret = this.name + ': ';
  var msgs = [];

  Object.keys(this.errors || ***REMOVED******REMOVED***).forEach(function(key) ***REMOVED***
    if (this === this.errors[key]) ***REMOVED***
      return;
    ***REMOVED***
    msgs.push(String(this.errors[key]));
  ***REMOVED***, this);

  return ret + msgs.join(', ');
***REMOVED***;

/*!
 * Module exports
 */

module.exports = exports = ValidationError;
