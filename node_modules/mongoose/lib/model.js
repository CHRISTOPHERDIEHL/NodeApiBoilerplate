/*!
 * Module dependencies.
 */

var Document = require('./document');
var MongooseError = require('./error');
var VersionError = MongooseError.VersionError;
var DivergentArrayError = MongooseError.DivergentArrayError;
var Query = require('./query');
var Aggregate = require('./aggregate');
var Schema = require('./schema');
var utils = require('./utils');
var hasOwnProperty = utils.object.hasOwnProperty;
var isMongooseObject = utils.isMongooseObject;
var EventEmitter = require('events').EventEmitter;
var util = require('util');
var tick = utils.tick;

var parallel = require('async/parallel');
var PromiseProvider = require('./promise_provider');

var VERSION_WHERE = 1,
    VERSION_INC = 2,
    VERSION_ALL = VERSION_WHERE | VERSION_INC;

var POJO_TO_OBJECT_OPTIONS = ***REMOVED***
  depopulate: true,
  transform: false,
  _skipDepopulateTopLevel: true
***REMOVED***;

/**
 * Model constructor
 *
 * Provides the interface to MongoDB collections as well as creates document instances.
 *
 * @param ***REMOVED***Object***REMOVED*** doc values with which to create the document
 * @inherits Document http://mongoosejs.com/docs/api.html#document-js
 * @event `error`: If listening to this event, it is emitted when a document was saved without passing a callback and an `error` occurred. If not listening, the event bubbles to the connection used to create this Model.
 * @event `index`: Emitted after `Model#ensureIndexes` completes. If an error occurred it is passed with the event.
 * @event `index-single-start`: Emitted when an individual index starts within `Model#ensureIndexes`. The fields and options being used to build the index are also passed with the event.
 * @event `index-single-done`: Emitted when an individual index finishes within `Model#ensureIndexes`. If an error occurred it is passed with the event. The fields, options, and index name are also passed.
 * @api public
 */

function Model(doc, fields, skipId) ***REMOVED***
  Document.call(this, doc, fields, skipId);
***REMOVED***

/*!
 * Inherits from Document.
 *
 * All Model.prototype features are available on
 * top level (non-sub) documents.
 */

Model.prototype.__proto__ = Document.prototype;

/**
 * Connection the model uses.
 *
 * @api public
 * @property db
 */

Model.prototype.db;

/**
 * Collection the model uses.
 *
 * @api public
 * @property collection
 */

Model.prototype.collection;

/**
 * The name of the model
 *
 * @api public
 * @property modelName
 */

Model.prototype.modelName;

/**
 * If this is a discriminator model, `baseModelName` is the name of
 * the base model.
 *
 * @api public
 * @property baseModelName
 */

Model.prototype.baseModelName;

Model.prototype.$__handleSave = function(options, callback) ***REMOVED***
  var _this = this;
  if (!options.safe && this.schema.options.safe) ***REMOVED***
    options.safe = this.schema.options.safe;
  ***REMOVED***
  if (typeof options.safe === 'boolean') ***REMOVED***
    options.safe = null;
  ***REMOVED***

  if (this.isNew) ***REMOVED***
    // send entire doc
    var toObjectOptions = ***REMOVED******REMOVED***;

    toObjectOptions.retainKeyOrder = this.schema.options.retainKeyOrder;
    toObjectOptions.depopulate = 1;
    toObjectOptions._skipDepopulateTopLevel = true;
    toObjectOptions.transform = false;

    var obj = this.toObject(toObjectOptions);

    if (!utils.object.hasOwnProperty(obj || ***REMOVED******REMOVED***, '_id')) ***REMOVED***
      // documents must have an _id else mongoose won't know
      // what to update later if more changes are made. the user
      // wouldn't know what _id was generated by mongodb either
      // nor would the ObjectId generated my mongodb necessarily
      // match the schema definition.
      setTimeout(function() ***REMOVED***
        callback(new Error('document must have an _id before saving'));
      ***REMOVED***, 0);
      return;
    ***REMOVED***

    this.$__version(true, obj);
    this.collection.insert(obj, options.safe, function(err, ret) ***REMOVED***
      if (err) ***REMOVED***
        _this.isNew = true;
        _this.emit('isNew', true);

        callback(err);
        return;
      ***REMOVED***

      callback(null, ret);
    ***REMOVED***);
    this.$__reset();
    this.isNew = false;
    this.emit('isNew', false);
    // Make it possible to retry the insert
    this.$__.inserting = true;
  ***REMOVED*** else ***REMOVED***
    // Make sure we don't treat it as a new object on error,
    // since it already exists
    this.$__.inserting = false;

    var delta = this.$__delta();

    if (delta) ***REMOVED***
      if (delta instanceof Error) ***REMOVED***
        callback(delta);
        return;
      ***REMOVED***

      var where = this.$__where(delta[0]);

      if (where instanceof Error) ***REMOVED***
        callback(where);
        return;
      ***REMOVED***

      this.collection.update(where, delta[1], options.safe, function(err, ret) ***REMOVED***
        if (err) ***REMOVED***
          callback(err);
          return;
        ***REMOVED***
        callback(null, ret);
      ***REMOVED***);
    ***REMOVED*** else ***REMOVED***
      this.$__reset();
      callback();
      return;
    ***REMOVED***

    this.emit('isNew', false);
  ***REMOVED***
***REMOVED***;

/*!
 * ignore
 */

Model.prototype.$__save = function(options, callback) ***REMOVED***
  var _this = this;

  _this.$__handleSave(options, function(error, result) ***REMOVED***
    if (error) ***REMOVED***
      return _this.schema.s.hooks.execPost('save:error', _this, [_this], ***REMOVED*** error: error ***REMOVED***, function(error) ***REMOVED***
        callback(error);
      ***REMOVED***);
    ***REMOVED***

    _this.$__reset();
    _this.$__storeShard();

    var numAffected = 0;
    if (result) ***REMOVED***
      if (Array.isArray(result)) ***REMOVED***
        numAffected = result.length;
      ***REMOVED*** else if (result.result && result.result.n !== undefined) ***REMOVED***
        numAffected = result.result.n;
      ***REMOVED*** else if (result.result && result.result.nModified !== undefined) ***REMOVED***
        numAffected = result.result.nModified;
      ***REMOVED*** else ***REMOVED***
        numAffected = result;
      ***REMOVED***
    ***REMOVED***

    // was this an update that required a version bump?
    if (_this.$__.version && !_this.$__.inserting) ***REMOVED***
      var doIncrement = VERSION_INC === (VERSION_INC & _this.$__.version);
      _this.$__.version = undefined;

      if (numAffected <= 0) ***REMOVED***
        // the update failed. pass an error back
        var err = new VersionError(_this);
        return callback(err);
      ***REMOVED***

      // increment version if was successful
      if (doIncrement) ***REMOVED***
        var key = _this.schema.options.versionKey;
        var version = _this.getValue(key) | 0;
        _this.setValue(key, version + 1);
      ***REMOVED***
    ***REMOVED***

    _this.emit('save', _this, numAffected);
    callback(null, _this, numAffected);
  ***REMOVED***);
***REMOVED***;

/**
 * Saves this document.
 *
 * ####Example:
 *
 *     product.sold = Date.now();
 *     product.save(function (err, product, numAffected) ***REMOVED***
 *       if (err) ..
 *     ***REMOVED***)
 *
 * The callback will receive three parameters
 *
 * 1. `err` if an error occurred
 * 2. `product` which is the saved `product`
 * 3. `numAffected` will be 1 when the document was successfully persisted to MongoDB, otherwise 0. Unless you tweak mongoose's internals, you don't need to worry about checking this parameter for errors - checking `err` is sufficient to make sure your document was properly saved.
 *
 * As an extra measure of flow control, save will return a Promise.
 * ####Example:
 *     product.save().then(function(product) ***REMOVED***
 *        ...
 *     ***REMOVED***);
 *
 * For legacy reasons, mongoose stores object keys in reverse order on initial
 * save. That is, `***REMOVED*** a: 1, b: 2 ***REMOVED***` will be saved as `***REMOVED*** b: 2, a: 1 ***REMOVED***` in
 * MongoDB. To override this behavior, set
 * [the `toObject.retainKeyOrder` option](http://mongoosejs.com/docs/api.html#document_Document-toObject)
 * to true on your schema.
 *
 * @param ***REMOVED***Object***REMOVED*** [options] options optional options
 * @param ***REMOVED***Object***REMOVED*** [options.safe] overrides [schema's safe option](http://mongoosejs.com//docs/guide.html#safe)
 * @param ***REMOVED***Boolean***REMOVED*** [options.validateBeforeSave] set to false to save without validating.
 * @param ***REMOVED***Function***REMOVED*** [fn] optional callback
 * @return ***REMOVED***Promise***REMOVED*** Promise
 * @api public
 * @see middleware http://mongoosejs.com/docs/middleware.html
 */

Model.prototype.save = function(options, fn) ***REMOVED***
  if (typeof options === 'function') ***REMOVED***
    fn = options;
    options = undefined;
  ***REMOVED***

  if (!options) ***REMOVED***
    options = ***REMOVED******REMOVED***;
  ***REMOVED***

  if (fn) ***REMOVED***
    fn = this.constructor.$wrapCallback(fn);
  ***REMOVED***

  return this.$__save(options, fn);
***REMOVED***;

/*!
 * Determines whether versioning should be skipped for the given path
 *
 * @param ***REMOVED***Document***REMOVED*** self
 * @param ***REMOVED***String***REMOVED*** path
 * @return ***REMOVED***Boolean***REMOVED*** true if versioning should be skipped for the given path
 */
function shouldSkipVersioning(self, path) ***REMOVED***
  var skipVersioning = self.schema.options.skipVersioning;
  if (!skipVersioning) return false;

  // Remove any array indexes from the path
  path = path.replace(/\.\d+\./, '.');

  return skipVersioning[path];
***REMOVED***

/*!
 * Apply the operation to the delta (update) clause as
 * well as track versioning for our where clause.
 *
 * @param ***REMOVED***Document***REMOVED*** self
 * @param ***REMOVED***Object***REMOVED*** where
 * @param ***REMOVED***Object***REMOVED*** delta
 * @param ***REMOVED***Object***REMOVED*** data
 * @param ***REMOVED***Mixed***REMOVED*** val
 * @param ***REMOVED***String***REMOVED*** [operation]
 */

function operand(self, where, delta, data, val, op) ***REMOVED***
  // delta
  op || (op = '$set');
  if (!delta[op]) delta[op] = ***REMOVED******REMOVED***;
  delta[op][data.path] = val;

  // disabled versioning?
  if (self.schema.options.versionKey === false) return;

  // path excluded from versioning?
  if (shouldSkipVersioning(self, data.path)) return;

  // already marked for versioning?
  if (VERSION_ALL === (VERSION_ALL & self.$__.version)) return;

  switch (op) ***REMOVED***
    case '$set':
    case '$unset':
    case '$pop':
    case '$pull':
    case '$pullAll':
    case '$push':
    case '$pushAll':
    case '$addToSet':
      break;
    default:
      // nothing to do
      return;
  ***REMOVED***

  // ensure updates sent with positional notation are
  // editing the correct array element.
  // only increment the version if an array position changes.
  // modifying elements of an array is ok if position does not change.

  if (op === '$push' || op === '$pushAll' || op === '$addToSet') ***REMOVED***
    self.$__.version = VERSION_INC;
  ***REMOVED*** else if (/^\$p/.test(op)) ***REMOVED***
    // potentially changing array positions
    self.increment();
  ***REMOVED*** else if (Array.isArray(val)) ***REMOVED***
    // $set an array
    self.increment();
  ***REMOVED*** else if (/\.\d+\.|\.\d+$/.test(data.path)) ***REMOVED***
    // now handling $set, $unset
    // subpath of array
    self.$__.version = VERSION_WHERE;
  ***REMOVED***
***REMOVED***

/*!
 * Compiles an update and where clause for a `val` with _atomics.
 *
 * @param ***REMOVED***Document***REMOVED*** self
 * @param ***REMOVED***Object***REMOVED*** where
 * @param ***REMOVED***Object***REMOVED*** delta
 * @param ***REMOVED***Object***REMOVED*** data
 * @param ***REMOVED***Array***REMOVED*** value
 */

function handleAtomics(self, where, delta, data, value) ***REMOVED***
  if (delta.$set && delta.$set[data.path]) ***REMOVED***
    // $set has precedence over other atomics
    return;
  ***REMOVED***

  if (typeof value.$__getAtomics === 'function') ***REMOVED***
    value.$__getAtomics().forEach(function(atomic) ***REMOVED***
      var op = atomic[0];
      var val = atomic[1];
      if (self.schema.options.usePushEach && op === '$pushAll') ***REMOVED***
        op = '$push';
        val = ***REMOVED*** $each: val ***REMOVED***;
      ***REMOVED***
      operand(self, where, delta, data, val, op);
    ***REMOVED***);
    return;
  ***REMOVED***

  // legacy support for plugins

  var atomics = value._atomics,
      ops = Object.keys(atomics),
      i = ops.length,
      val,
      op;

  if (i === 0) ***REMOVED***
    // $set

    if (isMongooseObject(value)) ***REMOVED***
      value = value.toObject(***REMOVED***depopulate: 1, _isNested: true***REMOVED***);
    ***REMOVED*** else if (value.valueOf) ***REMOVED***
      value = value.valueOf();
    ***REMOVED***

    return operand(self, where, delta, data, value);
  ***REMOVED***

  function iter(mem) ***REMOVED***
    return isMongooseObject(mem)
        ? mem.toObject(***REMOVED***depopulate: 1, _isNested: true***REMOVED***)
        : mem;
  ***REMOVED***

  while (i--) ***REMOVED***
    op = ops[i];
    val = atomics[op];

    if (isMongooseObject(val)) ***REMOVED***
      val = val.toObject(***REMOVED***depopulate: true, transform: false, _isNested: true***REMOVED***);
    ***REMOVED*** else if (Array.isArray(val)) ***REMOVED***
      val = val.map(iter);
    ***REMOVED*** else if (val.valueOf) ***REMOVED***
      val = val.valueOf();
    ***REMOVED***

    if (op === '$addToSet') ***REMOVED***
      val = ***REMOVED***$each: val***REMOVED***;
    ***REMOVED***

    operand(self, where, delta, data, val, op);
  ***REMOVED***
***REMOVED***

/**
 * Produces a special query document of the modified properties used in updates.
 *
 * @api private
 * @method $__delta
 * @memberOf Model
 */

Model.prototype.$__delta = function() ***REMOVED***
  var dirty = this.$__dirty();
  if (!dirty.length && VERSION_ALL !== this.$__.version) return;

  var where = ***REMOVED******REMOVED***,
      delta = ***REMOVED******REMOVED***,
      len = dirty.length,
      divergent = [],
      d = 0;

  where._id = this._doc._id;
  if (where._id.toObject) ***REMOVED***
    where._id = where._id.toObject(***REMOVED*** transform: false, depopulate: true ***REMOVED***);
  ***REMOVED***

  for (; d < len; ++d) ***REMOVED***
    var data = dirty[d];
    var value = data.value;

    var match = checkDivergentArray(this, data.path, value);
    if (match) ***REMOVED***
      divergent.push(match);
      continue;
    ***REMOVED***

    var pop = this.populated(data.path, true);
    if (!pop && this.$__.selected) ***REMOVED***
      // If any array was selected using an $elemMatch projection, we alter the path and where clause
      // NOTE: MongoDB only supports projected $elemMatch on top level array.
      var pathSplit = data.path.split('.');
      var top = pathSplit[0];
      if (this.$__.selected[top] && this.$__.selected[top].$elemMatch) ***REMOVED***
        // If the selected array entry was modified
        if (pathSplit.length > 1 && pathSplit[1] == 0 && typeof where[top] === 'undefined') ***REMOVED***
          where[top] = this.$__.selected[top];
          pathSplit[1] = '$';
          data.path = pathSplit.join('.');
        ***REMOVED***
        // if the selected array was modified in any other way throw an error
        else ***REMOVED***
          divergent.push(data.path);
          continue;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    if (divergent.length) continue;

    if (undefined === value) ***REMOVED***
      operand(this, where, delta, data, 1, '$unset');
    ***REMOVED*** else if (value === null) ***REMOVED***
      operand(this, where, delta, data, null);
    ***REMOVED*** else if (value._path && value._atomics) ***REMOVED***
      // arrays and other custom types (support plugins etc)
      handleAtomics(this, where, delta, data, value);
    ***REMOVED*** else if (value._path && Buffer.isBuffer(value)) ***REMOVED***
      // MongooseBuffer
      value = value.toObject();
      operand(this, where, delta, data, value);
    ***REMOVED*** else ***REMOVED***
      value = utils.clone(value, ***REMOVED***depopulate: 1, _isNested: true***REMOVED***);
      operand(this, where, delta, data, value);
    ***REMOVED***
  ***REMOVED***

  if (divergent.length) ***REMOVED***
    return new DivergentArrayError(divergent);
  ***REMOVED***

  if (this.$__.version) ***REMOVED***
    this.$__version(where, delta);
  ***REMOVED***

  return [where, delta];
***REMOVED***;

/*!
 * Determine if array was populated with some form of filter and is now
 * being updated in a manner which could overwrite data unintentionally.
 *
 * @see https://github.com/Automattic/mongoose/issues/1334
 * @param ***REMOVED***Document***REMOVED*** doc
 * @param ***REMOVED***String***REMOVED*** path
 * @return ***REMOVED***String|undefined***REMOVED***
 */

function checkDivergentArray(doc, path, array) ***REMOVED***
  // see if we populated this path
  var pop = doc.populated(path, true);

  if (!pop && doc.$__.selected) ***REMOVED***
    // If any array was selected using an $elemMatch projection, we deny the update.
    // NOTE: MongoDB only supports projected $elemMatch on top level array.
    var top = path.split('.')[0];
    if (doc.$__.selected[top + '.$']) ***REMOVED***
      return top;
    ***REMOVED***
  ***REMOVED***

  if (!(pop && array && array.isMongooseArray)) return;

  // If the array was populated using options that prevented all
  // documents from being returned (match, skip, limit) or they
  // deselected the _id field, $pop and $set of the array are
  // not safe operations. If _id was deselected, we do not know
  // how to remove elements. $pop will pop off the _id from the end
  // of the array in the db which is not guaranteed to be the
  // same as the last element we have here. $set of the entire array
  // would be similarily destructive as we never received all
  // elements of the array and potentially would overwrite data.
  var check = pop.options.match ||
      pop.options.options && hasOwnProperty(pop.options.options, 'limit') || // 0 is not permitted
      pop.options.options && pop.options.options.skip || // 0 is permitted
      pop.options.select && // deselected _id?
      (pop.options.select._id === 0 ||
      /\s?-_id\s?/.test(pop.options.select));

  if (check) ***REMOVED***
    var atomics = array._atomics;
    if (Object.keys(atomics).length === 0 || atomics.$set || atomics.$pop) ***REMOVED***
      return path;
    ***REMOVED***
  ***REMOVED***
***REMOVED***

/**
 * Appends versioning to the where and update clauses.
 *
 * @api private
 * @method $__version
 * @memberOf Model
 */

Model.prototype.$__version = function(where, delta) ***REMOVED***
  var key = this.schema.options.versionKey;

  if (where === true) ***REMOVED***
    // this is an insert
    if (key) this.setValue(key, delta[key] = 0);
    return;
  ***REMOVED***

  // updates

  // only apply versioning if our versionKey was selected. else
  // there is no way to select the correct version. we could fail
  // fast here and force them to include the versionKey but
  // thats a bit intrusive. can we do this automatically?
  if (!this.isSelected(key)) ***REMOVED***
    return;
  ***REMOVED***

  // $push $addToSet don't need the where clause set
  if (VERSION_WHERE === (VERSION_WHERE & this.$__.version)) ***REMOVED***
    where[key] = this.getValue(key);
  ***REMOVED***

  if (VERSION_INC === (VERSION_INC & this.$__.version)) ***REMOVED***
    if (!delta.$set || typeof delta.$set[key] === 'undefined') ***REMOVED***
      delta.$inc || (delta.$inc = ***REMOVED******REMOVED***);
      delta.$inc[key] = 1;
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

/**
 * Signal that we desire an increment of this documents version.
 *
 * ####Example:
 *
 *     Model.findById(id, function (err, doc) ***REMOVED***
 *       doc.increment();
 *       doc.save(function (err) ***REMOVED*** .. ***REMOVED***)
 *     ***REMOVED***)
 *
 * @see versionKeys http://mongoosejs.com/docs/guide.html#versionKey
 * @api public
 */

Model.prototype.increment = function increment() ***REMOVED***
  this.$__.version = VERSION_ALL;
  return this;
***REMOVED***;

/**
 * Returns a query object which applies shardkeys if they exist.
 *
 * @api private
 * @method $__where
 * @memberOf Model
 */

Model.prototype.$__where = function _where(where) ***REMOVED***
  where || (where = ***REMOVED******REMOVED***);

  var paths,
      len;

  if (!where._id) ***REMOVED***
    where._id = this._doc._id;
  ***REMOVED***

  if (this.$__.shardval) ***REMOVED***
    paths = Object.keys(this.$__.shardval);
    len = paths.length;

    for (var i = 0; i < len; ++i) ***REMOVED***
      where[paths[i]] = this.$__.shardval[paths[i]];
    ***REMOVED***
  ***REMOVED***

  if (this._doc._id == null) ***REMOVED***
    return new Error('No _id found on document!');
  ***REMOVED***

  return where;
***REMOVED***;

/**
 * Removes this document from the db.
 *
 * ####Example:
 *     product.remove(function (err, product) ***REMOVED***
 *       if (err) return handleError(err);
 *       Product.findById(product._id, function (err, product) ***REMOVED***
 *         console.log(product) // null
 *       ***REMOVED***)
 *     ***REMOVED***)
 *
 *
 * As an extra measure of flow control, remove will return a Promise (bound to `fn` if passed) so it could be chained, or hooked to recive errors
 *
 * ####Example:
 *     product.remove().then(function (product) ***REMOVED***
 *        ...
 *     ***REMOVED***).onRejected(function (err) ***REMOVED***
 *        assert.ok(err)
 *     ***REMOVED***)
 *
 * @param ***REMOVED***function(err,product)***REMOVED*** [fn] optional callback
 * @return ***REMOVED***Promise***REMOVED*** Promise
 * @api public
 */

Model.prototype.remove = function remove(options, fn) ***REMOVED***
  if (typeof options === 'function') ***REMOVED***
    fn = options;
    options = undefined;
  ***REMOVED***

  if (!options) ***REMOVED***
    options = ***REMOVED******REMOVED***;
  ***REMOVED***

  if (this.$__.removing) ***REMOVED***
    if (fn) ***REMOVED***
      this.$__.removing.then(
          function(res) ***REMOVED*** fn(null, res); ***REMOVED***,
          function(err) ***REMOVED*** fn(err); ***REMOVED***);
    ***REMOVED***
    return this;
  ***REMOVED***

  var _this = this;
  var Promise = PromiseProvider.get();

  if (fn) ***REMOVED***
    fn = this.constructor.$wrapCallback(fn);
  ***REMOVED***

  this.$__.removing = new Promise.ES6(function(resolve, reject) ***REMOVED***
    var where = _this.$__where();
    if (where instanceof Error) ***REMOVED***
      reject(where);
      fn && fn(where);
      return;
    ***REMOVED***

    if (!options.safe && _this.schema.options.safe) ***REMOVED***
      options.safe = _this.schema.options.safe;
    ***REMOVED***

    _this.collection.remove(where, options, function(err) ***REMOVED***
      if (!err) ***REMOVED***
        _this.emit('remove', _this);
        resolve(_this);
        fn && fn(null, _this);
        return;
      ***REMOVED***
      reject(err);
      fn && fn(err);
    ***REMOVED***);
  ***REMOVED***);
  return this.$__.removing;
***REMOVED***;

/**
 * Returns another Model instance.
 *
 * ####Example:
 *
 *     var doc = new Tank;
 *     doc.model('User').findById(id, callback);
 *
 * @param ***REMOVED***String***REMOVED*** name model name
 * @api public
 */

Model.prototype.model = function model(name) ***REMOVED***
  return this.db.model(name);
***REMOVED***;

/**
 * Adds a discriminator type.
 *
 * ####Example:
 *
 *     function BaseSchema() ***REMOVED***
 *       Schema.apply(this, arguments);
 *
 *       this.add(***REMOVED***
 *         name: String,
 *         createdAt: Date
 *       ***REMOVED***);
 *     ***REMOVED***
 *     util.inherits(BaseSchema, Schema);
 *
 *     var PersonSchema = new BaseSchema();
 *     var BossSchema = new BaseSchema(***REMOVED*** department: String ***REMOVED***);
 *
 *     var Person = mongoose.model('Person', PersonSchema);
 *     var Boss = Person.discriminator('Boss', BossSchema);
 *
 * @param ***REMOVED***String***REMOVED*** name   discriminator model name
 * @param ***REMOVED***Schema***REMOVED*** schema discriminator model schema
 * @api public
 */

Model.discriminator = function discriminator(name, schema) ***REMOVED***
  var CUSTOMIZABLE_DISCRIMINATOR_OPTIONS = ***REMOVED***
    toJSON: true,
    toObject: true,
    _id: true,
    id: true
  ***REMOVED***;

  if (!(schema && schema.instanceOfSchema)) ***REMOVED***
    throw new Error('You must pass a valid discriminator Schema');
  ***REMOVED***

  if (this.schema.discriminatorMapping && !this.schema.discriminatorMapping.isRoot) ***REMOVED***
    throw new Error('Discriminator "' + name +
        '" can only be a discriminator of the root model');
  ***REMOVED***

  var key = this.schema.options.discriminatorKey;
  if (schema.path(key)) ***REMOVED***
    throw new Error('Discriminator "' + name +
        '" cannot have field with name "' + key + '"');
  ***REMOVED***

  function merge(schema, baseSchema) ***REMOVED***
    utils.merge(schema, baseSchema);

    var obj = ***REMOVED******REMOVED***;
    obj[key] = ***REMOVED***
      default: name,
      set: function(newName) ***REMOVED***
        if (newName === name) ***REMOVED***
          return name;
        ***REMOVED***
        throw new Error('Can\'t set discriminator key "' + key + '"');
      ***REMOVED***
    ***REMOVED***;
    obj[key][schema.options.typeKey] = String;
    schema.add(obj);
    schema.discriminatorMapping = ***REMOVED***key: key, value: name, isRoot: false***REMOVED***;

    if (baseSchema.options.collection) ***REMOVED***
      schema.options.collection = baseSchema.options.collection;
    ***REMOVED***

    var toJSON = schema.options.toJSON;
    var toObject = schema.options.toObject;
    var _id = schema.options._id;
    var id = schema.options.id;

    var keys = Object.keys(schema.options);
    schema.options.discriminatorKey = baseSchema.options.discriminatorKey;

    for (var i = 0; i < keys.length; ++i) ***REMOVED***
      var _key = keys[i];
      if (!CUSTOMIZABLE_DISCRIMINATOR_OPTIONS[_key]) ***REMOVED***
        if (!utils.deepEqual(schema.options[_key], baseSchema.options[_key])) ***REMOVED***
          throw new Error('Can\'t customize discriminator option ' + _key +
              ' (can only modify ' +
              Object.keys(CUSTOMIZABLE_DISCRIMINATOR_OPTIONS).join(', ') +
              ')');
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    schema.options = utils.clone(baseSchema.options);
    if (toJSON) schema.options.toJSON = toJSON;
    if (toObject) schema.options.toObject = toObject;
    if (typeof _id !== 'undefined') ***REMOVED***
      schema.options._id = _id;
    ***REMOVED***
    schema.options.id = id;

    schema.callQueue = baseSchema.callQueue.concat(schema.callQueue.slice(schema._defaultMiddleware.length));
    schema._requiredpaths = undefined; // reset just in case Schema#requiredPaths() was called on either schema
  ***REMOVED***

  // merges base schema into new discriminator schema and sets new type field.
  merge(schema, this.schema);

  if (!this.discriminators) ***REMOVED***
    this.discriminators = ***REMOVED******REMOVED***;
  ***REMOVED***

  if (!this.schema.discriminatorMapping) ***REMOVED***
    this.schema.discriminatorMapping = ***REMOVED***key: key, value: null, isRoot: true***REMOVED***;
  ***REMOVED***

  if (this.discriminators[name]) ***REMOVED***
    throw new Error('Discriminator with name "' + name + '" already exists');
  ***REMOVED***
  if (this.db.models[name]) ***REMOVED***
    throw new MongooseError.OverwriteModelError(name);
  ***REMOVED***

  this.discriminators[name] = this.db.model(name, schema, this.collection.name);
  this.discriminators[name].prototype.__proto__ = this.prototype;
  Object.defineProperty(this.discriminators[name], 'baseModelName', ***REMOVED***
    value: this.modelName,
    configurable: true,
    writable: false
  ***REMOVED***);

  // apply methods and statics
  applyMethods(this.discriminators[name], schema);
  applyStatics(this.discriminators[name], schema);

  return this.discriminators[name];
***REMOVED***;

// Model (class) features

/*!
 * Give the constructor the ability to emit events.
 */

for (var i in EventEmitter.prototype) ***REMOVED***
  Model[i] = EventEmitter.prototype[i];
***REMOVED***

/**
 * Called when the model compiles.
 *
 * @api private
 */

Model.init = function init() ***REMOVED***
  if ((this.schema.options.autoIndex) ||
      (this.schema.options.autoIndex === null && this.db.config.autoIndex)) ***REMOVED***
    this.ensureIndexes(***REMOVED*** __noPromise: true, _automatic: true ***REMOVED***);
  ***REMOVED***

  this.schema.emit('init', this);
***REMOVED***;

/**
 * Sends `ensureIndex` commands to mongo for each index declared in the schema.
 *
 * ####Example:
 *
 *     Event.ensureIndexes(function (err) ***REMOVED***
 *       if (err) return handleError(err);
 *     ***REMOVED***);
 *
 * After completion, an `index` event is emitted on this `Model` passing an error if one occurred.
 *
 * ####Example:
 *
 *     var eventSchema = new Schema(***REMOVED*** thing: ***REMOVED*** type: 'string', unique: true ***REMOVED******REMOVED***)
 *     var Event = mongoose.model('Event', eventSchema);
 *
 *     Event.on('index', function (err) ***REMOVED***
 *       if (err) console.error(err); // error occurred during index creation
 *     ***REMOVED***)
 *
 * _NOTE: It is not recommended that you run this in production. Index creation may impact database performance depending on your load. Use with caution._
 *
 * The `ensureIndex` commands are not sent in parallel. This is to avoid the `MongoError: cannot add index with a background operation in progress` error. See [this ticket](https://github.com/Automattic/mongoose/issues/1365) for more information.
 *
 * @param ***REMOVED***Object***REMOVED*** [options] internal options
 * @param ***REMOVED***Function***REMOVED*** [cb] optional callback
 * @return ***REMOVED***Promise***REMOVED***
 * @api public
 */

Model.ensureIndexes = function ensureIndexes(options, callback) ***REMOVED***
  if (typeof options === 'function') ***REMOVED***
    callback = options;
    options = null;
  ***REMOVED***

  if (options && options.__noPromise) ***REMOVED***
    _ensureIndexes(this, options, callback);
    return;
  ***REMOVED***

  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  var _this = this;
  var Promise = PromiseProvider.get();
  return new Promise.ES6(function(resolve, reject) ***REMOVED***
    _ensureIndexes(_this, options || ***REMOVED******REMOVED***, function(error) ***REMOVED***
      if (error) ***REMOVED***
        callback && callback(error);
        reject(error);
      ***REMOVED***
      callback && callback();
      resolve();
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***;

function _ensureIndexes(model, options, callback) ***REMOVED***
  var indexes = model.schema.indexes();
  if (!indexes.length) ***REMOVED***
    setImmediate(function() ***REMOVED***
      callback && callback();
    ***REMOVED***);
    return;
  ***REMOVED***
  // Indexes are created one-by-one to support how MongoDB < 2.4 deals
  // with background indexes.

  var done = function(err) ***REMOVED***
    if (err && model.schema.options.emitIndexErrors) ***REMOVED***
      model.emit('error', err);
    ***REMOVED***
    model.emit('index', err);
    callback && callback(err);
  ***REMOVED***;

  var indexSingleDone = function(err, fields, options, name) ***REMOVED***
    model.emit('index-single-done', err, fields, options, name);
  ***REMOVED***;
  var indexSingleStart = function(fields, options) ***REMOVED***
    model.emit('index-single-start', fields, options);
  ***REMOVED***;

  var create = function() ***REMOVED***
    var index = indexes.shift();
    if (!index) return done();

    var indexFields = index[0];
    var options = index[1];
    _handleSafe(options);

    indexSingleStart(indexFields, options);

    model.collection.ensureIndex(indexFields, options, tick(function(err, name) ***REMOVED***
      indexSingleDone(err, indexFields, options, name);
      if (err) ***REMOVED***
        return done(err);
      ***REMOVED***
      create();
    ***REMOVED***));
  ***REMOVED***;

  setImmediate(function() ***REMOVED***
    // If buffering is off, do this manually.
    if (options._automatic && !model.collection.collection) ***REMOVED***
      model.collection.addQueue(create, []);
    ***REMOVED*** else ***REMOVED***
      create();
    ***REMOVED***
  ***REMOVED***);
***REMOVED***

function _handleSafe(options) ***REMOVED***
  if (options.safe) ***REMOVED***
    if (typeof options.safe === 'boolean') ***REMOVED***
      options.w = options.safe;
      delete options.safe;
    ***REMOVED***
    if (typeof options.safe === 'object') ***REMOVED***
      options.w = options.safe.w;
      options.j = options.safe.j;
      options.wtimeout = options.safe.wtimeout;
      delete options.safe;
    ***REMOVED***
  ***REMOVED***
***REMOVED***

/**
 * Schema the model uses.
 *
 * @property schema
 * @receiver Model
 * @api public
 */

Model.schema;

/*!
 * Connection instance the model uses.
 *
 * @property db
 * @receiver Model
 * @api public
 */

Model.db;

/*!
 * Collection the model uses.
 *
 * @property collection
 * @receiver Model
 * @api public
 */

Model.collection;

/**
 * Base Mongoose instance the model uses.
 *
 * @property base
 * @receiver Model
 * @api public
 */

Model.base;

/**
 * Registered discriminators for this model.
 *
 * @property discriminators
 * @receiver Model
 * @api public
 */

Model.discriminators;

/**
 * Removes documents from the collection.
 *
 * ####Example:
 *
 *     Comment.remove(***REMOVED*** title: 'baby born from alien father' ***REMOVED***, function (err) ***REMOVED***
 *
 *     ***REMOVED***);
 *
 * ####Note:
 *
 * To remove documents without waiting for a response from MongoDB, do not pass a `callback`, then call `exec` on the returned [Query](#query-js):
 *
 *     var query = Comment.remove(***REMOVED*** _id: id ***REMOVED***);
 *     query.exec();
 *
 * ####Note:
 *
 * This method sends a remove command directly to MongoDB, no Mongoose documents are involved. Because no Mongoose documents are involved, _no middleware (hooks) are executed_.
 *
 * @param ***REMOVED***Object***REMOVED*** conditions
 * @param ***REMOVED***Function***REMOVED*** [callback]
 * @return ***REMOVED***Query***REMOVED***
 * @api public
 */

Model.remove = function remove(conditions, callback) ***REMOVED***
  if (typeof conditions === 'function') ***REMOVED***
    callback = conditions;
    conditions = ***REMOVED******REMOVED***;
  ***REMOVED***

  // get the mongodb collection object
  var mq = new this.Query(conditions, ***REMOVED******REMOVED***, this, this.collection);

  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  return mq.remove(callback);
***REMOVED***;

/**
 * Finds documents
 *
 * The `conditions` are cast to their respective SchemaTypes before the command is sent.
 *
 * ####Examples:
 *
 *     // named john and at least 18
 *     MyModel.find(***REMOVED*** name: 'john', age: ***REMOVED*** $gte: 18 ***REMOVED******REMOVED***);
 *
 *     // executes immediately, passing results to callback
 *     MyModel.find(***REMOVED*** name: 'john', age: ***REMOVED*** $gte: 18 ***REMOVED******REMOVED***, function (err, docs) ***REMOVED******REMOVED***);
 *
 *     // name LIKE john and only selecting the "name" and "friends" fields, executing immediately
 *     MyModel.find(***REMOVED*** name: /john/i ***REMOVED***, 'name friends', function (err, docs) ***REMOVED*** ***REMOVED***)
 *
 *     // passing options
 *     MyModel.find(***REMOVED*** name: /john/i ***REMOVED***, null, ***REMOVED*** skip: 10 ***REMOVED***)
 *
 *     // passing options and executing immediately
 *     MyModel.find(***REMOVED*** name: /john/i ***REMOVED***, null, ***REMOVED*** skip: 10 ***REMOVED***, function (err, docs) ***REMOVED******REMOVED***);
 *
 *     // executing a query explicitly
 *     var query = MyModel.find(***REMOVED*** name: /john/i ***REMOVED***, null, ***REMOVED*** skip: 10 ***REMOVED***)
 *     query.exec(function (err, docs) ***REMOVED******REMOVED***);
 *
 *     // using the promise returned from executing a query
 *     var query = MyModel.find(***REMOVED*** name: /john/i ***REMOVED***, null, ***REMOVED*** skip: 10 ***REMOVED***);
 *     var promise = query.exec();
 *     promise.addBack(function (err, docs) ***REMOVED******REMOVED***);
 *
 * @param ***REMOVED***Object***REMOVED*** conditions
 * @param ***REMOVED***Object***REMOVED*** [projection] optional fields to return (http://bit.ly/1HotzBo)
 * @param ***REMOVED***Object***REMOVED*** [options] optional
 * @param ***REMOVED***Function***REMOVED*** [callback]
 * @return ***REMOVED***Query***REMOVED***
 * @see field selection #query_Query-select
 * @see promise #promise-js
 * @api public
 */

Model.find = function find(conditions, projection, options, callback) ***REMOVED***
  if (typeof conditions === 'function') ***REMOVED***
    callback = conditions;
    conditions = ***REMOVED******REMOVED***;
    projection = null;
    options = null;
  ***REMOVED*** else if (typeof projection === 'function') ***REMOVED***
    callback = projection;
    projection = null;
    options = null;
  ***REMOVED*** else if (typeof options === 'function') ***REMOVED***
    callback = options;
    options = null;
  ***REMOVED***

  var mq = new this.Query(***REMOVED******REMOVED***, ***REMOVED******REMOVED***, this, this.collection);
  mq.select(projection);
  mq.setOptions(options);
  if (this.schema.discriminatorMapping && mq.selectedInclusively()) ***REMOVED***
    mq.select(this.schema.options.discriminatorKey);
  ***REMOVED***

  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  return mq.find(conditions, callback);
***REMOVED***;

/**
 * Finds a single document by its _id field. `findById(id)` is almost*
 * equivalent to `findOne(***REMOVED*** _id: id ***REMOVED***)`. If you want to query by a document's
 * `_id`, use `findById()` instead of `findOne()`.
 *
 * The `id` is cast based on the Schema before sending the command.
 *
 * Note: `findById()` triggers `findOne` hooks.
 *
 * * Except for how it treats `undefined`. If you use `findOne()`, you'll see
 * that `findOne(undefined)` and `findOne(***REMOVED*** _id: undefined ***REMOVED***)` are equivalent
 * to `findOne(***REMOVED******REMOVED***)` and return arbitrary documents. However, mongoose
 * translates `findById(undefined)` into `findOne(***REMOVED*** _id: null ***REMOVED***)`.
 *
 * ####Example:
 *
 *     // find adventure by id and execute immediately
 *     Adventure.findById(id, function (err, adventure) ***REMOVED******REMOVED***);
 *
 *     // same as above
 *     Adventure.findById(id).exec(callback);
 *
 *     // select only the adventures name and length
 *     Adventure.findById(id, 'name length', function (err, adventure) ***REMOVED******REMOVED***);
 *
 *     // same as above
 *     Adventure.findById(id, 'name length').exec(callback);
 *
 *     // include all properties except for `length`
 *     Adventure.findById(id, '-length').exec(function (err, adventure) ***REMOVED******REMOVED***);
 *
 *     // passing options (in this case return the raw js objects, not mongoose documents by passing `lean`
 *     Adventure.findById(id, 'name', ***REMOVED*** lean: true ***REMOVED***, function (err, doc) ***REMOVED******REMOVED***);
 *
 *     // same as above
 *     Adventure.findById(id, 'name').lean().exec(function (err, doc) ***REMOVED******REMOVED***);
 *
 * @param ***REMOVED***Object|String|Number***REMOVED*** id value of `_id` to query by
 * @param ***REMOVED***Object***REMOVED*** [projection] optional fields to return (http://bit.ly/1HotzBo)
 * @param ***REMOVED***Object***REMOVED*** [options] optional
 * @param ***REMOVED***Function***REMOVED*** [callback]
 * @return ***REMOVED***Query***REMOVED***
 * @see field selection #query_Query-select
 * @see lean queries #query_Query-lean
 * @api public
 */

Model.findById = function findById(id, projection, options, callback) ***REMOVED***
  if (typeof id === 'undefined') ***REMOVED***
    id = null;
  ***REMOVED***

  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  return this.findOne(***REMOVED***_id: id***REMOVED***, projection, options, callback);
***REMOVED***;

/**
 * Finds one document.
 *
 * The `conditions` are cast to their respective SchemaTypes before the command is sent.
 *
 * *Note:* `conditions` is optional, and if `conditions` is null or undefined,
 * mongoose will send an empty `findOne` command to MongoDB, which will return
 * an arbitrary document. If you're querying by `_id`, use `findById()` instead.
 *
 * ####Example:
 *
 *     // find one iphone adventures - iphone adventures??
 *     Adventure.findOne(***REMOVED*** type: 'iphone' ***REMOVED***, function (err, adventure) ***REMOVED******REMOVED***);
 *
 *     // same as above
 *     Adventure.findOne(***REMOVED*** type: 'iphone' ***REMOVED***).exec(function (err, adventure) ***REMOVED******REMOVED***);
 *
 *     // select only the adventures name
 *     Adventure.findOne(***REMOVED*** type: 'iphone' ***REMOVED***, 'name', function (err, adventure) ***REMOVED******REMOVED***);
 *
 *     // same as above
 *     Adventure.findOne(***REMOVED*** type: 'iphone' ***REMOVED***, 'name').exec(function (err, adventure) ***REMOVED******REMOVED***);
 *
 *     // specify options, in this case lean
 *     Adventure.findOne(***REMOVED*** type: 'iphone' ***REMOVED***, 'name', ***REMOVED*** lean: true ***REMOVED***, callback);
 *
 *     // same as above
 *     Adventure.findOne(***REMOVED*** type: 'iphone' ***REMOVED***, 'name', ***REMOVED*** lean: true ***REMOVED***).exec(callback);
 *
 *     // chaining findOne queries (same as above)
 *     Adventure.findOne(***REMOVED*** type: 'iphone' ***REMOVED***).select('name').lean().exec(callback);
 *
 * @param ***REMOVED***Object***REMOVED*** [conditions]
 * @param ***REMOVED***Object***REMOVED*** [projection] optional fields to return (http://bit.ly/1HotzBo)
 * @param ***REMOVED***Object***REMOVED*** [options] optional
 * @param ***REMOVED***Function***REMOVED*** [callback]
 * @return ***REMOVED***Query***REMOVED***
 * @see field selection #query_Query-select
 * @see lean queries #query_Query-lean
 * @api public
 */

Model.findOne = function findOne(conditions, projection, options, callback) ***REMOVED***
  if (typeof options === 'function') ***REMOVED***
    callback = options;
    options = null;
  ***REMOVED*** else if (typeof projection === 'function') ***REMOVED***
    callback = projection;
    projection = null;
    options = null;
  ***REMOVED*** else if (typeof conditions === 'function') ***REMOVED***
    callback = conditions;
    conditions = ***REMOVED******REMOVED***;
    projection = null;
    options = null;
  ***REMOVED***

  // get the mongodb collection object
  var mq = new this.Query(***REMOVED******REMOVED***, ***REMOVED******REMOVED***, this, this.collection);
  mq.select(projection);
  mq.setOptions(options);
  if (this.schema.discriminatorMapping && mq.selectedInclusively()) ***REMOVED***
    mq.select(this.schema.options.discriminatorKey);
  ***REMOVED***

  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  return mq.findOne(conditions, callback);
***REMOVED***;

/**
 * Counts number of matching documents in a database collection.
 *
 * ####Example:
 *
 *     Adventure.count(***REMOVED*** type: 'jungle' ***REMOVED***, function (err, count) ***REMOVED***
 *       if (err) ..
 *       console.log('there are %d jungle adventures', count);
 *     ***REMOVED***);
 *
 * @param ***REMOVED***Object***REMOVED*** conditions
 * @param ***REMOVED***Function***REMOVED*** [callback]
 * @return ***REMOVED***Query***REMOVED***
 * @api public
 */

Model.count = function count(conditions, callback) ***REMOVED***
  if (typeof conditions === 'function') ***REMOVED***
    callback = conditions;
    conditions = ***REMOVED******REMOVED***;
  ***REMOVED***

  // get the mongodb collection object
  var mq = new this.Query(***REMOVED******REMOVED***, ***REMOVED******REMOVED***, this, this.collection);

  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  return mq.count(conditions, callback);
***REMOVED***;

/**
 * Creates a Query for a `distinct` operation.
 *
 * Passing a `callback` immediately executes the query.
 *
 * ####Example
 *
 *     Link.distinct('url', ***REMOVED*** clicks: ***REMOVED***$gt: 100***REMOVED******REMOVED***, function (err, result) ***REMOVED***
 *       if (err) return handleError(err);
 *
 *       assert(Array.isArray(result));
 *       console.log('unique urls with more than 100 clicks', result);
 *     ***REMOVED***)
 *
 *     var query = Link.distinct('url');
 *     query.exec(callback);
 *
 * @param ***REMOVED***String***REMOVED*** field
 * @param ***REMOVED***Object***REMOVED*** [conditions] optional
 * @param ***REMOVED***Function***REMOVED*** [callback]
 * @return ***REMOVED***Query***REMOVED***
 * @api public
 */

Model.distinct = function distinct(field, conditions, callback) ***REMOVED***
  // get the mongodb collection object
  var mq = new this.Query(***REMOVED******REMOVED***, ***REMOVED******REMOVED***, this, this.collection);

  if (typeof conditions === 'function') ***REMOVED***
    callback = conditions;
    conditions = ***REMOVED******REMOVED***;
  ***REMOVED***
  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  return mq.distinct(field, conditions, callback);
***REMOVED***;

/**
 * Creates a Query, applies the passed conditions, and returns the Query.
 *
 * For example, instead of writing:
 *
 *     User.find(***REMOVED***age: ***REMOVED***$gte: 21, $lte: 65***REMOVED******REMOVED***, callback);
 *
 * we can instead write:
 *
 *     User.where('age').gte(21).lte(65).exec(callback);
 *
 * Since the Query class also supports `where` you can continue chaining
 *
 *     User
 *     .where('age').gte(21).lte(65)
 *     .where('name', /^b/i)
 *     ... etc
 *
 * @param ***REMOVED***String***REMOVED*** path
 * @param ***REMOVED***Object***REMOVED*** [val] optional value
 * @return ***REMOVED***Query***REMOVED***
 * @api public
 */

Model.where = function where(path, val) ***REMOVED***
  void val; // eslint
  // get the mongodb collection object
  var mq = new this.Query(***REMOVED******REMOVED***, ***REMOVED******REMOVED***, this, this.collection).find(***REMOVED******REMOVED***);
  return mq.where.apply(mq, arguments);
***REMOVED***;

/**
 * Creates a `Query` and specifies a `$where` condition.
 *
 * Sometimes you need to query for things in mongodb using a JavaScript expression. You can do so via `find(***REMOVED*** $where: javascript ***REMOVED***)`, or you can use the mongoose shortcut method $where via a Query chain or from your mongoose Model.
 *
 *     Blog.$where('this.username.indexOf("val") !== -1').exec(function (err, docs) ***REMOVED******REMOVED***);
 *
 * @param ***REMOVED***String|Function***REMOVED*** argument is a javascript string or anonymous function
 * @method $where
 * @memberOf Model
 * @return ***REMOVED***Query***REMOVED***
 * @see Query.$where #query_Query-%24where
 * @api public
 */

Model.$where = function $where() ***REMOVED***
  var mq = new this.Query(***REMOVED******REMOVED***, ***REMOVED******REMOVED***, this, this.collection).find(***REMOVED******REMOVED***);
  return mq.$where.apply(mq, arguments);
***REMOVED***;

/**
 * Issues a mongodb findAndModify update command.
 *
 * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed else a Query object is returned.
 *
 * ####Options:
 *
 * - `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)
 * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.
 * - `fields`: ***REMOVED***Object|String***REMOVED*** - Field selection. Equivalent to `.select(fields).findOneAndUpdate()`
 * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0
 * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update
 * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.
 * - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).
 * - `passRawResult`: if true, passes the [raw result from the MongoDB driver as the third callback parameter](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)
 *
 *
 * ####Examples:
 *
 *     A.findOneAndUpdate(conditions, update, options, callback) // executes
 *     A.findOneAndUpdate(conditions, update, options)  // returns Query
 *     A.findOneAndUpdate(conditions, update, callback) // executes
 *     A.findOneAndUpdate(conditions, update)           // returns Query
 *     A.findOneAndUpdate()                             // returns Query
 *
 * ####Note:
 *
 * All top level update keys which are not `atomic` operation names are treated as set operations:
 *
 * ####Example:
 *
 *     var query = ***REMOVED*** name: 'borne' ***REMOVED***;
 *     Model.findOneAndUpdate(query, ***REMOVED*** name: 'jason borne' ***REMOVED***, options, callback)
 *
 *     // is sent as
 *     Model.findOneAndUpdate(query, ***REMOVED*** $set: ***REMOVED*** name: 'jason borne' ***REMOVED******REMOVED***, options, callback)
 *
 * This helps prevent accidentally overwriting your document with `***REMOVED*** name: 'jason borne' ***REMOVED***`.
 *
 * ####Note:
 *
 * Values are cast to their appropriate types when using the findAndModify helpers.
 * However, the below are never executed.
 *
 * - defaults
 * - setters
 *
 * `findAndModify` helpers support limited defaults and validation. You can
 * enable these by setting the `setDefaultsOnInsert` and `runValidators` options,
 * respectively.
 *
 * If you need full-fledged validation, use the traditional approach of first
 * retrieving the document.
 *
 *     Model.findById(id, function (err, doc) ***REMOVED***
 *       if (err) ..
 *       doc.name = 'jason borne';
 *       doc.save(callback);
 *     ***REMOVED***);
 *
 * @param ***REMOVED***Object***REMOVED*** [conditions]
 * @param ***REMOVED***Object***REMOVED*** [update]
 * @param ***REMOVED***Object***REMOVED*** [options]
 * @param ***REMOVED***Function***REMOVED*** [callback]
 * @return ***REMOVED***Query***REMOVED***
 * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command
 * @api public
 */

Model.findOneAndUpdate = function(conditions, update, options, callback) ***REMOVED***
  if (typeof options === 'function') ***REMOVED***
    callback = options;
    options = null;
  ***REMOVED*** else if (arguments.length === 1) ***REMOVED***
    if (typeof conditions === 'function') ***REMOVED***
      var msg = 'Model.findOneAndUpdate(): First argument must not be a function.\n\n'
          + '  ' + this.modelName + '.findOneAndUpdate(conditions, update, options, callback)\n'
          + '  ' + this.modelName + '.findOneAndUpdate(conditions, update, options)\n'
          + '  ' + this.modelName + '.findOneAndUpdate(conditions, update)\n'
          + '  ' + this.modelName + '.findOneAndUpdate(update)\n'
          + '  ' + this.modelName + '.findOneAndUpdate()\n';
      throw new TypeError(msg);
    ***REMOVED***
    update = conditions;
    conditions = undefined;
  ***REMOVED***
  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  var fields;
  if (options && options.fields) ***REMOVED***
    fields = options.fields;
  ***REMOVED***

  update = utils.clone(update, ***REMOVED***depopulate: 1, _isNested: true***REMOVED***);
  if (this.schema.options.versionKey && options && options.upsert) ***REMOVED***
    if (!update.$setOnInsert) ***REMOVED***
      update.$setOnInsert = ***REMOVED******REMOVED***;
    ***REMOVED***
    update.$setOnInsert[this.schema.options.versionKey] = 0;
  ***REMOVED***

  var mq = new this.Query(***REMOVED******REMOVED***, ***REMOVED******REMOVED***, this, this.collection);
  mq.select(fields);

  return mq.findOneAndUpdate(conditions, update, options, callback);
***REMOVED***;

/**
 * Issues a mongodb findAndModify update command by a document's _id field.
 * `findByIdAndUpdate(id, ...)` is equivalent to `findOneAndUpdate(***REMOVED*** _id: id ***REMOVED***, ...)`.
 *
 * Finds a matching document, updates it according to the `update` arg,
 * passing any `options`, and returns the found document (if any) to the
 * callback. The query executes immediately if `callback` is passed else a
 * Query object is returned.
 *
 * This function triggers `findOneAndUpdate` middleware.
 *
 * ####Options:
 *
 * - `new`: bool - true to return the modified document rather than the original. defaults to false
 * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.
 * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.
 * - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).
 * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update
 * - `select`: sets the document fields to return
 *
 * ####Examples:
 *
 *     A.findByIdAndUpdate(id, update, options, callback) // executes
 *     A.findByIdAndUpdate(id, update, options)  // returns Query
 *     A.findByIdAndUpdate(id, update, callback) // executes
 *     A.findByIdAndUpdate(id, update)           // returns Query
 *     A.findByIdAndUpdate()                     // returns Query
 *
 * ####Note:
 *
 * All top level update keys which are not `atomic` operation names are treated as set operations:
 *
 * ####Example:
 *
 *     Model.findByIdAndUpdate(id, ***REMOVED*** name: 'jason borne' ***REMOVED***, options, callback)
 *
 *     // is sent as
 *     Model.findByIdAndUpdate(id, ***REMOVED*** $set: ***REMOVED*** name: 'jason borne' ***REMOVED******REMOVED***, options, callback)
 *
 * This helps prevent accidentally overwriting your document with `***REMOVED*** name: 'jason borne' ***REMOVED***`.
 *
 * ####Note:
 *
 * Values are cast to their appropriate types when using the findAndModify helpers.
 * However, the below are never executed.
 *
 * - defaults
 * - setters
 *
 * `findAndModify` helpers support limited defaults and validation. You can
 * enable these by setting the `setDefaultsOnInsert` and `runValidators` options,
 * respectively.
 *
 * If you need full-fledged validation, use the traditional approach of first
 * retrieving the document.
 *
 *     Model.findById(id, function (err, doc) ***REMOVED***
 *       if (err) ..
 *       doc.name = 'jason borne';
 *       doc.save(callback);
 *     ***REMOVED***);
 *
 * @param ***REMOVED***Object|Number|String***REMOVED*** id value of `_id` to query by
 * @param ***REMOVED***Object***REMOVED*** [update]
 * @param ***REMOVED***Object***REMOVED*** [options]
 * @param ***REMOVED***Function***REMOVED*** [callback]
 * @return ***REMOVED***Query***REMOVED***
 * @see Model.findOneAndUpdate #model_Model.findOneAndUpdate
 * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command
 * @api public
 */

Model.findByIdAndUpdate = function(id, update, options, callback) ***REMOVED***
  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***
  if (arguments.length === 1) ***REMOVED***
    if (typeof id === 'function') ***REMOVED***
      var msg = 'Model.findByIdAndUpdate(): First argument must not be a function.\n\n'
          + '  ' + this.modelName + '.findByIdAndUpdate(id, callback)\n'
          + '  ' + this.modelName + '.findByIdAndUpdate(id)\n'
          + '  ' + this.modelName + '.findByIdAndUpdate()\n';
      throw new TypeError(msg);
    ***REMOVED***
    return this.findOneAndUpdate(***REMOVED***_id: id***REMOVED***, undefined);
  ***REMOVED***

  // if a model is passed in instead of an id
  if (id instanceof Document) ***REMOVED***
    id = id._id;
  ***REMOVED***

  return this.findOneAndUpdate.call(this, ***REMOVED***_id: id***REMOVED***, update, options, callback);
***REMOVED***;

/**
 * Issue a mongodb findAndModify remove command.
 *
 * Finds a matching document, removes it, passing the found document (if any) to the callback.
 *
 * Executes immediately if `callback` is passed else a Query object is returned.
 *
 * ####Options:
 *
 * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update
 * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0
 * - `select`: sets the document fields to return
 *
 * ####Examples:
 *
 *     A.findOneAndRemove(conditions, options, callback) // executes
 *     A.findOneAndRemove(conditions, options)  // return Query
 *     A.findOneAndRemove(conditions, callback) // executes
 *     A.findOneAndRemove(conditions) // returns Query
 *     A.findOneAndRemove()           // returns Query
 *
 * Values are cast to their appropriate types when using the findAndModify helpers.
 * However, the below are never executed.
 *
 * - defaults
 * - setters
 *
 * `findAndModify` helpers support limited defaults and validation. You can
 * enable these by setting the `setDefaultsOnInsert` and `runValidators` options,
 * respectively.
 *
 * If you need full-fledged validation, use the traditional approach of first
 * retrieving the document.
 *
 *     Model.findById(id, function (err, doc) ***REMOVED***
 *       if (err) ..
 *       doc.name = 'jason borne';
 *       doc.save(callback);
 *     ***REMOVED***);
 *
 * @param ***REMOVED***Object***REMOVED*** conditions
 * @param ***REMOVED***Object***REMOVED*** [options]
 * @param ***REMOVED***Function***REMOVED*** [callback]
 * @return ***REMOVED***Query***REMOVED***
 * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command
 * @api public
 */

Model.findOneAndRemove = function(conditions, options, callback) ***REMOVED***
  if (arguments.length === 1 && typeof conditions === 'function') ***REMOVED***
    var msg = 'Model.findOneAndRemove(): First argument must not be a function.\n\n'
        + '  ' + this.modelName + '.findOneAndRemove(conditions, callback)\n'
        + '  ' + this.modelName + '.findOneAndRemove(conditions)\n'
        + '  ' + this.modelName + '.findOneAndRemove()\n';
    throw new TypeError(msg);
  ***REMOVED***

  if (typeof options === 'function') ***REMOVED***
    callback = options;
    options = undefined;
  ***REMOVED***
  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  var fields;
  if (options) ***REMOVED***
    fields = options.select;
    options.select = undefined;
  ***REMOVED***

  var mq = new this.Query(***REMOVED******REMOVED***, ***REMOVED******REMOVED***, this, this.collection);
  mq.select(fields);

  return mq.findOneAndRemove(conditions, options, callback);
***REMOVED***;

/**
 * Issue a mongodb findAndModify remove command by a document's _id field. `findByIdAndRemove(id, ...)` is equivalent to `findOneAndRemove(***REMOVED*** _id: id ***REMOVED***, ...)`.
 *
 * Finds a matching document, removes it, passing the found document (if any) to the callback.
 *
 * Executes immediately if `callback` is passed, else a `Query` object is returned.
 *
 * ####Options:
 *
 * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update
 * - `select`: sets the document fields to return
 *
 * ####Examples:
 *
 *     A.findByIdAndRemove(id, options, callback) // executes
 *     A.findByIdAndRemove(id, options)  // return Query
 *     A.findByIdAndRemove(id, callback) // executes
 *     A.findByIdAndRemove(id) // returns Query
 *     A.findByIdAndRemove()           // returns Query
 *
 * @param ***REMOVED***Object|Number|String***REMOVED*** id value of `_id` to query by
 * @param ***REMOVED***Object***REMOVED*** [options]
 * @param ***REMOVED***Function***REMOVED*** [callback]
 * @return ***REMOVED***Query***REMOVED***
 * @see Model.findOneAndRemove #model_Model.findOneAndRemove
 * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command
 */

Model.findByIdAndRemove = function(id, options, callback) ***REMOVED***
  if (arguments.length === 1 && typeof id === 'function') ***REMOVED***
    var msg = 'Model.findByIdAndRemove(): First argument must not be a function.\n\n'
        + '  ' + this.modelName + '.findByIdAndRemove(id, callback)\n'
        + '  ' + this.modelName + '.findByIdAndRemove(id)\n'
        + '  ' + this.modelName + '.findByIdAndRemove()\n';
    throw new TypeError(msg);
  ***REMOVED***
  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  return this.findOneAndRemove(***REMOVED***_id: id***REMOVED***, options, callback);
***REMOVED***;

/**
 * Shortcut for saving one or more documents to the database.
 * `MyModel.create(docs)` does `new MyModel(doc).save()` for every doc in
 * docs.
 *
 * Hooks Triggered:
 * - `save()`
 *
 * ####Example:
 *
 *     // pass individual docs
 *     Candy.create(***REMOVED*** type: 'jelly bean' ***REMOVED***, ***REMOVED*** type: 'snickers' ***REMOVED***, function (err, jellybean, snickers) ***REMOVED***
 *       if (err) // ...
 *     ***REMOVED***);
 *
 *     // pass an array
 *     var array = [***REMOVED*** type: 'jelly bean' ***REMOVED***, ***REMOVED*** type: 'snickers' ***REMOVED***];
 *     Candy.create(array, function (err, candies) ***REMOVED***
 *       if (err) // ...
 *
 *       var jellybean = candies[0];
 *       var snickers = candies[1];
 *       // ...
 *     ***REMOVED***);
 *
 *     // callback is optional; use the returned promise if you like:
 *     var promise = Candy.create(***REMOVED*** type: 'jawbreaker' ***REMOVED***);
 *     promise.then(function (jawbreaker) ***REMOVED***
 *       // ...
 *     ***REMOVED***)
 *
 * @param ***REMOVED***Array|Object|****REMOVED*** doc(s)
 * @param ***REMOVED***Function***REMOVED*** [callback] callback
 * @return ***REMOVED***Promise***REMOVED***
 * @api public
 */

Model.create = function create(doc, callback) ***REMOVED***
  var args;
  var cb;

  if (Array.isArray(doc)) ***REMOVED***
    args = doc;
    cb = callback;
  ***REMOVED*** else ***REMOVED***
    var last = arguments[arguments.length - 1];
    if (typeof last === 'function') ***REMOVED***
      cb = last;
      args = utils.args(arguments, 0, arguments.length - 1);
    ***REMOVED*** else ***REMOVED***
      args = utils.args(arguments);
    ***REMOVED***
  ***REMOVED***

  var Promise = PromiseProvider.get();
  var _this = this;
  if (cb) ***REMOVED***
    cb = this.$wrapCallback(cb);
  ***REMOVED***

  var promise = new Promise.ES6(function(resolve, reject) ***REMOVED***
    if (args.length === 0) ***REMOVED***
      setImmediate(function() ***REMOVED***
        cb && cb(null);
        resolve(null);
      ***REMOVED***);
      return;
    ***REMOVED***

    var toExecute = [];
    args.forEach(function(doc) ***REMOVED***
      toExecute.push(function(callback) ***REMOVED***
        var toSave = doc instanceof _this ? doc : new _this(doc);
        var callbackWrapper = function(error, doc) ***REMOVED***
          if (error) ***REMOVED***
            return callback(error);
          ***REMOVED***
          callback(null, doc);
        ***REMOVED***;

        // Hack to avoid getting a promise because of
        // $__registerHooksFromSchema
        if (toSave.$__original_save) ***REMOVED***
          toSave.$__original_save(***REMOVED*** __noPromise: true ***REMOVED***, callbackWrapper);
        ***REMOVED*** else ***REMOVED***
          toSave.save(***REMOVED*** __noPromise: true ***REMOVED***, callbackWrapper);
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***);

    parallel(toExecute, function(error, savedDocs) ***REMOVED***
      if (error) ***REMOVED***
        if (cb) ***REMOVED***
          cb(error);
        ***REMOVED*** else ***REMOVED***
          reject(error);
        ***REMOVED***
        return;
      ***REMOVED***

      if (doc instanceof Array) ***REMOVED***
        resolve(savedDocs);
        cb && cb.call(_this, null, savedDocs);
      ***REMOVED*** else ***REMOVED***
        resolve.apply(promise, savedDocs);
        if (cb) ***REMOVED***
          savedDocs.unshift(null);
          cb.apply(_this, savedDocs);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***);

  return promise;
***REMOVED***;

/**
 * Shortcut for validating an array of documents and inserting them into
 * MongoDB if they're all valid. This function is faster than `.create()`
 * because it only sends one operation to the server, rather than one for each
 * document.
 *
 * This function does **not** trigger save middleware.
 *
 * ####Example:
 *
 *     var arr = [***REMOVED*** name: 'Star Wars' ***REMOVED***, ***REMOVED*** name: 'The Empire Strikes Back' ***REMOVED***];
 *     Movies.insertMany(arr, function(error, docs) ***REMOVED******REMOVED***);
 *
 * @param ***REMOVED***Array|Object|****REMOVED*** doc(s)
 * @param ***REMOVED***Function***REMOVED*** [callback] callback
 * @return ***REMOVED***Promise***REMOVED***
 * @api public
 */

Model.insertMany = function(arr, callback) ***REMOVED***
  var _this = this;
  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  if (!Array.isArray(arr)) ***REMOVED***
    arr = [arr];
  ***REMOVED***

  var toExecute = [];
  arr.forEach(function(doc) ***REMOVED***
    toExecute.push(function(callback) ***REMOVED***
      doc = new _this(doc);
      doc.validate(***REMOVED*** __noPromise: true ***REMOVED***, function(error) ***REMOVED***
        if (error) ***REMOVED***
          return callback(error);
        ***REMOVED***
        callback(null, doc);
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***);

  parallel(toExecute, function(error, docs) ***REMOVED***
    if (error) ***REMOVED***
      callback && callback(error);
      return;
    ***REMOVED***
    var docObjects = docs.map(function(doc) ***REMOVED***
      if (doc.schema.options.versionKey) ***REMOVED***
        doc[doc.schema.options.versionKey] = 0;
      ***REMOVED***
      if (doc.initializeTimestamps) ***REMOVED***
        return doc.initializeTimestamps().toObject(POJO_TO_OBJECT_OPTIONS);
      ***REMOVED***
      return doc.toObject(POJO_TO_OBJECT_OPTIONS);
    ***REMOVED***);
    _this.collection.insertMany(docObjects, function(error) ***REMOVED***
      if (error) ***REMOVED***
        callback && callback(error);
        return;
      ***REMOVED***
      for (var i = 0; i < docs.length; ++i) ***REMOVED***
        docs[i].isNew = false;
        docs[i].emit('isNew', false);
      ***REMOVED***
      callback && callback(null, docs);
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***;

/**
 * Shortcut for creating a new Document from existing raw data, pre-saved in the DB.
 * The document returned has no paths marked as modified initially.
 *
 * ####Example:
 *
 *     // hydrate previous data into a Mongoose document
 *     var mongooseCandy = Candy.hydrate(***REMOVED*** _id: '54108337212ffb6d459f854c', type: 'jelly bean' ***REMOVED***);
 *
 * @param ***REMOVED***Object***REMOVED*** obj
 * @return ***REMOVED***Document***REMOVED***
 * @api public
 */

Model.hydrate = function(obj) ***REMOVED***
  var model = require('./queryhelpers').createModel(this, obj);
  model.init(obj);
  return model;
***REMOVED***;

/**
 * Updates documents in the database without returning them.
 *
 * ####Examples:
 *
 *     MyModel.update(***REMOVED*** age: ***REMOVED*** $gt: 18 ***REMOVED*** ***REMOVED***, ***REMOVED*** oldEnough: true ***REMOVED***, fn);
 *     MyModel.update(***REMOVED*** name: 'Tobi' ***REMOVED***, ***REMOVED*** ferret: true ***REMOVED***, ***REMOVED*** multi: true ***REMOVED***, function (err, raw) ***REMOVED***
 *       if (err) return handleError(err);
 *       console.log('The raw response from Mongo was ', raw);
 *     ***REMOVED***);
 *
 * ####Valid options:
 *
 *  - `safe` (boolean) safe mode (defaults to value set in schema (true))
 *  - `upsert` (boolean) whether to create the doc if it doesn't match (false)
 *  - `multi` (boolean) whether multiple documents should be updated (false)
 *  - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.
 *  - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).
 *  - `strict` (boolean) overrides the `strict` option for this update
 *  - `overwrite` (boolean) disables update-only mode, allowing you to overwrite the doc (false)
 *
 * All `update` values are cast to their appropriate SchemaTypes before being sent.
 *
 * The `callback` function receives `(err, rawResponse)`.
 *
 * - `err` is the error if any occurred
 * - `rawResponse` is the full response from Mongo
 *
 * ####Note:
 *
 * All top level keys which are not `atomic` operation names are treated as set operations:
 *
 * ####Example:
 *
 *     var query = ***REMOVED*** name: 'borne' ***REMOVED***;
 *     Model.update(query, ***REMOVED*** name: 'jason borne' ***REMOVED***, options, callback)
 *
 *     // is sent as
 *     Model.update(query, ***REMOVED*** $set: ***REMOVED*** name: 'jason borne' ***REMOVED******REMOVED***, options, callback)
 *     // if overwrite option is false. If overwrite is true, sent without the $set wrapper.
 *
 * This helps prevent accidentally overwriting all documents in your collection with `***REMOVED*** name: 'jason borne' ***REMOVED***`.
 *
 * ####Note:
 *
 * Be careful to not use an existing model instance for the update clause (this won't work and can cause weird behavior like infinite loops). Also, ensure that the update clause does not have an _id property, which causes Mongo to return a "Mod on _id not allowed" error.
 *
 * ####Note:
 *
 * To update documents without waiting for a response from MongoDB, do not pass a `callback`, then call `exec` on the returned [Query](#query-js):
 *
 *     Comment.update(***REMOVED*** _id: id ***REMOVED***, ***REMOVED*** $set: ***REMOVED*** text: 'changed' ***REMOVED******REMOVED***).exec();
 *
 * ####Note:
 *
 * Although values are casted to their appropriate types when using update, the following are *not* applied:
 *
 * - defaults
 * - setters
 * - validators
 * - middleware
 *
 * If you need those features, use the traditional approach of first retrieving the document.
 *
 *     Model.findOne(***REMOVED*** name: 'borne' ***REMOVED***, function (err, doc) ***REMOVED***
 *       if (err) ..
 *       doc.name = 'jason borne';
 *       doc.save(callback);
 *     ***REMOVED***)
 *
 * @see strict http://mongoosejs.com/docs/guide.html#strict
 * @see response http://docs.mongodb.org/v2.6/reference/command/update/#output
 * @param ***REMOVED***Object***REMOVED*** conditions
 * @param ***REMOVED***Object***REMOVED*** doc
 * @param ***REMOVED***Object***REMOVED*** [options]
 * @param ***REMOVED***Function***REMOVED*** [callback]
 * @return ***REMOVED***Query***REMOVED***
 * @api public
 */

Model.update = function update(conditions, doc, options, callback) ***REMOVED***
  var mq = new this.Query(***REMOVED******REMOVED***, ***REMOVED******REMOVED***, this, this.collection);
  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***
  // gh-2406
  // make local deep copy of conditions
  if (conditions instanceof Document) ***REMOVED***
    conditions = conditions.toObject();
  ***REMOVED*** else ***REMOVED***
    conditions = utils.clone(conditions, ***REMOVED***retainKeyOrder: true***REMOVED***);
  ***REMOVED***
  options = typeof options === 'function' ? options : utils.clone(options);

  if (this.schema.options.versionKey && options && options.upsert) ***REMOVED***
    if (options.overwrite) ***REMOVED***
      doc[this.schema.options.versionKey] = 0;
    ***REMOVED*** else ***REMOVED***
      if (!doc.$setOnInsert) ***REMOVED***
        doc.$setOnInsert = ***REMOVED******REMOVED***;
      ***REMOVED***
      doc.$setOnInsert[this.schema.options.versionKey] = 0;
    ***REMOVED***
  ***REMOVED***

  return mq.update(conditions, doc, options, callback);
***REMOVED***;

/**
 * Executes a mapReduce command.
 *
 * `o` is an object specifying all mapReduce options as well as the map and reduce functions. All options are delegated to the driver implementation. See [node-mongodb-native mapReduce() documentation](http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#mapreduce) for more detail about options.
 *
 * ####Example:
 *
 *     var o = ***REMOVED******REMOVED***;
 *     o.map = function () ***REMOVED*** emit(this.name, 1) ***REMOVED***
 *     o.reduce = function (k, vals) ***REMOVED*** return vals.length ***REMOVED***
 *     User.mapReduce(o, function (err, results) ***REMOVED***
 *       console.log(results)
 *     ***REMOVED***)
 *
 * ####Other options:
 *
 * - `query` ***REMOVED***Object***REMOVED*** query filter object.
 * - `sort` ***REMOVED***Object***REMOVED*** sort input objects using this key
 * - `limit` ***REMOVED***Number***REMOVED*** max number of documents
 * - `keeptemp` ***REMOVED***Boolean, default:false***REMOVED*** keep temporary data
 * - `finalize` ***REMOVED***Function***REMOVED*** finalize function
 * - `scope` ***REMOVED***Object***REMOVED*** scope variables exposed to map/reduce/finalize during execution
 * - `jsMode` ***REMOVED***Boolean, default:false***REMOVED*** it is possible to make the execution stay in JS. Provided in MongoDB > 2.0.X
 * - `verbose` ***REMOVED***Boolean, default:false***REMOVED*** provide statistics on job execution time.
 * - `readPreference` ***REMOVED***String***REMOVED***
 * - `out*` ***REMOVED***Object, default: ***REMOVED***inline:1***REMOVED******REMOVED*** sets the output target for the map reduce job.
 *
 * ####* out options:
 *
 * - `***REMOVED***inline:1***REMOVED***` the results are returned in an array
 * - `***REMOVED***replace: 'collectionName'***REMOVED***` add the results to collectionName: the results replace the collection
 * - `***REMOVED***reduce: 'collectionName'***REMOVED***` add the results to collectionName: if dups are detected, uses the reducer / finalize functions
 * - `***REMOVED***merge: 'collectionName'***REMOVED***` add the results to collectionName: if dups exist the new docs overwrite the old
 *
 * If `options.out` is set to `replace`, `merge`, or `reduce`, a Model instance is returned that can be used for further querying. Queries run against this model are all executed with the `lean` option; meaning only the js object is returned and no Mongoose magic is applied (getters, setters, etc).
 *
 * ####Example:
 *
 *     var o = ***REMOVED******REMOVED***;
 *     o.map = function () ***REMOVED*** emit(this.name, 1) ***REMOVED***
 *     o.reduce = function (k, vals) ***REMOVED*** return vals.length ***REMOVED***
 *     o.out = ***REMOVED*** replace: 'createdCollectionNameForResults' ***REMOVED***
 *     o.verbose = true;
 *
 *     User.mapReduce(o, function (err, model, stats) ***REMOVED***
 *       console.log('map reduce took %d ms', stats.processtime)
 *       model.find().where('value').gt(10).exec(function (err, docs) ***REMOVED***
 *         console.log(docs);
 *       ***REMOVED***);
 *     ***REMOVED***)
 *
 *     // a promise is returned so you may instead write
 *     var promise = User.mapReduce(o);
 *     promise.then(function (model, stats) ***REMOVED***
 *       console.log('map reduce took %d ms', stats.processtime)
 *       return model.find().where('value').gt(10).exec();
 *     ***REMOVED***).then(function (docs) ***REMOVED***
 *        console.log(docs);
 *     ***REMOVED***).then(null, handleError).end()
 *
 * @param ***REMOVED***Object***REMOVED*** o an object specifying map-reduce options
 * @param ***REMOVED***Function***REMOVED*** [callback] optional callback
 * @see http://www.mongodb.org/display/DOCS/MapReduce
 * @return ***REMOVED***Promise***REMOVED***
 * @api public
 */

Model.mapReduce = function mapReduce(o, callback) ***REMOVED***
  var _this = this;
  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***
  var Promise = PromiseProvider.get();
  return new Promise.ES6(function(resolve, reject) ***REMOVED***
    if (!Model.mapReduce.schema) ***REMOVED***
      var opts = ***REMOVED***noId: true, noVirtualId: true, strict: false***REMOVED***;
      Model.mapReduce.schema = new Schema(***REMOVED******REMOVED***, opts);
    ***REMOVED***

    if (!o.out) o.out = ***REMOVED***inline: 1***REMOVED***;
    if (o.verbose !== false) o.verbose = true;

    o.map = String(o.map);
    o.reduce = String(o.reduce);

    if (o.query) ***REMOVED***
      var q = new _this.Query(o.query);
      q.cast(_this);
      o.query = q._conditions;
      q = undefined;
    ***REMOVED***

    _this.collection.mapReduce(null, null, o, function(err, ret, stats) ***REMOVED***
      if (err) ***REMOVED***
        callback && callback(err);
        reject(err);
        return;
      ***REMOVED***

      if (ret.findOne && ret.mapReduce) ***REMOVED***
        // returned a collection, convert to Model
        var model = Model.compile(
            '_mapreduce_' + ret.collectionName
            , Model.mapReduce.schema
            , ret.collectionName
            , _this.db
            , _this.base);

        model._mapreduce = true;

        callback && callback(null, model, stats);
        return resolve(model, stats);
      ***REMOVED***

      callback && callback(null, ret, stats);
      resolve(ret, stats);
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***;

/**
 * geoNear support for Mongoose
 *
 * ####Options:
 * - `lean` ***REMOVED***Boolean***REMOVED*** return the raw object
 * - All options supported by the driver are also supported
 *
 * ####Example:
 *
 *     // Legacy point
 *     Model.geoNear([1,3], ***REMOVED*** maxDistance : 5, spherical : true ***REMOVED***, function(err, results, stats) ***REMOVED***
 *        console.log(results);
 *     ***REMOVED***);
 *
 *     // geoJson
 *     var point = ***REMOVED*** type : "Point", coordinates : [9,9] ***REMOVED***;
 *     Model.geoNear(point, ***REMOVED*** maxDistance : 5, spherical : true ***REMOVED***, function(err, results, stats) ***REMOVED***
 *        console.log(results);
 *     ***REMOVED***);
 *
 * @param ***REMOVED***Object|Array***REMOVED*** GeoJSON point or legacy coordinate pair [x,y] to search near
 * @param ***REMOVED***Object***REMOVED*** options for the query
 * @param ***REMOVED***Function***REMOVED*** [callback] optional callback for the query
 * @return ***REMOVED***Promise***REMOVED***
 * @see http://docs.mongodb.org/manual/core/2dsphere/
 * @see http://mongodb.github.io/node-mongodb-native/api-generated/collection.html?highlight=geonear#geoNear
 * @api public
 */

Model.geoNear = function(near, options, callback) ***REMOVED***
  if (typeof options === 'function') ***REMOVED***
    callback = options;
    options = ***REMOVED******REMOVED***;
  ***REMOVED***

  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  var _this = this;
  var Promise = PromiseProvider.get();
  if (!near) ***REMOVED***
    return new Promise.ES6(function(resolve, reject) ***REMOVED***
      var error = new Error('Must pass a near option to geoNear');
      reject(error);
      callback && callback(error);
    ***REMOVED***);
  ***REMOVED***

  var x, y;

  return new Promise.ES6(function(resolve, reject) ***REMOVED***
    var handler = function(err, res) ***REMOVED***
      if (err) ***REMOVED***
        reject(err);
        callback && callback(err);
        return;
      ***REMOVED***
      if (options.lean) ***REMOVED***
        resolve(res.results, res.stats);
        callback && callback(null, res.results, res.stats);
        return;
      ***REMOVED***

      var count = res.results.length;
      // if there are no results, fulfill the promise now
      if (count === 0) ***REMOVED***
        resolve(res.results, res.stats);
        callback && callback(null, res.results, res.stats);
        return;
      ***REMOVED***

      var errSeen = false;

      function init(err) ***REMOVED***
        if (err && !errSeen) ***REMOVED***
          errSeen = true;
          reject(err);
          callback && callback(err);
          return;
        ***REMOVED***
        if (--count <= 0) ***REMOVED***
          resolve(res.results, res.stats);
          callback && callback(null, res.results, res.stats);
        ***REMOVED***
      ***REMOVED***

      for (var i = 0; i < res.results.length; i++) ***REMOVED***
        var temp = res.results[i].obj;
        res.results[i].obj = new _this();
        res.results[i].obj.init(temp, init);
      ***REMOVED***
    ***REMOVED***;

    if (Array.isArray(near)) ***REMOVED***
      if (near.length !== 2) ***REMOVED***
        var error = new Error('If using legacy coordinates, must be an array ' +
            'of size 2 for geoNear');
        reject(error);
        callback && callback(error);
        return;
      ***REMOVED***
      x = near[0];
      y = near[1];
      _this.collection.geoNear(x, y, options, handler);
    ***REMOVED*** else ***REMOVED***
      if (near.type !== 'Point' || !Array.isArray(near.coordinates)) ***REMOVED***
        error = new Error('Must pass either a legacy coordinate array or ' +
            'GeoJSON Point to geoNear');
        reject(error);
        callback && callback(error);
        return;
      ***REMOVED***

      _this.collection.geoNear(near, options, handler);
    ***REMOVED***
  ***REMOVED***);
***REMOVED***;

/**
 * Performs [aggregations](http://docs.mongodb.org/manual/applications/aggregation/) on the models collection.
 *
 * If a `callback` is passed, the `aggregate` is executed and a `Promise` is returned. If a callback is not passed, the `aggregate` itself is returned.
 *
 * ####Example:
 *
 *     // Find the max balance of all accounts
 *     Users.aggregate(
 *       ***REMOVED*** $group: ***REMOVED*** _id: null, maxBalance: ***REMOVED*** $max: '$balance' ***REMOVED******REMOVED******REMOVED***,
 *       ***REMOVED*** $project: ***REMOVED*** _id: 0, maxBalance: 1 ***REMOVED******REMOVED***,
 *       function (err, res) ***REMOVED***
 *         if (err) return handleError(err);
 *         console.log(res); // [ ***REMOVED*** maxBalance: 98000 ***REMOVED*** ]
 *       ***REMOVED***);
 *
 *     // Or use the aggregation pipeline builder.
 *     Users.aggregate()
 *       .group(***REMOVED*** _id: null, maxBalance: ***REMOVED*** $max: '$balance' ***REMOVED*** ***REMOVED***)
 *       .select('-id maxBalance')
 *       .exec(function (err, res) ***REMOVED***
 *         if (err) return handleError(err);
 *         console.log(res); // [ ***REMOVED*** maxBalance: 98 ***REMOVED*** ]
 *     ***REMOVED***);
 *
 * ####NOTE:
 *
 * - Arguments are not cast to the model's schema because `$project` operators allow redefining the "shape" of the documents at any stage of the pipeline, which may leave documents in an incompatible format.
 * - The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).
 * - Requires MongoDB >= 2.1
 *
 * @see Aggregate #aggregate_Aggregate
 * @see MongoDB http://docs.mongodb.org/manual/applications/aggregation/
 * @param ***REMOVED***Object|Array***REMOVED*** [...] aggregation pipeline operator(s) or operator array
 * @param ***REMOVED***Function***REMOVED*** [callback]
 * @return ***REMOVED***Aggregate|Promise***REMOVED***
 * @api public
 */

Model.aggregate = function aggregate() ***REMOVED***
  var args = [].slice.call(arguments),
      aggregate,
      callback;

  if (typeof args[args.length - 1] === 'function') ***REMOVED***
    callback = args.pop();
  ***REMOVED***

  if (args.length === 1 && util.isArray(args[0])) ***REMOVED***
    aggregate = new Aggregate(args[0]);
  ***REMOVED*** else ***REMOVED***
    aggregate = new Aggregate(args);
  ***REMOVED***

  aggregate.model(this);

  if (typeof callback === 'undefined') ***REMOVED***
    return aggregate;
  ***REMOVED***

  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  aggregate.exec(callback);
***REMOVED***;

/**
 * Implements `$geoSearch` functionality for Mongoose
 *
 * ####Example:
 *
 *     var options = ***REMOVED*** near: [10, 10], maxDistance: 5 ***REMOVED***;
 *     Locations.geoSearch(***REMOVED*** type : "house" ***REMOVED***, options, function(err, res) ***REMOVED***
 *       console.log(res);
 *     ***REMOVED***);
 *
 * ####Options:
 * - `near` ***REMOVED***Array***REMOVED*** x,y point to search for
 * - `maxDistance` ***REMOVED***Number***REMOVED*** the maximum distance from the point near that a result can be
 * - `limit` ***REMOVED***Number***REMOVED*** The maximum number of results to return
 * - `lean` ***REMOVED***Boolean***REMOVED*** return the raw object instead of the Mongoose Model
 *
 * @param ***REMOVED***Object***REMOVED*** conditions an object that specifies the match condition (required)
 * @param ***REMOVED***Object***REMOVED*** options for the geoSearch, some (near, maxDistance) are required
 * @param ***REMOVED***Function***REMOVED*** [callback] optional callback
 * @return ***REMOVED***Promise***REMOVED***
 * @see http://docs.mongodb.org/manual/reference/command/geoSearch/
 * @see http://docs.mongodb.org/manual/core/geohaystack/
 * @api public
 */

Model.geoSearch = function(conditions, options, callback) ***REMOVED***
  if (typeof options === 'function') ***REMOVED***
    callback = options;
    options = ***REMOVED******REMOVED***;
  ***REMOVED***
  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  var _this = this;
  var Promise = PromiseProvider.get();
  return new Promise.ES6(function(resolve, reject) ***REMOVED***
    var error;
    if (conditions === undefined || !utils.isObject(conditions)) ***REMOVED***
      error = new Error('Must pass conditions to geoSearch');
    ***REMOVED*** else if (!options.near) ***REMOVED***
      error = new Error('Must specify the near option in geoSearch');
    ***REMOVED*** else if (!Array.isArray(options.near)) ***REMOVED***
      error = new Error('near option must be an array [x, y]');
    ***REMOVED***

    if (error) ***REMOVED***
      callback && callback(error);
      reject(error);
      return;
    ***REMOVED***

    // send the conditions in the options object
    options.search = conditions;

    _this.collection.geoHaystackSearch(options.near[0], options.near[1], options, function(err, res) ***REMOVED***
      // have to deal with driver problem. Should be fixed in a soon-ish release
      // (7/8/2013)
      if (err) ***REMOVED***
        callback && callback(err);
        reject(err);
        return;
      ***REMOVED***

      var count = res.results.length;
      if (options.lean || count === 0) ***REMOVED***
        callback && callback(null, res.results, res.stats);
        resolve(res.results, res.stats);
        return;
      ***REMOVED***

      var errSeen = false;

      function init(err) ***REMOVED***
        if (err && !errSeen) ***REMOVED***
          callback && callback(err);
          reject(err);
          return;
        ***REMOVED***

        if (!--count && !errSeen) ***REMOVED***
          callback && callback(null, res.results, res.stats);
          resolve(res.results, res.stats);
        ***REMOVED***
      ***REMOVED***

      for (var i = 0; i < res.results.length; i++) ***REMOVED***
        var temp = res.results[i];
        res.results[i] = new _this();
        res.results[i].init(temp, ***REMOVED******REMOVED***, init);
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***;

/**
 * Populates document references.
 *
 * ####Available options:
 *
 * - path: space delimited path(s) to populate
 * - select: optional fields to select
 * - match: optional query conditions to match
 * - model: optional name of the model to use for population
 * - options: optional query options like sort, limit, etc
 *
 * ####Examples:
 *
 *     // populates a single object
 *     User.findById(id, function (err, user) ***REMOVED***
 *       var opts = [
 *           ***REMOVED*** path: 'company', match: ***REMOVED*** x: 1 ***REMOVED***, select: 'name' ***REMOVED***
 *         , ***REMOVED*** path: 'notes', options: ***REMOVED*** limit: 10 ***REMOVED***, model: 'override' ***REMOVED***
 *       ]
 *
 *       User.populate(user, opts, function (err, user) ***REMOVED***
 *         console.log(user);
 *       ***REMOVED***);
 *     ***REMOVED***);
 *
 *     // populates an array of objects
 *     User.find(match, function (err, users) ***REMOVED***
 *       var opts = [***REMOVED*** path: 'company', match: ***REMOVED*** x: 1 ***REMOVED***, select: 'name' ***REMOVED***]
 *
 *       var promise = User.populate(users, opts);
 *       promise.then(console.log).end();
 *     ***REMOVED***)
 *
 *     // imagine a Weapon model exists with two saved documents:
 *     //   ***REMOVED*** _id: 389, name: 'whip' ***REMOVED***
 *     //   ***REMOVED*** _id: 8921, name: 'boomerang' ***REMOVED***
 *     // and this schema:
 *     // new Schema(***REMOVED***
 *     //   name: String,
 *     //   weapon: ***REMOVED*** type: ObjectId, ref: 'Weapon' ***REMOVED***
 *     // ***REMOVED***);
 *
 *     var user = ***REMOVED*** name: 'Indiana Jones', weapon: 389 ***REMOVED***
 *     Weapon.populate(user, ***REMOVED*** path: 'weapon', model: 'Weapon' ***REMOVED***, function (err, user) ***REMOVED***
 *       console.log(user.weapon.name) // whip
 *     ***REMOVED***)
 *
 *     // populate many plain objects
 *     var users = [***REMOVED*** name: 'Indiana Jones', weapon: 389 ***REMOVED***]
 *     users.push(***REMOVED*** name: 'Batman', weapon: 8921 ***REMOVED***)
 *     Weapon.populate(users, ***REMOVED*** path: 'weapon' ***REMOVED***, function (err, users) ***REMOVED***
 *       users.forEach(function (user) ***REMOVED***
 *         console.log('%s uses a %s', users.name, user.weapon.name)
 *         // Indiana Jones uses a whip
 *         // Batman uses a boomerang
 *       ***REMOVED***);
 *     ***REMOVED***);
 *     // Note that we didn't need to specify the Weapon model because
 *     // it is in the schema's ref
 *
 * @param ***REMOVED***Document|Array***REMOVED*** docs Either a single document or array of documents to populate.
 * @param ***REMOVED***Object***REMOVED*** options A hash of key/val (path, options) used for population.
 * @param ***REMOVED***Function***REMOVED*** [callback(err,doc)] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.
 * @return ***REMOVED***Promise***REMOVED***
 * @api public
 */

Model.populate = function(docs, paths, callback) ***REMOVED***
  var _this = this;
  if (callback) ***REMOVED***
    callback = this.$wrapCallback(callback);
  ***REMOVED***

  // normalized paths
  var noPromise = paths && !!paths.__noPromise;
  paths = utils.populate(paths);

  // data that should persist across subPopulate calls
  var cache = ***REMOVED******REMOVED***;

  if (noPromise) ***REMOVED***
    _populate(this, docs, paths, cache, callback);
  ***REMOVED*** else ***REMOVED***
    var Promise = PromiseProvider.get();
    return new Promise.ES6(function(resolve, reject) ***REMOVED***
      _populate(_this, docs, paths, cache, function(error, docs) ***REMOVED***
        if (error) ***REMOVED***
          callback && callback(error);
          reject(error);
        ***REMOVED*** else ***REMOVED***
          callback && callback(null, docs);
          resolve(docs);
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***
***REMOVED***;

/*!
 * Populate helper
 *
 * @param ***REMOVED***Model***REMOVED*** model the model to use
 * @param ***REMOVED***Document|Array***REMOVED*** docs Either a single document or array of documents to populate.
 * @param ***REMOVED***Object***REMOVED*** paths
 * @param ***REMOVED***Function***REMOVED*** [cb(err,doc)] Optional callback, executed upon completion. Receives `err` and the `doc(s)`.
 * @return ***REMOVED***Function***REMOVED***
 * @api private
 */

function _populate(model, docs, paths, cache, callback) ***REMOVED***
  var pending = paths.length;

  if (pending === 0) ***REMOVED***
    return callback(null, docs);
  ***REMOVED***

  // each path has its own query options and must be executed separately
  var i = pending;
  var path;
  while (i--) ***REMOVED***
    path = paths[i];
    populate(model, docs, path, next);
  ***REMOVED***

  function next(err) ***REMOVED***
    if (err) ***REMOVED***
      return callback(err);
    ***REMOVED***
    if (--pending) ***REMOVED***
      return;
    ***REMOVED***
    callback(null, docs);
  ***REMOVED***
***REMOVED***

/*!
 * Populates `docs`
 */
var excludeIdReg = /\s?-_id\s?/,
    excludeIdRegGlobal = /\s?-_id\s?/g;

function populate(model, docs, options, callback) ***REMOVED***
  var modelsMap;

  // normalize single / multiple docs passed
  if (!Array.isArray(docs)) ***REMOVED***
    docs = [docs];
  ***REMOVED***

  if (docs.length === 0 || docs.every(utils.isNullOrUndefined)) ***REMOVED***
    return callback();
  ***REMOVED***

  modelsMap = getModelsMapForPopulate(model, docs, options);

  var i, len = modelsMap.length,
      mod, match, select, vals = [];

  function flatten(item) ***REMOVED***
    // no need to include undefined values in our query
    return undefined !== item;
  ***REMOVED***

  var _remaining = len;
  var hasOne = false;
  for (i = 0; i < len; i++) ***REMOVED***
    mod = modelsMap[i];
    select = mod.options.select;

    if (mod.options.match) ***REMOVED***
      match = utils.object.shallowCopy(mod.options.match);
    ***REMOVED*** else ***REMOVED***
      match = ***REMOVED******REMOVED***;
    ***REMOVED***

    var ids = utils.array.flatten(mod.ids, flatten);
    ids = utils.array.unique(ids);

    if (ids.length === 0 || ids.every(utils.isNullOrUndefined)) ***REMOVED***
      --_remaining;
      continue;
    ***REMOVED***

    hasOne = true;
    if (mod.foreignField !== '_id' || !match['_id']) ***REMOVED***
      match[mod.foreignField] = ***REMOVED*** $in: ids ***REMOVED***;
    ***REMOVED***

    var assignmentOpts = ***REMOVED******REMOVED***;
    assignmentOpts.sort = mod.options.options && mod.options.options.sort || undefined;
    assignmentOpts.excludeId = excludeIdReg.test(select) || (select && select._id === 0);

    if (assignmentOpts.excludeId) ***REMOVED***
      // override the exclusion from the query so we can use the _id
      // for document matching during assignment. we'll delete the
      // _id back off before returning the result.
      if (typeof select === 'string') ***REMOVED***
        select = select.replace(excludeIdRegGlobal, ' ');
      ***REMOVED*** else ***REMOVED***
        // preserve original select conditions by copying
        select = utils.object.shallowCopy(select);
        delete select._id;
      ***REMOVED***
    ***REMOVED***

    if (mod.options.options && mod.options.options.limit) ***REMOVED***
      assignmentOpts.originalLimit = mod.options.options.limit;
      mod.options.options.limit = mod.options.options.limit * ids.length;
    ***REMOVED***

    var subPopulate = mod.options.populate;
    var query = mod.Model.find(match, select, mod.options.options);
    if (subPopulate) ***REMOVED***
      query.populate(subPopulate);
    ***REMOVED***

    query.exec(next.bind(this, mod, assignmentOpts));
  ***REMOVED***

  if (!hasOne) ***REMOVED***
    return callback();
  ***REMOVED***

  function next(options, assignmentOpts, err, valsFromDb) ***REMOVED***
    if (err) return callback(err);
    vals = vals.concat(valsFromDb);
    _assign(null, vals, options, assignmentOpts);
    if (--_remaining === 0) ***REMOVED***
      callback();
    ***REMOVED***
  ***REMOVED***

  function _assign(err, vals, mod, assignmentOpts) ***REMOVED***
    if (err) return callback(err);

    var options = mod.options;
    var _val;
    var lean = options.options && options.options.lean,
        len = vals.length,
        rawOrder = ***REMOVED******REMOVED***, rawDocs = ***REMOVED******REMOVED***, key, val;

    // optimization:
    // record the document positions as returned by
    // the query result.
    for (var i = 0; i < len; i++) ***REMOVED***
      val = vals[i];
      if (val) ***REMOVED***
        _val = utils.getValue(mod.foreignField, val);
        if (Array.isArray(_val)) ***REMOVED***
          var _valLength = _val.length;
          for (var j = 0; j < _valLength; ++j) ***REMOVED***
            if (_val[j] instanceof Document) ***REMOVED***
              _val[j] = _val[j]._id;
            ***REMOVED***
            key = String(_val[j]);
            if (rawDocs[key]) ***REMOVED***
              if (Array.isArray(rawDocs[key])) ***REMOVED***
                rawDocs[key].push(val);
                rawOrder[key].push(i);
              ***REMOVED*** else ***REMOVED***
                rawDocs[key] = [rawDocs[key], val];
                rawOrder[key] = [rawOrder[key], i];
              ***REMOVED***
            ***REMOVED*** else ***REMOVED***
              rawDocs[key] = val;
              rawOrder[key] = i;
            ***REMOVED***
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          if (_val instanceof Document) ***REMOVED***
            _val = _val._id;
          ***REMOVED***
          key = String(_val);
          if (rawDocs[key]) ***REMOVED***
            if (Array.isArray(rawDocs[key])) ***REMOVED***
              rawDocs[key].push(val);
              rawOrder[key].push(i);
            ***REMOVED*** else ***REMOVED***
              rawDocs[key] = [rawDocs[key], val];
              rawOrder[key] = [rawOrder[key], i];
            ***REMOVED***
          ***REMOVED*** else ***REMOVED***
            rawDocs[key] = val;
            rawOrder[key] = i;
          ***REMOVED***
        ***REMOVED***
        // flag each as result of population
        if (!lean) ***REMOVED***
          val.$__.wasPopulated = true;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    assignVals(***REMOVED***
      originalModel: model,
      rawIds: mod.ids,
      localField: mod.localField,
      foreignField: mod.foreignField,
      rawDocs: rawDocs,
      rawOrder: rawOrder,
      docs: mod.docs,
      path: options.path,
      options: assignmentOpts,
      justOne: mod.justOne,
      isVirtual: mod.isVirtual
    ***REMOVED***);
  ***REMOVED***
***REMOVED***

/*!
 * Assigns documents returned from a population query back
 * to the original document path.
 */

function assignVals(o) ***REMOVED***
  // replace the original ids in our intermediate _ids structure
  // with the documents found by query
  assignRawDocsToIdStructure(o.rawIds, o.rawDocs, o.rawOrder, o.options,
    o.localField, o.foreignField);

  // now update the original documents being populated using the
  // result structure that contains real documents.

  var docs = o.docs;
  var rawIds = o.rawIds;
  var options = o.options;

  function setValue(val) ***REMOVED***
    return valueFilter(val, options);
  ***REMOVED***

  for (var i = 0; i < docs.length; ++i) ***REMOVED***
    if (utils.getValue(o.path, docs[i]) == null &&
      !o.originalModel.schema._getVirtual(o.path)) ***REMOVED***
      continue;
    ***REMOVED***

    if (o.isVirtual && !o.justOne && !Array.isArray(rawIds[i])) ***REMOVED***
      rawIds[i] = [rawIds[i]];
    ***REMOVED***
    utils.setValue(o.path, rawIds[i], docs[i], setValue);
  ***REMOVED***
***REMOVED***

/*!
 * Assign `vals` returned by mongo query to the `rawIds`
 * structure returned from utils.getVals() honoring
 * query sort order if specified by user.
 *
 * This can be optimized.
 *
 * Rules:
 *
 *   if the value of the path is not an array, use findOne rules, else find.
 *   for findOne the results are assigned directly to doc path (including null results).
 *   for find, if user specified sort order, results are assigned directly
 *   else documents are put back in original order of array if found in results
 *
 * @param ***REMOVED***Array***REMOVED*** rawIds
 * @param ***REMOVED***Array***REMOVED*** vals
 * @param ***REMOVED***Boolean***REMOVED*** sort
 * @api private
 */

function assignRawDocsToIdStructure(rawIds, resultDocs, resultOrder, options, localFields, foreignFields, recursed) ***REMOVED***
  // honor user specified sort order
  var newOrder = [];
  var sorting = options.sort && rawIds.length > 1;
  var doc;
  var sid;
  var id;

  for (var i = 0; i < rawIds.length; ++i) ***REMOVED***
    id = rawIds[i];

    if (Array.isArray(id)) ***REMOVED***
      // handle [ [id0, id2], [id3] ]
      assignRawDocsToIdStructure(id, resultDocs, resultOrder, options, localFields, foreignFields, true);
      newOrder.push(id);
      continue;
    ***REMOVED***

    if (id === null && !sorting) ***REMOVED***
      // keep nulls for findOne unless sorting, which always
      // removes them (backward compat)
      newOrder.push(id);
      continue;
    ***REMOVED***

    sid = String(id);

    if (recursed) ***REMOVED***
      // apply find behavior

      // assign matching documents in original order unless sorting
      doc = resultDocs[sid];
      if (doc) ***REMOVED***
        if (sorting) ***REMOVED***
          newOrder[resultOrder[sid]] = doc;
        ***REMOVED*** else ***REMOVED***
          newOrder.push(doc);
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        newOrder.push(id);
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      // apply findOne behavior - if document in results, assign, else assign null
      newOrder[i] = doc = resultDocs[sid] || null;
    ***REMOVED***
  ***REMOVED***

  rawIds.length = 0;
  if (newOrder.length) ***REMOVED***
    // reassign the documents based on corrected order

    // forEach skips over sparse entries in arrays so we
    // can safely use this to our advantage dealing with sorted
    // result sets too.
    newOrder.forEach(function(doc, i) ***REMOVED***
      if (!doc) ***REMOVED***
        return;
      ***REMOVED***
      rawIds[i] = doc;
    ***REMOVED***);
  ***REMOVED***
***REMOVED***

function getModelsMapForPopulate(model, docs, options) ***REMOVED***
  var i, doc, len = docs.length,
      available = ***REMOVED******REMOVED***,
      map = [],
      modelNameFromQuery = options.model && options.model.modelName || options.model,
      schema, refPath, Model, currentOptions, modelNames, modelName, discriminatorKey, modelForFindSchema;

  var originalOptions = utils.clone(options);
  var isVirtual = false;

  schema = model._getSchema(options.path);

  if (schema && schema.caster) ***REMOVED***
    schema = schema.caster;
  ***REMOVED***

  if (!schema && model.discriminators) ***REMOVED***
    discriminatorKey = model.schema.discriminatorMapping.key;
  ***REMOVED***

  refPath = schema && schema.options && schema.options.refPath;

  for (i = 0; i < len; i++) ***REMOVED***
    doc = docs[i];

    if (refPath) ***REMOVED***
      modelNames = utils.getValue(refPath, doc);
      if (Array.isArray(modelNames)) ***REMOVED***
        modelNames = modelNames.filter(function(v) ***REMOVED***
          return v != null;
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      if (!modelNameFromQuery) ***REMOVED***
        var modelForCurrentDoc = model;
        var schemaForCurrentDoc;

        if (!schema && discriminatorKey) ***REMOVED***
          modelForFindSchema = utils.getValue(discriminatorKey, doc);

          if (modelForFindSchema) ***REMOVED***
            modelForCurrentDoc = model.db.model(modelForFindSchema);
            schemaForCurrentDoc = modelForCurrentDoc._getSchema(options.path);

            if (schemaForCurrentDoc && schemaForCurrentDoc.caster) ***REMOVED***
              schemaForCurrentDoc = schemaForCurrentDoc.caster;
            ***REMOVED***
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          schemaForCurrentDoc = schema;
        ***REMOVED***
        var virtual = modelForCurrentDoc.schema._getVirtual(options.path);

        if (schemaForCurrentDoc && schemaForCurrentDoc.options && schemaForCurrentDoc.options.ref) ***REMOVED***
          modelNames = [schemaForCurrentDoc.options.ref];
        ***REMOVED*** else if (virtual && virtual.options && virtual.options.ref) ***REMOVED***
          modelNames = [virtual && virtual.options && virtual.options.ref];
          isVirtual = true;
        ***REMOVED*** else ***REMOVED***
          // We may have a discriminator, in which case we don't want to
          // populate using the base model by default
          modelNames = discriminatorKey ? null : [model.modelName];
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        modelNames = [modelNameFromQuery];  // query options
      ***REMOVED***
    ***REMOVED***

    if (!modelNames) ***REMOVED***
      continue;
    ***REMOVED***

    if (!Array.isArray(modelNames)) ***REMOVED***
      modelNames = [modelNames];
    ***REMOVED***

    virtual = model.schema._getVirtual(options.path);
    var localField = virtual && virtual.options ?
      (virtual.$nestedSchemaPath ? virtual.$nestedSchemaPath + '.' : '') + virtual.options.localField :
      options.path;
    var foreignField = virtual && virtual.options ?
      virtual.options.foreignField :
      '_id';
    var justOne = virtual && virtual.options && virtual.options.justOne;
    if (virtual && virtual.options && virtual.options.ref) ***REMOVED***
      isVirtual = true;
    ***REMOVED***

    if (virtual && (!localField || !foreignField)) ***REMOVED***
      throw new Error('If you are populating a virtual, you must set the ' +
        'localField and foreignField options');
    ***REMOVED***

    options.isVirtual = isVirtual;
    var ret = convertTo_id(utils.getValue(localField, doc));
    var id = String(utils.getValue(foreignField, doc));
    options._docs[id] = Array.isArray(ret) ? ret.slice() : ret;
    if (doc.$__) ***REMOVED***
      doc.populated(options.path, options._docs[id], options);
    ***REMOVED***

    var k = modelNames.length;
    while (k--) ***REMOVED***
      modelName = modelNames[k];
      Model = originalOptions.model && originalOptions.model.modelName ?
        originalOptions.model :
        model.db.model(modelName);

      if (!available[modelName]) ***REMOVED***
        currentOptions = ***REMOVED***
          model: Model
        ***REMOVED***;

        if (isVirtual && virtual.options && virtual.options.options) ***REMOVED***
          currentOptions.options = utils.clone(virtual.options.options, ***REMOVED***
            retainKeyOrder: true
          ***REMOVED***);
        ***REMOVED***
        utils.merge(currentOptions, options);
        if (schema && !discriminatorKey) ***REMOVED***
          currentOptions.model = Model;
        ***REMOVED***
        options.model = Model;

        available[modelName] = ***REMOVED***
          Model: Model,
          options: currentOptions,
          docs: [doc],
          ids: [ret],
          // Assume only 1 localField + foreignField
          localField: localField,
          foreignField: foreignField,
          justOne: justOne,
          isVirtual: isVirtual
        ***REMOVED***;
        map.push(available[modelName]);
      ***REMOVED*** else ***REMOVED***
        available[modelName].docs.push(doc);
        available[modelName].ids.push(ret);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  return map;
***REMOVED***

/*!
 * Retrieve the _id of `val` if a Document or Array of Documents.
 *
 * @param ***REMOVED***Array|Document|Any***REMOVED*** val
 * @return ***REMOVED***Array|Document|Any***REMOVED***
 */

function convertTo_id(val) ***REMOVED***
  if (val instanceof Model) return val._id;

  if (Array.isArray(val)) ***REMOVED***
    for (var i = 0; i < val.length; ++i) ***REMOVED***
      if (val[i] instanceof Model) ***REMOVED***
        val[i] = val[i]._id;
      ***REMOVED***
    ***REMOVED***
    if (val.isMongooseArray) ***REMOVED***
      return val._schema.cast(val, val._parent);
    ***REMOVED***

    return [].concat(val);
  ***REMOVED***

  return val;
***REMOVED***

/*!
 * 1) Apply backwards compatible find/findOne behavior to sub documents
 *
 *    find logic:
 *      a) filter out non-documents
 *      b) remove _id from sub docs when user specified
 *
 *    findOne
 *      a) if no doc found, set to null
 *      b) remove _id from sub docs when user specified
 *
 * 2) Remove _ids when specified by users query.
 *
 * background:
 * _ids are left in the query even when user excludes them so
 * that population mapping can occur.
 */

function valueFilter(val, assignmentOpts) ***REMOVED***
  if (Array.isArray(val)) ***REMOVED***
    // find logic
    var ret = [];
    var numValues = val.length;
    for (var i = 0; i < numValues; ++i) ***REMOVED***
      var subdoc = val[i];
      if (!isDoc(subdoc)) continue;
      maybeRemoveId(subdoc, assignmentOpts);
      ret.push(subdoc);
      if (assignmentOpts.originalLimit &&
          ret.length >= assignmentOpts.originalLimit) ***REMOVED***
        break;
      ***REMOVED***
    ***REMOVED***

    // Since we don't want to have to create a new mongoosearray, make sure to
    // modify the array in place
    while (val.length > ret.length) ***REMOVED***
      Array.prototype.pop.apply(val, []);
    ***REMOVED***
    for (i = 0; i < ret.length; ++i) ***REMOVED***
      val[i] = ret[i];
    ***REMOVED***
    return val;
  ***REMOVED***

  // findOne
  if (isDoc(val)) ***REMOVED***
    maybeRemoveId(val, assignmentOpts);
    return val;
  ***REMOVED***

  return null;
***REMOVED***

/*!
 * Remove _id from `subdoc` if user specified "lean" query option
 */

function maybeRemoveId(subdoc, assignmentOpts) ***REMOVED***
  if (assignmentOpts.excludeId) ***REMOVED***
    if (typeof subdoc.setValue === 'function') ***REMOVED***
      delete subdoc._doc._id;
    ***REMOVED*** else ***REMOVED***
      delete subdoc._id;
    ***REMOVED***
  ***REMOVED***
***REMOVED***

/*!
 * Determine if `doc` is a document returned
 * by a populate query.
 */

function isDoc(doc) ***REMOVED***
  if (doc == null) ***REMOVED***
    return false;
  ***REMOVED***

  var type = typeof doc;
  if (type === 'string') ***REMOVED***
    return false;
  ***REMOVED***

  if (type === 'number') ***REMOVED***
    return false;
  ***REMOVED***

  if (Buffer.isBuffer(doc)) ***REMOVED***
    return false;
  ***REMOVED***

  if (doc.constructor.name === 'ObjectID') ***REMOVED***
    return false;
  ***REMOVED***

  // only docs
  return true;
***REMOVED***

/**
 * Finds the schema for `path`. This is different than
 * calling `schema.path` as it also resolves paths with
 * positional selectors (something.$.another.$.path).
 *
 * @param ***REMOVED***String***REMOVED*** path
 * @return ***REMOVED***Schema***REMOVED***
 * @api private
 */

Model._getSchema = function _getSchema(path) ***REMOVED***
  return this.schema._getSchema(path);
***REMOVED***;

/*!
 * Compiler utility.
 *
 * @param ***REMOVED***String|Function***REMOVED*** name model name or class extending Model
 * @param ***REMOVED***Schema***REMOVED*** schema
 * @param ***REMOVED***String***REMOVED*** collectionName
 * @param ***REMOVED***Connection***REMOVED*** connection
 * @param ***REMOVED***Mongoose***REMOVED*** base mongoose instance
 */

Model.compile = function compile(name, schema, collectionName, connection, base) ***REMOVED***
  var versioningEnabled = schema.options.versionKey !== false;

  if (versioningEnabled && !schema.paths[schema.options.versionKey]) ***REMOVED***
    // add versioning to top level documents only
    var o = ***REMOVED******REMOVED***;
    o[schema.options.versionKey] = Number;
    schema.add(o);
  ***REMOVED***

  var model;
  if (typeof name === 'function' && name.prototype instanceof Model) ***REMOVED***
    model = name;
    name = model.name;
    schema.loadClass(model, true);
  ***REMOVED*** else ***REMOVED***
    // generate new class
    model = function model(doc, fields, skipId) ***REMOVED***
      if (!(this instanceof model)) ***REMOVED***
        return new model(doc, fields, skipId);
      ***REMOVED***
      Model.call(this, doc, fields, skipId);
    ***REMOVED***;
  ***REMOVED***

  model.hooks = schema.s.hooks.clone();
  model.base = base;
  model.modelName = name;
  if (!(model.prototype instanceof Model)) ***REMOVED***
    model.__proto__ = Model;
    model.prototype.__proto__ = Model.prototype;
  ***REMOVED***
  model.model = Model.prototype.model;
  model.db = model.prototype.db = connection;
  model.discriminators = model.prototype.discriminators = undefined;

  model.prototype.$__setSchema(schema);

  var collectionOptions = ***REMOVED***
    bufferCommands: schema.options.bufferCommands,
    capped: schema.options.capped
  ***REMOVED***;

  model.prototype.collection = connection.collection(
      collectionName
      , collectionOptions
  );

  // apply methods and statics
  applyMethods(model, schema);
  applyStatics(model, schema);

  model.schema = model.prototype.schema;
  model.collection = model.prototype.collection;

  // Create custom query constructor
  model.Query = function() ***REMOVED***
    Query.apply(this, arguments);
    this.options.retainKeyOrder = model.schema.options.retainKeyOrder;
  ***REMOVED***;
  model.Query.prototype = Object.create(Query.prototype);
  model.Query.base = Query.base;
  applyQueryMethods(model, schema.query);

  var kareemOptions = ***REMOVED*** useErrorHandlers: true ***REMOVED***;
  model.$__insertMany = model.hooks.createWrapper('insertMany',
    model.insertMany, model, kareemOptions);
  model.insertMany = function(arr, callback) ***REMOVED***
    var Promise = PromiseProvider.get();
    return new Promise.ES6(function(resolve, reject) ***REMOVED***
      model.$__insertMany(arr, function(error, result) ***REMOVED***
        if (error) ***REMOVED***
          callback && callback(error);
          return reject(error);
        ***REMOVED***
        callback && callback(null, result);
        resolve(result);
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***;

  return model;
***REMOVED***;

/*!
 * Register methods for this model
 *
 * @param ***REMOVED***Model***REMOVED*** model
 * @param ***REMOVED***Schema***REMOVED*** schema
 */
var applyMethods = function(model, schema) ***REMOVED***
  function apply(method, schema) ***REMOVED***
    Object.defineProperty(model.prototype, method, ***REMOVED***
      get: function() ***REMOVED***
        var h = ***REMOVED******REMOVED***;
        for (var k in schema.methods[method]) ***REMOVED***
          h[k] = schema.methods[method][k].bind(this);
        ***REMOVED***
        return h;
      ***REMOVED***,
      configurable: true
    ***REMOVED***);
  ***REMOVED***
  for (var method in schema.methods) ***REMOVED***
    if (schema.tree.hasOwnProperty(method)) ***REMOVED***
      throw new Error('You have a method and a property in your schema both ' +
        'named "' + method + '"');
    ***REMOVED***
    if (typeof schema.methods[method] === 'function') ***REMOVED***
      model.prototype[method] = schema.methods[method];
    ***REMOVED*** else ***REMOVED***
      apply(method, schema);
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

/*!
 * Register statics for this model
 * @param ***REMOVED***Model***REMOVED*** model
 * @param ***REMOVED***Schema***REMOVED*** schema
 */
var applyStatics = function(model, schema) ***REMOVED***
  for (var i in schema.statics) ***REMOVED***
    model[i] = schema.statics[i];
  ***REMOVED***
***REMOVED***;

/*!
 * Register custom query methods for this model
 *
 * @param ***REMOVED***Model***REMOVED*** model
 * @param ***REMOVED***Schema***REMOVED*** schema
 */

function applyQueryMethods(model, methods) ***REMOVED***
  for (var i in methods) ***REMOVED***
    model.Query.prototype[i] = methods[i];
  ***REMOVED***
***REMOVED***

/*!
 * Subclass this model with `conn`, `schema`, and `collection` settings.
 *
 * @param ***REMOVED***Connection***REMOVED*** conn
 * @param ***REMOVED***Schema***REMOVED*** [schema]
 * @param ***REMOVED***String***REMOVED*** [collection]
 * @return ***REMOVED***Model***REMOVED***
 */

Model.__subclass = function subclass(conn, schema, collection) ***REMOVED***
  // subclass model using this connection and collection name
  var _this = this;

  var Model = function Model(doc, fields, skipId) ***REMOVED***
    if (!(this instanceof Model)) ***REMOVED***
      return new Model(doc, fields, skipId);
    ***REMOVED***
    _this.call(this, doc, fields, skipId);
  ***REMOVED***;

  Model.__proto__ = _this;
  Model.prototype.__proto__ = _this.prototype;
  Model.db = Model.prototype.db = conn;

  var s = schema && typeof schema !== 'string'
      ? schema
      : _this.prototype.schema;

  var options = s.options || ***REMOVED******REMOVED***;

  if (!collection) ***REMOVED***
    collection = _this.prototype.schema.get('collection')
        || utils.toCollectionName(_this.modelName, options);
  ***REMOVED***

  var collectionOptions = ***REMOVED***
    bufferCommands: s ? options.bufferCommands : true,
    capped: s && options.capped
  ***REMOVED***;

  Model.prototype.collection = conn.collection(collection, collectionOptions);
  Model.collection = Model.prototype.collection;
  Model.init();
  return Model;
***REMOVED***;

Model.$wrapCallback = function(callback) ***REMOVED***
  var _this = this;
  return function() ***REMOVED***
    try ***REMOVED***
      callback.apply(null, arguments);
    ***REMOVED*** catch (error) ***REMOVED***
      _this.emit('error', error);
    ***REMOVED***
  ***REMOVED***;
***REMOVED***;

/*!
 * Module exports.
 */

module.exports = exports = Model;
