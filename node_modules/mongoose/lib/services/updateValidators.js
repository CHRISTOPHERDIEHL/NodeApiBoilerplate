/*!
 * Module dependencies.
 */

var Mixed = require('../schema/mixed');
var ValidationError = require('../error/validation');
var parallel = require('async/parallel');
var flatten = require('./common').flatten;
var modifiedPaths = require('./common').modifiedPaths;

/**
 * Applies validators and defaults to update and findOneAndUpdate operations,
 * specifically passing a null doc as `this` to validators and defaults
 *
 * @param ***REMOVED***Query***REMOVED*** query
 * @param ***REMOVED***Schema***REMOVED*** schema
 * @param ***REMOVED***Object***REMOVED*** castedDoc
 * @param ***REMOVED***Object***REMOVED*** options
 * @method runValidatorsOnUpdate
 * @api private
 */

module.exports = function(query, schema, castedDoc, options) ***REMOVED***
  var keys = Object.keys(castedDoc || ***REMOVED******REMOVED***);
  var updatedKeys = ***REMOVED******REMOVED***;
  var updatedValues = ***REMOVED******REMOVED***;
  var numKeys = keys.length;
  var hasDollarUpdate = false;
  var modified = ***REMOVED******REMOVED***;

  for (var i = 0; i < numKeys; ++i) ***REMOVED***
    if (keys[i].charAt(0) === '$') ***REMOVED***
      modifiedPaths(castedDoc[keys[i]], '', modified);
      var flat = flatten(castedDoc[keys[i]]);
      var paths = Object.keys(flat);
      var numPaths = paths.length;
      for (var j = 0; j < numPaths; ++j) ***REMOVED***
        var updatedPath = paths[j].replace('.$.', '.0.');
        updatedPath = updatedPath.replace(/\.\$$/, '.0');
        if (keys[i] === '$set' || keys[i] === '$setOnInsert') ***REMOVED***
          updatedValues[updatedPath] = flat[paths[j]];
        ***REMOVED*** else if (keys[i] === '$unset') ***REMOVED***
          updatedValues[updatedPath] = undefined;
        ***REMOVED***
        updatedKeys[updatedPath] = true;
      ***REMOVED***
      hasDollarUpdate = true;
    ***REMOVED***
  ***REMOVED***

  if (!hasDollarUpdate) ***REMOVED***
    modifiedPaths(castedDoc, '', modified);
    updatedValues = flatten(castedDoc);
    updatedKeys = Object.keys(updatedValues);
  ***REMOVED***

  var updates = Object.keys(updatedValues);
  var numUpdates = updates.length;
  var validatorsToExecute = [];
  var validationErrors = [];
  function iter(i) ***REMOVED***
    var schemaPath = schema._getSchema(updates[i]);
    if (schemaPath) ***REMOVED***
      // gh-4305: `_getSchema()` will report all sub-fields of a 'Mixed' path
      // as 'Mixed', so avoid double validating them.
      if (schemaPath instanceof Mixed && schemaPath.$fullPath !== updates[i]) ***REMOVED***
        return;
      ***REMOVED***
      validatorsToExecute.push(function(callback) ***REMOVED***
        schemaPath.doValidate(
            updatedValues[updates[i]],
            function(err) ***REMOVED***
              if (err) ***REMOVED***
                err.path = updates[i];
                validationErrors.push(err);
              ***REMOVED***
              callback(null);
            ***REMOVED***,
            options && options.context === 'query' ? query : null,
            ***REMOVED***updateValidator: true***REMOVED***);
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED***
  for (i = 0; i < numUpdates; ++i) ***REMOVED***
    iter(i);
  ***REMOVED***

  return function(callback) ***REMOVED***
    parallel(validatorsToExecute, function() ***REMOVED***
      if (validationErrors.length) ***REMOVED***
        var err = new ValidationError(null);
        for (var i = 0; i < validationErrors.length; ++i) ***REMOVED***
          err.errors[validationErrors[i].path] = validationErrors[i];
        ***REMOVED***
        return callback(err);
      ***REMOVED***
      callback(null);
    ***REMOVED***);
  ***REMOVED***;
***REMOVED***;
