/* eslint no-empty: 1 */

/*!
 * Module dependencies.
 */

var SchemaType = require('../schematype'),
    CastError = SchemaType.CastError,
    oid = require('../types/objectid'),
    utils = require('../utils'),
    Document;

/**
 * ObjectId SchemaType constructor.
 *
 * @param ***REMOVED***String***REMOVED*** key
 * @param ***REMOVED***Object***REMOVED*** options
 * @inherits SchemaType
 * @api public
 */

function ObjectId(key, options) ***REMOVED***
  SchemaType.call(this, key, options, 'ObjectID');
***REMOVED***

/**
 * This schema type's name, to defend against minifiers that mangle
 * function names.
 *
 * @api public
 */
ObjectId.schemaName = 'ObjectId';

/*!
 * Inherits from SchemaType.
 */
ObjectId.prototype = Object.create(SchemaType.prototype);
ObjectId.prototype.constructor = ObjectId;

/**
 * Adds an auto-generated ObjectId default if turnOn is true.
 * @param ***REMOVED***Boolean***REMOVED*** turnOn auto generated ObjectId defaults
 * @api public
 * @return ***REMOVED***SchemaType***REMOVED*** this
 */

ObjectId.prototype.auto = function(turnOn) ***REMOVED***
  if (turnOn) ***REMOVED***
    this.default(defaultId);
    this.set(resetId);
  ***REMOVED***

  return this;
***REMOVED***;

/**
 * Check if the given value satisfies a required validator.
 *
 * @param ***REMOVED***Any***REMOVED*** value
 * @param ***REMOVED***Document***REMOVED*** doc
 * @return ***REMOVED***Boolean***REMOVED***
 * @api public
 */

ObjectId.prototype.checkRequired = function checkRequired(value, doc) ***REMOVED***
  if (SchemaType._isRef(this, value, doc, true)) ***REMOVED***
    return !!value;
  ***REMOVED***
  return value instanceof oid;
***REMOVED***;

/**
 * Casts to ObjectId
 *
 * @param ***REMOVED***Object***REMOVED*** value
 * @param ***REMOVED***Object***REMOVED*** doc
 * @param ***REMOVED***Boolean***REMOVED*** init whether this is an initialization cast
 * @api private
 */

ObjectId.prototype.cast = function(value, doc, init) ***REMOVED***
  if (SchemaType._isRef(this, value, doc, init)) ***REMOVED***
    // wait! we may need to cast this to a document

    if (value === null || value === undefined) ***REMOVED***
      return value;
    ***REMOVED***

    // lazy load
    Document || (Document = require('./../document'));

    if (value instanceof Document) ***REMOVED***
      value.$__.wasPopulated = true;
      return value;
    ***REMOVED***

    // setting a populated path
    if (value instanceof oid) ***REMOVED***
      return value;
    ***REMOVED*** else if (Buffer.isBuffer(value) || !utils.isObject(value)) ***REMOVED***
      throw new CastError('ObjectId', value, this.path);
    ***REMOVED***

    // Handle the case where user directly sets a populated
    // path to a plain object; cast to the Model used in
    // the population query.
    var path = doc.$__fullPath(this.path);
    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;
    var pop = owner.populated(path, true);
    var ret = value;
    if (!doc.$__.populated ||
        !doc.$__.populated[path] ||
        !doc.$__.populated[path].options ||
        !doc.$__.populated[path].options.options ||
        !doc.$__.populated[path].options.options.lean) ***REMOVED***
      ret = new pop.options.model(value);
      ret.$__.wasPopulated = true;
    ***REMOVED***

    return ret;
  ***REMOVED***

  if (value === null || value === undefined) ***REMOVED***
    return value;
  ***REMOVED***

  if (value instanceof oid) ***REMOVED***
    return value;
  ***REMOVED***

  if (value._id) ***REMOVED***
    if (value._id instanceof oid) ***REMOVED***
      return value._id;
    ***REMOVED***
    if (value._id.toString instanceof Function) ***REMOVED***
      try ***REMOVED***
        return new oid(value._id.toString());
      ***REMOVED*** catch (e) ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  if (value.toString instanceof Function) ***REMOVED***
    try ***REMOVED***
      return new oid(value.toString());
    ***REMOVED*** catch (err) ***REMOVED***
      throw new CastError('ObjectId', value, this.path);
    ***REMOVED***
  ***REMOVED***

  throw new CastError('ObjectId', value, this.path);
***REMOVED***;

/*!
 * ignore
 */

function handleSingle(val) ***REMOVED***
  return this.cast(val);
***REMOVED***

ObjectId.prototype.$conditionalHandlers =
    utils.options(SchemaType.prototype.$conditionalHandlers, ***REMOVED***
      $gt: handleSingle,
      $gte: handleSingle,
      $lt: handleSingle,
      $lte: handleSingle
    ***REMOVED***);

/**
 * Casts contents for queries.
 *
 * @param ***REMOVED***String***REMOVED*** $conditional
 * @param ***REMOVED***any***REMOVED*** [val]
 * @api private
 */

ObjectId.prototype.castForQuery = function($conditional, val) ***REMOVED***
  var handler;
  if (arguments.length === 2) ***REMOVED***
    handler = this.$conditionalHandlers[$conditional];
    if (!handler) ***REMOVED***
      throw new Error('Can\'t use ' + $conditional + ' with ObjectId.');
    ***REMOVED***
    return handler.call(this, val);
  ***REMOVED***
  return this.cast($conditional);
***REMOVED***;

/*!
 * ignore
 */

function defaultId() ***REMOVED***
  return new oid();
***REMOVED***

function resetId(v) ***REMOVED***
  this.$__._id = null;
  return v;
***REMOVED***

/*!
 * Module exports.
 */

module.exports = ObjectId;
