/*!
 * Module dependencies.
 */

var EventEmitter = require('events').EventEmitter;
var MongooseError = require('./error');
var MixedSchema = require('./schema/mixed');
var Schema = require('./schema');
var ObjectExpectedError = require('./error/objectExpected');
var StrictModeError = require('./error/strict');
var ValidatorError = require('./schematype').ValidatorError;
var VersionError = require('./error').VersionError;
var utils = require('./utils');
var clone = utils.clone;
var isMongooseObject = utils.isMongooseObject;
var inspect = require('util').inspect;
var ValidationError = MongooseError.ValidationError;
var InternalCache = require('./internal');
var deepEqual = utils.deepEqual;
var hooks = require('hooks-fixed');
var PromiseProvider = require('./promise_provider');
var DocumentArray;
var MongooseArray;
var Embedded;
var flatten = require('./services/common').flatten;
var mpath = require('mpath');

/**
 * Document constructor.
 *
 * @param ***REMOVED***Object***REMOVED*** obj the values to set
 * @param ***REMOVED***Object***REMOVED*** [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data
 * @param ***REMOVED***Boolean***REMOVED*** [skipId] bool, should we auto create an ObjectId _id
 * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter
 * @event `init`: Emitted on a document after it has was retreived from the db and fully hydrated by Mongoose.
 * @event `save`: Emitted when the document is successfully saved
 * @api private
 */

function Document(obj, fields, skipId) ***REMOVED***
  this.$__ = new InternalCache;
  this.$__.emitter = new EventEmitter();
  this.isNew = true;
  this.errors = undefined;

  var schema = this.schema;

  if (typeof fields === 'boolean') ***REMOVED***
    this.$__.strictMode = fields;
    fields = undefined;
  ***REMOVED*** else ***REMOVED***
    this.$__.strictMode = schema.options && schema.options.strict;
    this.$__.selected = fields;
  ***REMOVED***

  var required = schema.requiredPaths(true);
  for (var i = 0; i < required.length; ++i) ***REMOVED***
    this.$__.activePaths.require(required[i]);
  ***REMOVED***

  this.$__.emitter.setMaxListeners(0);
  this._doc = this.$__buildDoc(obj, fields, skipId);

  if (obj) ***REMOVED***
    if (obj instanceof Document) ***REMOVED***
      this.isNew = obj.isNew;
    ***REMOVED***
    this.set(obj, undefined, true);
  ***REMOVED***

  if (!schema.options.strict && obj) ***REMOVED***
    var _this = this,
        keys = Object.keys(this._doc);

    keys.forEach(function(key) ***REMOVED***
      if (!(key in schema.tree)) ***REMOVED***
        defineKey(key, null, _this);
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***

  this.$__registerHooksFromSchema();
***REMOVED***

/*!
 * Document exposes the NodeJS event emitter API, so you can use
 * `on`, `once`, etc.
 */
utils.each(
    ['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners',
      'removeAllListeners', 'addListener'],
    function(emitterFn) ***REMOVED***
      Document.prototype[emitterFn] = function() ***REMOVED***
        return this.$__.emitter[emitterFn].apply(this.$__.emitter, arguments);
      ***REMOVED***;
    ***REMOVED***);

Document.prototype.constructor = Document;

/**
 * The documents schema.
 *
 * @api public
 * @property schema
 */

Document.prototype.schema;

/**
 * Boolean flag specifying if the document is new.
 *
 * @api public
 * @property isNew
 */

Document.prototype.isNew;

/**
 * The string version of this documents _id.
 *
 * ####Note:
 *
 * This getter exists on all documents by default. The getter can be disabled by setting the `id` [option](/docs/guide.html#id) of its `Schema` to false at construction time.
 *
 *     new Schema(***REMOVED*** name: String ***REMOVED***, ***REMOVED*** id: false ***REMOVED***);
 *
 * @api public
 * @see Schema options /docs/guide.html#options
 * @property id
 */

Document.prototype.id;

/**
 * Hash containing current validation errors.
 *
 * @api public
 * @property errors
 */

Document.prototype.errors;

/**
 * Builds the default doc structure
 *
 * @param ***REMOVED***Object***REMOVED*** obj
 * @param ***REMOVED***Object***REMOVED*** [fields]
 * @param ***REMOVED***Boolean***REMOVED*** [skipId]
 * @return ***REMOVED***Object***REMOVED***
 * @api private
 * @method $__buildDoc
 * @memberOf Document
 */

Document.prototype.$__buildDoc = function(obj, fields, skipId) ***REMOVED***
  var doc = ***REMOVED******REMOVED***;
  var exclude = null;
  var keys;
  var ki;
  var _this = this;

  // determine if this doc is a result of a query with
  // excluded fields

  if (fields && utils.getFunctionName(fields.constructor) === 'Object') ***REMOVED***
    keys = Object.keys(fields);
    ki = keys.length;

    if (ki === 1 && keys[0] === '_id') ***REMOVED***
      exclude = !!fields[keys[ki]];
    ***REMOVED*** else ***REMOVED***
      while (ki--) ***REMOVED***
        if (keys[ki] !== '_id' &&
            (!fields[keys[ki]] || typeof fields[keys[ki]] !== 'object')) ***REMOVED***
          exclude = !fields[keys[ki]];
          break;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  var paths = Object.keys(this.schema.paths);
  var plen = paths.length;
  var ii = 0;

  var hasIncludedChildren = ***REMOVED******REMOVED***;
  if (exclude === false && fields) ***REMOVED***
    keys = Object.keys(fields);
    for (var j = 0; j < keys.length; ++j) ***REMOVED***
      var parts = keys[j].split('.');
      var c = [];
      for (var k = 0; k < parts.length; ++k) ***REMOVED***
        c.push(parts[k]);
        hasIncludedChildren[c.join('.')] = 1;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  for (; ii < plen; ++ii) ***REMOVED***
    var p = paths[ii];

    if (p === '_id') ***REMOVED***
      if (skipId) ***REMOVED***
        continue;
      ***REMOVED***
      if (obj && '_id' in obj) ***REMOVED***
        continue;
      ***REMOVED***
    ***REMOVED***

    var type = this.schema.paths[p];
    var path = p.split('.');
    var len = path.length;
    var last = len - 1;
    var curPath = '';
    var doc_ = doc;
    var i = 0;
    var included = false;

    for (; i < len; ++i) ***REMOVED***
      var piece = path[i],
          def;

      curPath += (!curPath.length ? '' : '.') + piece;

      // support excluding intermediary levels
      if (exclude === true) ***REMOVED***
        if (curPath in fields) ***REMOVED***
          break;
        ***REMOVED***
      ***REMOVED*** else if (exclude === false && fields && !included) ***REMOVED***
        if (curPath in fields) ***REMOVED***
          included = true;
        ***REMOVED*** else if (!hasIncludedChildren[curPath]) ***REMOVED***
          break;
        ***REMOVED***
      ***REMOVED***

      if (i === last) ***REMOVED***
        if (fields && exclude !== null) ***REMOVED***
          if (exclude === true) ***REMOVED***
            // apply defaults to all non-excluded fields
            if (p in fields) ***REMOVED***
              continue;
            ***REMOVED***

            def = type.getDefault(_this, false);
            if (typeof def !== 'undefined') ***REMOVED***
              doc_[piece] = def;
              _this.$__.activePaths.default(p);
            ***REMOVED***
          ***REMOVED*** else if (included) ***REMOVED***
            // selected field
            def = type.getDefault(_this, false);
            if (typeof def !== 'undefined') ***REMOVED***
              doc_[piece] = def;
              _this.$__.activePaths.default(p);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          def = type.getDefault(_this, false);
          if (typeof def !== 'undefined') ***REMOVED***
            doc_[piece] = def;
            _this.$__.activePaths.default(p);
          ***REMOVED***
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        doc_ = doc_[piece] || (doc_[piece] = ***REMOVED******REMOVED***);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  return doc;
***REMOVED***;

/**
 * Initializes the document without setters or marking anything modified.
 *
 * Called internally after a document is returned from mongodb.
 *
 * @param ***REMOVED***Object***REMOVED*** doc document returned by mongo
 * @param ***REMOVED***Function***REMOVED*** fn callback
 * @api public
 */

Document.prototype.init = function(doc, opts, fn) ***REMOVED***
  // do not prefix this method with $__ since its
  // used by public hooks

  if (typeof opts === 'function') ***REMOVED***
    fn = opts;
    opts = null;
  ***REMOVED***

  this.isNew = false;

  // handle docs with populated paths
  // If doc._id is not null or undefined
  if (doc._id !== null && doc._id !== undefined &&
    opts && opts.populated && opts.populated.length) ***REMOVED***
    var id = String(doc._id);
    for (var i = 0; i < opts.populated.length; ++i) ***REMOVED***
      var item = opts.populated[i];
      if (item.isVirtual) ***REMOVED***
        this.populated(item.path, utils.getValue(item.path, doc), item);
      ***REMOVED*** else ***REMOVED***
        this.populated(item.path, item._docs[id], item);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  init(this, doc, this._doc);
  this.$__storeShard();

  this.emit('init', this);
  if (fn) ***REMOVED***
    fn(null);
  ***REMOVED***
  return this;
***REMOVED***;

/*!
 * Init helper.
 *
 * @param ***REMOVED***Object***REMOVED*** self document instance
 * @param ***REMOVED***Object***REMOVED*** obj raw mongodb doc
 * @param ***REMOVED***Object***REMOVED*** doc object we are initializing
 * @api private
 */

function init(self, obj, doc, prefix) ***REMOVED***
  prefix = prefix || '';

  var keys = Object.keys(obj);
  var len = keys.length;
  var schema;
  var path;
  var i;
  var index = 0;

  if (self.schema.options.retainKeyOrder) ***REMOVED***
    while (index < len) ***REMOVED***
      _init(index++);
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
    while (len--) ***REMOVED***
      _init(len);
    ***REMOVED***
  ***REMOVED***

  function _init(index) ***REMOVED***
    i = keys[index];
    path = prefix + i;
    schema = self.schema.path(path);

    if (!schema && utils.isObject(obj[i]) &&
        (!obj[i].constructor || utils.getFunctionName(obj[i].constructor) === 'Object')) ***REMOVED***
      // assume nested object
      if (!doc[i]) ***REMOVED***
        doc[i] = ***REMOVED******REMOVED***;
      ***REMOVED***
      init(self, obj[i], doc[i], path + '.');
    ***REMOVED*** else ***REMOVED***
      if (obj[i] === null) ***REMOVED***
        doc[i] = null;
      ***REMOVED*** else if (obj[i] !== undefined) ***REMOVED***
        if (schema) ***REMOVED***
          try ***REMOVED***
            doc[i] = schema.cast(obj[i], self, true);
          ***REMOVED*** catch (e) ***REMOVED***
            self.invalidate(e.path, new ValidatorError(***REMOVED***
              path: e.path,
              message: e.message,
              type: 'cast',
              value: e.value
            ***REMOVED***));
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
          doc[i] = obj[i];
        ***REMOVED***
      ***REMOVED***
      // mark as hydrated
      if (!self.isModified(path)) ***REMOVED***
        self.$__.activePaths.init(path);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***

/**
 * Stores the current values of the shard keys.
 *
 * ####Note:
 *
 * _Shard key values do not / are not allowed to change._
 *
 * @api private
 * @method $__storeShard
 * @memberOf Document
 */

Document.prototype.$__storeShard = function() ***REMOVED***
  // backwards compat
  var key = this.schema.options.shardKey || this.schema.options.shardkey;
  if (!(key && utils.getFunctionName(key.constructor) === 'Object')) ***REMOVED***
    return;
  ***REMOVED***

  var orig = this.$__.shardval = ***REMOVED******REMOVED***,
      paths = Object.keys(key),
      len = paths.length,
      val;

  for (var i = 0; i < len; ++i) ***REMOVED***
    val = this.getValue(paths[i]);
    if (isMongooseObject(val)) ***REMOVED***
      orig[paths[i]] = val.toObject(***REMOVED***depopulate: true, _isNested: true***REMOVED***);
    ***REMOVED*** else if (val !== null && val !== undefined && val.valueOf &&
          // Explicitly don't take value of dates
        (!val.constructor || utils.getFunctionName(val.constructor) !== 'Date')) ***REMOVED***
      orig[paths[i]] = val.valueOf();
    ***REMOVED*** else ***REMOVED***
      orig[paths[i]] = val;
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

/*!
 * Set up middleware support
 */

for (var k in hooks) ***REMOVED***
  if (k === 'pre' || k === 'post') ***REMOVED***
    Document.prototype['$' + k] = Document['$' + k] = hooks[k];
  ***REMOVED*** else ***REMOVED***
    Document.prototype[k] = Document[k] = hooks[k];
  ***REMOVED***
***REMOVED***

/**
 * Sends an update command with this document `_id` as the query selector.
 *
 * ####Example:
 *
 *     weirdCar.update(***REMOVED***$inc: ***REMOVED***wheels:1***REMOVED******REMOVED***, ***REMOVED*** w: 1 ***REMOVED***, callback);
 *
 * ####Valid options:
 *
 *  - same as in [Model.update](#model_Model.update)
 *
 * @see Model.update #model_Model.update
 * @param ***REMOVED***Object***REMOVED*** doc
 * @param ***REMOVED***Object***REMOVED*** options
 * @param ***REMOVED***Function***REMOVED*** callback
 * @return ***REMOVED***Query***REMOVED***
 * @api public
 */

Document.prototype.update = function update() ***REMOVED***
  var args = utils.args(arguments);
  args.unshift(***REMOVED***_id: this._id***REMOVED***);
  return this.constructor.update.apply(this.constructor, args);
***REMOVED***;

/**
 * Sets the value of a path, or many paths.
 *
 * ####Example:
 *
 *     // path, value
 *     doc.set(path, value)
 *
 *     // object
 *     doc.set(***REMOVED***
 *         path  : value
 *       , path2 : ***REMOVED***
 *            path  : value
 *         ***REMOVED***
 *     ***REMOVED***)
 *
 *     // on-the-fly cast to number
 *     doc.set(path, value, Number)
 *
 *     // on-the-fly cast to string
 *     doc.set(path, value, String)
 *
 *     // changing strict mode behavior
 *     doc.set(path, value, ***REMOVED*** strict: false ***REMOVED***);
 *
 * @param ***REMOVED***String|Object***REMOVED*** path path or object of key/vals to set
 * @param ***REMOVED***Any***REMOVED*** val the value to set
 * @param ***REMOVED***Schema|String|Number|Buffer|****REMOVED*** [type] optionally specify a type for "on-the-fly" attributes
 * @param ***REMOVED***Object***REMOVED*** [options] optionally specify options that modify the behavior of the set
 * @api public
 */

Document.prototype.set = function(path, val, type, options) ***REMOVED***
  if (type && utils.getFunctionName(type.constructor) === 'Object') ***REMOVED***
    options = type;
    type = undefined;
  ***REMOVED***

  var merge = options && options.merge,
      adhoc = type && type !== true,
      constructing = type === true,
      adhocs;

  var strict = options && 'strict' in options
      ? options.strict
      : this.$__.strictMode;

  if (adhoc) ***REMOVED***
    adhocs = this.$__.adhocPaths || (this.$__.adhocPaths = ***REMOVED******REMOVED***);
    adhocs[path] = Schema.interpretAsType(path, type, this.schema.options);
  ***REMOVED***

  if (typeof path !== 'string') ***REMOVED***
    // new Document(***REMOVED*** key: val ***REMOVED***)

    if (path === null || path === void 0) ***REMOVED***
      var _ = path;
      path = val;
      val = _;
    ***REMOVED*** else ***REMOVED***
      var prefix = val
          ? val + '.'
          : '';

      if (path instanceof Document) ***REMOVED***
        if (path.$__isNested) ***REMOVED***
          path = path.toObject();
        ***REMOVED*** else ***REMOVED***
          path = path._doc;
        ***REMOVED***
      ***REMOVED***

      var keys = Object.keys(path);
      var len = keys.length;
      var i = 0;
      var pathtype;
      var key;

      if (len === 0 && !this.schema.options.minimize) ***REMOVED***
        if (val) ***REMOVED***
          this.set(val, ***REMOVED******REMOVED***);
        ***REMOVED***
        return this;
      ***REMOVED***

      if (this.schema.options.retainKeyOrder) ***REMOVED***
        while (i < len) ***REMOVED***
          _handleIndex.call(this, i++);
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        while (len--) ***REMOVED***
          _handleIndex.call(this, len);
        ***REMOVED***
      ***REMOVED***

      return this;
    ***REMOVED***
  ***REMOVED***

  function _handleIndex(i) ***REMOVED***
    key = keys[i];
    var pathName = prefix + key;
    pathtype = this.schema.pathType(pathName);

    if (path[key] !== null
        && path[key] !== void 0
          // need to know if plain object - no Buffer, ObjectId, ref, etc
        && utils.isObject(path[key])
        && (!path[key].constructor || utils.getFunctionName(path[key].constructor) === 'Object')
        && pathtype !== 'virtual'
        && pathtype !== 'real'
        && !(this.$__path(pathName) instanceof MixedSchema)
        && !(this.schema.paths[pathName] &&
        this.schema.paths[pathName].options &&
        this.schema.paths[pathName].options.ref)) ***REMOVED***
      this.set(path[key], prefix + key, constructing);
    ***REMOVED*** else if (strict) ***REMOVED***
      // Don't overwrite defaults with undefined keys (gh-3981)
      if (constructing && path[key] === void 0 &&
          this.get(key) !== void 0) ***REMOVED***
        return;
      ***REMOVED***

      if (pathtype === 'real' || pathtype === 'virtual') ***REMOVED***
        // Check for setting single embedded schema to document (gh-3535)
        var p = path[key];
        if (this.schema.paths[pathName] &&
            this.schema.paths[pathName].$isSingleNested &&
            path[key] instanceof Document) ***REMOVED***
          p = p.toObject(***REMOVED*** virtuals: false, transform: false ***REMOVED***);
        ***REMOVED***
        this.set(prefix + key, p, constructing);
      ***REMOVED*** else if (pathtype === 'nested' && path[key] instanceof Document) ***REMOVED***
        this.set(prefix + key,
            path[key].toObject(***REMOVED***transform: false***REMOVED***), constructing);
      ***REMOVED*** else if (strict === 'throw') ***REMOVED***
        if (pathtype === 'nested') ***REMOVED***
          throw new ObjectExpectedError(key, path[key]);
        ***REMOVED*** else ***REMOVED***
          throw new StrictModeError(key);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED*** else if (path[key] !== void 0) ***REMOVED***
      this.set(prefix + key, path[key], constructing);
    ***REMOVED***
  ***REMOVED***

  // ensure _strict is honored for obj props
  // docschema = new Schema(***REMOVED*** path: ***REMOVED*** nest: 'string' ***REMOVED******REMOVED***)
  // doc.set('path', obj);
  var pathType = this.schema.pathType(path);
  if (pathType === 'nested' && val) ***REMOVED***
    if (utils.isObject(val) &&
        (!val.constructor || utils.getFunctionName(val.constructor) === 'Object')) ***REMOVED***
      if (!merge) ***REMOVED***
        this.setValue(path, null);
        cleanModifiedSubpaths(this, path);
      ***REMOVED***

      if (Object.keys(val).length === 0) ***REMOVED***
        this.setValue(path, ***REMOVED******REMOVED***);
        this.markModified(path);
        cleanModifiedSubpaths(this, path);
      ***REMOVED*** else ***REMOVED***
        this.set(val, path, constructing);
      ***REMOVED***
      return this;
    ***REMOVED***
    this.invalidate(path, new MongooseError.CastError('Object', val, path));
    return this;
  ***REMOVED***

  var schema;
  var parts = path.split('.');

  if (pathType === 'adhocOrUndefined' && strict) ***REMOVED***
    // check for roots that are Mixed types
    var mixed;

    for (i = 0; i < parts.length; ++i) ***REMOVED***
      var subpath = parts.slice(0, i + 1).join('.');
      schema = this.schema.path(subpath);
      if (schema instanceof MixedSchema) ***REMOVED***
        // allow changes to sub paths of mixed types
        mixed = true;
        break;
      ***REMOVED***

      // If path is underneath a virtual, bypass everything and just set it.
      if (i + 1 < parts.length && this.schema.pathType(subpath) === 'virtual') ***REMOVED***
        mpath.set(path, val, this);
        return this;
      ***REMOVED***
    ***REMOVED***

    if (!mixed) ***REMOVED***
      if (strict === 'throw') ***REMOVED***
        throw new StrictModeError(path);
      ***REMOVED***
      return this;
    ***REMOVED***
  ***REMOVED*** else if (pathType === 'virtual') ***REMOVED***
    schema = this.schema.virtualpath(path);
    schema.applySetters(val, this);
    return this;
  ***REMOVED*** else ***REMOVED***
    schema = this.$__path(path);
  ***REMOVED***

  var pathToMark;

  // When using the $set operator the path to the field must already exist.
  // Else mongodb throws: "LEFT_SUBFIELD only supports Object"

  if (parts.length <= 1) ***REMOVED***
    pathToMark = path;
  ***REMOVED*** else ***REMOVED***
    for (i = 0; i < parts.length; ++i) ***REMOVED***
      subpath = parts.slice(0, i + 1).join('.');
      if (this.isDirectModified(subpath) // earlier prefixes that are already
            // marked as dirty have precedence
          || this.get(subpath) === null) ***REMOVED***
        pathToMark = subpath;
        break;
      ***REMOVED***
    ***REMOVED***

    if (!pathToMark) ***REMOVED***
      pathToMark = path;
    ***REMOVED***
  ***REMOVED***

  // if this doc is being constructed we should not trigger getters
  var priorVal = constructing
      ? undefined
      : this.getValue(path);

  if (!schema) ***REMOVED***
    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);
    return this;
  ***REMOVED***

  var shouldSet = true;
  try ***REMOVED***
    // If the user is trying to set a ref path to a document with
    // the correct model name, treat it as populated
    var didPopulate = false;
    if (schema.options &&
        schema.options.ref &&
        val instanceof Document &&
        schema.options.ref === val.constructor.modelName) ***REMOVED***
      if (this.ownerDocument) ***REMOVED***
        this.ownerDocument().populated(this.$__fullPath(path),
          val._id, ***REMOVED***model: val.constructor***REMOVED***);
      ***REMOVED*** else ***REMOVED***
        this.populated(path, val._id, ***REMOVED***model: val.constructor***REMOVED***);
      ***REMOVED***
      didPopulate = true;
    ***REMOVED***

    var popOpts;
    if (schema.options &&
        Array.isArray(schema.options.type) &&
        schema.options.type.length &&
        schema.options.type[0].ref &&
        Array.isArray(val) &&
        val.length > 0 &&
        val[0] instanceof Document &&
        val[0].constructor.modelName &&
        schema.options.type[0].ref === (val[0].constructor.baseModelName || val[0].constructor.modelName)) ***REMOVED***
      if (this.ownerDocument) ***REMOVED***
        popOpts = ***REMOVED*** model: val[0].constructor ***REMOVED***;
        this.ownerDocument().populated(this.$__fullPath(path),
          val.map(function(v) ***REMOVED*** return v._id; ***REMOVED***), popOpts);
      ***REMOVED*** else ***REMOVED***
        popOpts = ***REMOVED*** model: val[0].constructor ***REMOVED***;
        this.populated(path, val.map(function(v) ***REMOVED*** return v._id; ***REMOVED***), popOpts);
      ***REMOVED***
      didPopulate = true;
    ***REMOVED***
    val = schema.applySetters(val, this, false, priorVal);

    if (!didPopulate && this.$__.populated) ***REMOVED***
      delete this.$__.populated[path];
    ***REMOVED***

    this.$markValid(path);
  ***REMOVED*** catch (e) ***REMOVED***
    this.invalidate(path,
      new MongooseError.CastError(schema.instance, val, path, e));
    shouldSet = false;
  ***REMOVED***

  if (shouldSet) ***REMOVED***
    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);
  ***REMOVED***

  if (schema.$isSingleNested && (this.isDirectModified(path) || val == null)) ***REMOVED***
    cleanModifiedSubpaths(this, path);
  ***REMOVED***

  return this;
***REMOVED***;

/*!
 * ignore
 */

function cleanModifiedSubpaths(doc, path) ***REMOVED***
  var _modifiedPaths = Object.keys(doc.$__.activePaths.states.modify);
  var _numModifiedPaths = _modifiedPaths.length;
  for (var j = 0; j < _numModifiedPaths; ++j) ***REMOVED***
    if (_modifiedPaths[j].indexOf(path + '.') === 0) ***REMOVED***
      delete doc.$__.activePaths.states.modify[_modifiedPaths[j]];
    ***REMOVED***
  ***REMOVED***
***REMOVED***

/**
 * Determine if we should mark this change as modified.
 *
 * @return ***REMOVED***Boolean***REMOVED***
 * @api private
 * @method $__shouldModify
 * @memberOf Document
 */

Document.prototype.$__shouldModify = function(pathToMark, path, constructing, parts, schema, val, priorVal) ***REMOVED***
  if (this.isNew) ***REMOVED***
    return true;
  ***REMOVED***

  if (undefined === val && !this.isSelected(path)) ***REMOVED***
    // when a path is not selected in a query, its initial
    // value will be undefined.
    return true;
  ***REMOVED***

  if (undefined === val && path in this.$__.activePaths.states.default) ***REMOVED***
    // we're just unsetting the default value which was never saved
    return false;
  ***REMOVED***

  // gh-3992: if setting a populated field to a doc, don't mark modified
  // if they have the same _id
  if (this.populated(path) &&
      val instanceof Document &&
      deepEqual(val._id, priorVal)) ***REMOVED***
    return false;
  ***REMOVED***

  if (!deepEqual(val, priorVal || this.get(path))) ***REMOVED***
    return true;
  ***REMOVED***

  if (!constructing &&
      val !== null &&
      val !== undefined &&
      path in this.$__.activePaths.states.default &&
      deepEqual(val, schema.getDefault(this, constructing))) ***REMOVED***
    // a path with a default was $unset on the server
    // and the user is setting it to the same value again
    return true;
  ***REMOVED***
  return false;
***REMOVED***;

/**
 * Handles the actual setting of the value and marking the path modified if appropriate.
 *
 * @api private
 * @method $__set
 * @memberOf Document
 */

Document.prototype.$__set = function(pathToMark, path, constructing, parts, schema, val, priorVal) ***REMOVED***
  Embedded = Embedded || require('./types/embedded');

  var shouldModify = this.$__shouldModify(pathToMark, path, constructing, parts,
    schema, val, priorVal);
  var _this = this;

  if (shouldModify) ***REMOVED***
    this.markModified(pathToMark, val);

    // handle directly setting arrays (gh-1126)
    MongooseArray || (MongooseArray = require('./types/array'));
    if (val && val.isMongooseArray) ***REMOVED***
      val._registerAtomic('$set', val);

      // Small hack for gh-1638: if we're overwriting the entire array, ignore
      // paths that were modified before the array overwrite
      this.$__.activePaths.forEach(function(modifiedPath) ***REMOVED***
        if (modifiedPath.indexOf(path + '.') === 0) ***REMOVED***
          _this.$__.activePaths.ignore(modifiedPath);
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED***

  var obj = this._doc;
  var i = 0;
  var l = parts.length;
  var cur = '';

  for (; i < l; i++) ***REMOVED***
    var next = i + 1;
    var last = next === l;
    cur += (cur ? '.' + parts[i] : parts[i]);

    if (last) ***REMOVED***
      obj[parts[i]] = val;
    ***REMOVED*** else ***REMOVED***
      if (obj[parts[i]] && utils.getFunctionName(obj[parts[i]].constructor) === 'Object') ***REMOVED***
        obj = obj[parts[i]];
      ***REMOVED*** else if (obj[parts[i]] && obj[parts[i]] instanceof Embedded) ***REMOVED***
        obj = obj[parts[i]];
      ***REMOVED*** else if (obj[parts[i]] && obj[parts[i]].$isSingleNested) ***REMOVED***
        obj = obj[parts[i]];
      ***REMOVED*** else if (obj[parts[i]] && Array.isArray(obj[parts[i]])) ***REMOVED***
        obj = obj[parts[i]];
      ***REMOVED*** else ***REMOVED***
        this.set(cur, ***REMOVED******REMOVED***);
        obj = obj[parts[i]];
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***;

/**
 * Gets a raw value from a path (no getters)
 *
 * @param ***REMOVED***String***REMOVED*** path
 * @api private
 */

Document.prototype.getValue = function(path) ***REMOVED***
  return utils.getValue(path, this._doc);
***REMOVED***;

/**
 * Sets a raw value for a path (no casting, setters, transformations)
 *
 * @param ***REMOVED***String***REMOVED*** path
 * @param ***REMOVED***Object***REMOVED*** value
 * @api private
 */

Document.prototype.setValue = function(path, val) ***REMOVED***
  utils.setValue(path, val, this._doc);
  return this;
***REMOVED***;

/**
 * Returns the value of a path.
 *
 * ####Example
 *
 *     // path
 *     doc.get('age') // 47
 *
 *     // dynamic casting to a string
 *     doc.get('age', String) // "47"
 *
 * @param ***REMOVED***String***REMOVED*** path
 * @param ***REMOVED***Schema|String|Number|Buffer|****REMOVED*** [type] optionally specify a type for on-the-fly attributes
 * @api public
 */

Document.prototype.get = function(path, type) ***REMOVED***
  var adhoc;
  if (type) ***REMOVED***
    adhoc = Schema.interpretAsType(path, type, this.schema.options);
  ***REMOVED***

  var schema = this.$__path(path) || this.schema.virtualpath(path),
      pieces = path.split('.'),
      obj = this._doc;

  for (var i = 0, l = pieces.length; i < l; i++) ***REMOVED***
    obj = obj === null || obj === void 0
        ? undefined
        : obj[pieces[i]];
  ***REMOVED***

  if (adhoc) ***REMOVED***
    obj = adhoc.cast(obj);
  ***REMOVED***

  // Check if this path is populated - don't apply getters if it is,
  // because otherwise its a nested object. See gh-3357
  if (schema && !this.populated(path)) ***REMOVED***
    obj = schema.applyGetters(obj, this);
  ***REMOVED***

  return obj;
***REMOVED***;

/**
 * Returns the schematype for the given `path`.
 *
 * @param ***REMOVED***String***REMOVED*** path
 * @api private
 * @method $__path
 * @memberOf Document
 */

Document.prototype.$__path = function(path) ***REMOVED***
  var adhocs = this.$__.adhocPaths,
      adhocType = adhocs && adhocs[path];

  if (adhocType) ***REMOVED***
    return adhocType;
  ***REMOVED***
  return this.schema.path(path);
***REMOVED***;

/**
 * Marks the path as having pending changes to write to the db.
 *
 * _Very helpful when using [Mixed](./schematypes.html#mixed) types._
 *
 * ####Example:
 *
 *     doc.mixed.type = 'changed';
 *     doc.markModified('mixed.type');
 *     doc.save() // changes to mixed.type are now persisted
 *
 * @param ***REMOVED***String***REMOVED*** path the path to mark modified
 * @api public
 */

Document.prototype.markModified = function(path) ***REMOVED***
  this.$__.activePaths.modify(path);
***REMOVED***;

/**
 * Clears the modified state on the specified path.
 *
 * ####Example:
 *
 *     doc.foo = 'bar';
 *     doc.unmarkModified('foo');
 *     doc.save() // changes to foo will not be persisted
 *
 * @param ***REMOVED***String***REMOVED*** path the path to unmark modified
 * @api public
 */

Document.prototype.unmarkModified = function(path) ***REMOVED***
  this.$__.activePaths.init(path);
***REMOVED***;

/**
 * Don't run validation on this path or persist changes to this path.
 *
 * ####Example:
 *
 *     doc.foo = null;
 *     doc.$ignore('foo');
 *     doc.save() // changes to foo will not be persisted and validators won't be run
 *
 * @param ***REMOVED***String***REMOVED*** path the path to ignore
 * @api public
 */

Document.prototype.$ignore = function(path) ***REMOVED***
  this.$__.activePaths.ignore(path);
***REMOVED***;

/**
 * Returns the list of paths that have been modified.
 *
 * @return ***REMOVED***Array***REMOVED***
 * @api public
 */

Document.prototype.modifiedPaths = function() ***REMOVED***
  var directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);
  return directModifiedPaths.reduce(function(list, path) ***REMOVED***
    var parts = path.split('.');
    return list.concat(parts.reduce(function(chains, part, i) ***REMOVED***
      return chains.concat(parts.slice(0, i).concat(part).join('.'));
    ***REMOVED***, []).filter(function(chain) ***REMOVED***
      return (list.indexOf(chain) === -1);
    ***REMOVED***));
  ***REMOVED***, []);
***REMOVED***;

/**
 * Returns true if this document was modified, else false.
 *
 * If `path` is given, checks if a path or any full path containing `path` as part of its path chain has been modified.
 *
 * ####Example
 *
 *     doc.set('documents.0.title', 'changed');
 *     doc.isModified()                      // true
 *     doc.isModified('documents')           // true
 *     doc.isModified('documents.0.title')   // true
 *     doc.isModified('documents otherProp') // true
 *     doc.isDirectModified('documents')     // false
 *
 * @param ***REMOVED***String***REMOVED*** [path] optional
 * @return ***REMOVED***Boolean***REMOVED***
 * @api public
 */

Document.prototype.isModified = function(paths) ***REMOVED***
  if (paths) ***REMOVED***
    if (!Array.isArray(paths)) ***REMOVED***
      paths = paths.split(' ');
    ***REMOVED***
    var modified = this.modifiedPaths();
    var directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);
    var isModifiedChild = paths.some(function(path) ***REMOVED***
      return !!~modified.indexOf(path);
    ***REMOVED***);
    return isModifiedChild || paths.some(function(path) ***REMOVED***
      return directModifiedPaths.some(function(mod) ***REMOVED***
        return mod === path || path.indexOf(mod + '.') === 0;
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***
  return this.$__.activePaths.some('modify');
***REMOVED***;

/**
 * Checks if a path is set to its default.
 *
 * ####Example
 *
 *     MyModel = mongoose.model('test', ***REMOVED*** name: ***REMOVED*** type: String, default: 'Val '***REMOVED*** ***REMOVED***);
 *     var m = new MyModel();
 *     m.$isDefault('name');               // true
 *
 * @param ***REMOVED***String***REMOVED*** [path]
 * @return ***REMOVED***Boolean***REMOVED***
 * @method $isDefault
 * @api public
 */

Document.prototype.$isDefault = function(path) ***REMOVED***
  return (path in this.$__.activePaths.states.default);
***REMOVED***;

/**
 * Returns true if `path` was directly set and modified, else false.
 *
 * ####Example
 *
 *     doc.set('documents.0.title', 'changed');
 *     doc.isDirectModified('documents.0.title') // true
 *     doc.isDirectModified('documents') // false
 *
 * @param ***REMOVED***String***REMOVED*** path
 * @return ***REMOVED***Boolean***REMOVED***
 * @api public
 */

Document.prototype.isDirectModified = function(path) ***REMOVED***
  return (path in this.$__.activePaths.states.modify);
***REMOVED***;

/**
 * Checks if `path` was initialized.
 *
 * @param ***REMOVED***String***REMOVED*** path
 * @return ***REMOVED***Boolean***REMOVED***
 * @api public
 */

Document.prototype.isInit = function(path) ***REMOVED***
  return (path in this.$__.activePaths.states.init);
***REMOVED***;

/**
 * Checks if `path` was selected in the source query which initialized this document.
 *
 * ####Example
 *
 *     Thing.findOne().select('name').exec(function (err, doc) ***REMOVED***
 *        doc.isSelected('name') // true
 *        doc.isSelected('age')  // false
 *     ***REMOVED***)
 *
 * @param ***REMOVED***String***REMOVED*** path
 * @return ***REMOVED***Boolean***REMOVED***
 * @api public
 */

Document.prototype.isSelected = function isSelected(path) ***REMOVED***
  if (this.$__.selected) ***REMOVED***
    if (path === '_id') ***REMOVED***
      return this.$__.selected._id !== 0;
    ***REMOVED***

    var paths = Object.keys(this.$__.selected),
        i = paths.length,
        inclusive = false,
        cur;

    if (i === 1 && paths[0] === '_id') ***REMOVED***
      // only _id was selected.
      return this.$__.selected._id === 0;
    ***REMOVED***

    while (i--) ***REMOVED***
      cur = paths[i];
      if (cur === '_id') ***REMOVED***
        continue;
      ***REMOVED***
      inclusive = !!this.$__.selected[cur];
      break;
    ***REMOVED***

    if (path in this.$__.selected) ***REMOVED***
      return inclusive;
    ***REMOVED***

    i = paths.length;
    var pathDot = path + '.';

    while (i--) ***REMOVED***
      cur = paths[i];
      if (cur === '_id') ***REMOVED***
        continue;
      ***REMOVED***

      if (cur.indexOf(pathDot) === 0) ***REMOVED***
        return inclusive;
      ***REMOVED***

      if (pathDot.indexOf(cur + '.') === 0) ***REMOVED***
        return inclusive;
      ***REMOVED***
    ***REMOVED***

    return !inclusive;
  ***REMOVED***

  return true;
***REMOVED***;

/**
 * Executes registered validation rules for this document.
 *
 * ####Note:
 *
 * This method is called `pre` save and if a validation rule is violated, [save](#model_Model-save) is aborted and the error is returned to your `callback`.
 *
 * ####Example:
 *
 *     doc.validate(function (err) ***REMOVED***
 *       if (err) handleError(err);
 *       else // validation passed
 *     ***REMOVED***);
 *
 * @param ***REMOVED***Object***REMOVED*** optional options internal options
 * @param ***REMOVED***Function***REMOVED*** callback optional callback called after validation completes, passing an error if one occurred
 * @return ***REMOVED***Promise***REMOVED*** Promise
 * @api public
 */

Document.prototype.validate = function(options, callback) ***REMOVED***
  if (typeof options === 'function') ***REMOVED***
    callback = options;
    options = null;
  ***REMOVED***

  this.$__validate(callback || function() ***REMOVED******REMOVED***);
***REMOVED***;

/*!
 * ignore
 */

function _getPathsToValidate(doc) ***REMOVED***
  // only validate required fields when necessary
  var paths = Object.keys(doc.$__.activePaths.states.require).filter(function(path) ***REMOVED***
    if (!doc.isSelected(path) && !doc.isModified(path)) ***REMOVED***
      return false;
    ***REMOVED***
    var p = doc.schema.path(path);
    if (typeof p.originalRequiredValue === 'function') ***REMOVED***
      return p.originalRequiredValue.call(doc);
    ***REMOVED***
    return true;
  ***REMOVED***);

  paths = paths.concat(Object.keys(doc.$__.activePaths.states.init));
  paths = paths.concat(Object.keys(doc.$__.activePaths.states.modify));
  paths = paths.concat(Object.keys(doc.$__.activePaths.states.default));

  // gh-661: if a whole array is modified, make sure to run validation on all
  // the children as well
  for (var i = 0; i < paths.length; ++i) ***REMOVED***
    var path = paths[i];
    var val = doc.getValue(path);
    if (val && val.isMongooseArray && !Buffer.isBuffer(val) && !val.isMongooseDocumentArray) ***REMOVED***
      var numElements = val.length;
      for (var j = 0; j < numElements; ++j) ***REMOVED***
        paths.push(path + '.' + j);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  var flattenOptions = ***REMOVED*** skipArrays: true ***REMOVED***;
  for (i = 0; i < paths.length; ++i) ***REMOVED***
    var pathToCheck = paths[i];
    if (doc.schema.nested[pathToCheck]) ***REMOVED***
      var _v = doc.getValue(pathToCheck);
      if (isMongooseObject(_v)) ***REMOVED***
        _v = _v.toObject(***REMOVED*** transform: false ***REMOVED***);
      ***REMOVED***
      var flat = flatten(_v, '', flattenOptions);
      var _subpaths = Object.keys(flat).map(function(p) ***REMOVED***
        return pathToCheck + '.' + p;
      ***REMOVED***);
      paths = paths.concat(_subpaths);
    ***REMOVED***
  ***REMOVED***

  return paths;
***REMOVED***

/*!
 * ignore
 */

Document.prototype.$__validate = function(callback) ***REMOVED***
  var _this = this;
  var _complete = function() ***REMOVED***
    var err = _this.$__.validationError;
    _this.$__.validationError = undefined;
    _this.emit('validate', _this);
    if (err) ***REMOVED***
      for (var key in err.errors) ***REMOVED***
        // Make sure cast errors persist
        if (!_this.__parent && err.errors[key] instanceof MongooseError.CastError) ***REMOVED***
          _this.invalidate(key, err.errors[key]);
        ***REMOVED***
      ***REMOVED***

      return err;
    ***REMOVED***
  ***REMOVED***;

  // only validate required fields when necessary
  var paths = _getPathsToValidate(this);

  if (paths.length === 0) ***REMOVED***
    process.nextTick(function() ***REMOVED***
      var err = _complete();
      if (err) ***REMOVED***
        callback(err);
        return;
      ***REMOVED***
      callback();
    ***REMOVED***);
  ***REMOVED***

  var validating = ***REMOVED******REMOVED***,
      total = 0;

  var complete = function() ***REMOVED***
    var err = _complete();
    if (err) ***REMOVED***
      callback(err);
      return;
    ***REMOVED***
    callback();
  ***REMOVED***;

  var validatePath = function(path) ***REMOVED***
    if (validating[path]) ***REMOVED***
      return;
    ***REMOVED***

    validating[path] = true;
    total++;

    process.nextTick(function() ***REMOVED***
      var p = _this.schema.path(path);
      if (!p) ***REMOVED***
        return --total || complete();
      ***REMOVED***

      // If user marked as invalid or there was a cast error, don't validate
      if (!_this.$isValid(path)) ***REMOVED***
        --total || complete();
        return;
      ***REMOVED***

      var val = _this.getValue(path);
      p.doValidate(val, function(err) ***REMOVED***
        if (err) ***REMOVED***
          _this.invalidate(path, err, undefined, true);
        ***REMOVED***
        --total || complete();
      ***REMOVED***, _this);
    ***REMOVED***);
  ***REMOVED***;

  paths.forEach(validatePath);
***REMOVED***;

/**
 * Executes registered validation rules (skipping asynchronous validators) for this document.
 *
 * ####Note:
 *
 * This method is useful if you need synchronous validation.
 *
 * ####Example:
 *
 *     var err = doc.validateSync();
 *     if ( err )***REMOVED***
 *       handleError( err );
 *     ***REMOVED*** else ***REMOVED***
 *       // validation passed
 *     ***REMOVED***
 *
 * @param ***REMOVED***Array|string***REMOVED*** pathsToValidate only validate the given paths
 * @return ***REMOVED***MongooseError|undefined***REMOVED*** MongooseError if there are errors during validation, or undefined if there is no error.
 * @api public
 */

Document.prototype.validateSync = function(pathsToValidate) ***REMOVED***
  var _this = this;

  if (typeof pathsToValidate === 'string') ***REMOVED***
    pathsToValidate = pathsToValidate.split(' ');
  ***REMOVED***

  // only validate required fields when necessary
  var paths = _getPathsToValidate(this);

  if (pathsToValidate && pathsToValidate.length) ***REMOVED***
    var tmp = [];
    for (var i = 0; i < paths.length; ++i) ***REMOVED***
      if (pathsToValidate.indexOf(paths[i]) !== -1) ***REMOVED***
        tmp.push(paths[i]);
      ***REMOVED***
    ***REMOVED***
    paths = tmp;
  ***REMOVED***

  var validating = ***REMOVED******REMOVED***;

  paths.forEach(function(path) ***REMOVED***
    if (validating[path]) ***REMOVED***
      return;
    ***REMOVED***

    validating[path] = true;

    var p = _this.schema.path(path);
    if (!p) ***REMOVED***
      return;
    ***REMOVED***
    if (!_this.$isValid(path)) ***REMOVED***
      return;
    ***REMOVED***

    var val = _this.getValue(path);
    var err = p.doValidateSync(val, _this);
    if (err) ***REMOVED***
      _this.invalidate(path, err, undefined, true);
    ***REMOVED***
  ***REMOVED***);

  var err = _this.$__.validationError;
  _this.$__.validationError = undefined;
  _this.emit('validate', _this);

  if (err) ***REMOVED***
    for (var key in err.errors) ***REMOVED***
      // Make sure cast errors persist
      if (err.errors[key] instanceof MongooseError.CastError) ***REMOVED***
        _this.invalidate(key, err.errors[key]);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  return err;
***REMOVED***;

/**
 * Marks a path as invalid, causing validation to fail.
 *
 * The `errorMsg` argument will become the message of the `ValidationError`.
 *
 * The `value` argument (if passed) will be available through the `ValidationError.value` property.
 *
 *     doc.invalidate('size', 'must be less than 20', 14);

 *     doc.validate(function (err) ***REMOVED***
 *       console.log(err)
 *       // prints
 *       ***REMOVED*** message: 'Validation failed',
 *         name: 'ValidationError',
 *         errors:
 *          ***REMOVED*** size:
 *             ***REMOVED*** message: 'must be less than 20',
 *               name: 'ValidatorError',
 *               path: 'size',
 *               type: 'user defined',
 *               value: 14 ***REMOVED*** ***REMOVED*** ***REMOVED***
 *     ***REMOVED***)
 *
 * @param ***REMOVED***String***REMOVED*** path the field to invalidate
 * @param ***REMOVED***String|Error***REMOVED*** errorMsg the error which states the reason `path` was invalid
 * @param ***REMOVED***Object|String|Number|any***REMOVED*** value optional invalid value
 * @param ***REMOVED***String***REMOVED*** [kind] optional `kind` property for the error
 * @return ***REMOVED***ValidationError***REMOVED*** the current ValidationError, with all currently invalidated paths
 * @api public
 */

Document.prototype.invalidate = function(path, err, val, kind) ***REMOVED***
  if (!this.$__.validationError) ***REMOVED***
    this.$__.validationError = new ValidationError(this);
  ***REMOVED***

  if (this.$__.validationError.errors[path]) ***REMOVED***
    return;
  ***REMOVED***

  if (!err || typeof err === 'string') ***REMOVED***
    err = new ValidatorError(***REMOVED***
      path: path,
      message: err,
      type: kind || 'user defined',
      value: val
    ***REMOVED***);
  ***REMOVED***

  if (this.$__.validationError === err) ***REMOVED***
    return this.$__.validationError;
  ***REMOVED***

  this.$__.validationError.errors[path] = err;
  return this.$__.validationError;
***REMOVED***;

/**
 * Marks a path as valid, removing existing validation errors.
 *
 * @param ***REMOVED***String***REMOVED*** path the field to mark as valid
 * @api private
 * @method $markValid
 * @receiver Document
 */

Document.prototype.$markValid = function(path) ***REMOVED***
  if (!this.$__.validationError || !this.$__.validationError.errors[path]) ***REMOVED***
    return;
  ***REMOVED***

  delete this.$__.validationError.errors[path];
  if (Object.keys(this.$__.validationError.errors).length === 0) ***REMOVED***
    this.$__.validationError = null;
  ***REMOVED***
***REMOVED***;

/**
 * Checks if a path is invalid
 *
 * @param ***REMOVED***String***REMOVED*** path the field to check
 * @method $isValid
 * @api private
 * @receiver Document
 */

Document.prototype.$isValid = function(path) ***REMOVED***
  return !this.$__.validationError || !this.$__.validationError.errors[path];
***REMOVED***;

/**
 * Resets the internal modified state of this document.
 *
 * @api private
 * @return ***REMOVED***Document***REMOVED***
 * @method $__reset
 * @memberOf Document
 */

Document.prototype.$__reset = function reset() ***REMOVED***
  var _this = this;
  DocumentArray || (DocumentArray = require('./types/documentarray'));

  this.$__.activePaths
  .map('init', 'modify', function(i) ***REMOVED***
    return _this.getValue(i);
  ***REMOVED***)
  .filter(function(val) ***REMOVED***
    return val && val instanceof Array && val.isMongooseDocumentArray && val.length;
  ***REMOVED***)
  .forEach(function(array) ***REMOVED***
    var i = array.length;
    while (i--) ***REMOVED***
      var doc = array[i];
      if (!doc) ***REMOVED***
        continue;
      ***REMOVED***
      doc.$__reset();
    ***REMOVED***
  ***REMOVED***);

  // clear atomics
  this.$__dirty().forEach(function(dirt) ***REMOVED***
    var type = dirt.value;
    if (type && type._atomics) ***REMOVED***
      type._atomics = ***REMOVED******REMOVED***;
    ***REMOVED***
  ***REMOVED***);

  // Clear 'dirty' cache
  this.$__.activePaths.clear('modify');
  this.$__.activePaths.clear('default');
  this.$__.validationError = undefined;
  this.errors = undefined;
  _this = this;
  this.schema.requiredPaths().forEach(function(path) ***REMOVED***
    _this.$__.activePaths.require(path);
  ***REMOVED***);

  return this;
***REMOVED***;

/**
 * Returns this documents dirty paths / vals.
 *
 * @api private
 * @method $__dirty
 * @memberOf Document
 */

Document.prototype.$__dirty = function() ***REMOVED***
  var _this = this;

  var all = this.$__.activePaths.map('modify', function(path) ***REMOVED***
    return ***REMOVED***
      path: path,
      value: _this.getValue(path),
      schema: _this.$__path(path)
    ***REMOVED***;
  ***REMOVED***);

  // gh-2558: if we had to set a default and the value is not undefined,
  // we have to save as well
  all = all.concat(this.$__.activePaths.map('default', function(path) ***REMOVED***
    if (path === '_id' || !_this.getValue(path)) ***REMOVED***
      return;
    ***REMOVED***
    return ***REMOVED***
      path: path,
      value: _this.getValue(path),
      schema: _this.$__path(path)
    ***REMOVED***;
  ***REMOVED***));

  // Sort dirty paths in a flat hierarchy.
  all.sort(function(a, b) ***REMOVED***
    return (a.path < b.path ? -1 : (a.path > b.path ? 1 : 0));
  ***REMOVED***);

  // Ignore "foo.a" if "foo" is dirty already.
  var minimal = [],
      lastPath,
      top;

  all.forEach(function(item) ***REMOVED***
    if (!item) ***REMOVED***
      return;
    ***REMOVED***
    if (item.path.indexOf(lastPath) !== 0) ***REMOVED***
      lastPath = item.path + '.';
      minimal.push(item);
      top = item;
    ***REMOVED*** else ***REMOVED***
      // special case for top level MongooseArrays
      if (top.value && top.value._atomics && top.value.hasAtomics()) ***REMOVED***
        // the `top` array itself and a sub path of `top` are being modified.
        // the only way to honor all of both modifications is through a $set
        // of entire array.
        top.value._atomics = ***REMOVED******REMOVED***;
        top.value._atomics.$set = top.value;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***);

  top = lastPath = null;
  return minimal;
***REMOVED***;

/*!
 * Compiles schemas.
 */

function compile(tree, proto, prefix, options) ***REMOVED***
  var keys = Object.keys(tree),
      i = keys.length,
      limb,
      key;

  while (i--) ***REMOVED***
    key = keys[i];
    limb = tree[key];

    defineKey(key,
        ((utils.getFunctionName(limb.constructor) === 'Object'
        && Object.keys(limb).length)
        && (!limb[options.typeKey] || (options.typeKey === 'type' && limb.type.type))
            ? limb
            : null)
        , proto
        , prefix
        , keys
        , options);
  ***REMOVED***
***REMOVED***

// gets descriptors for all properties of `object`
// makes all properties non-enumerable to match previous behavior to #2211
function getOwnPropertyDescriptors(object) ***REMOVED***
  var result = ***REMOVED******REMOVED***;

  Object.getOwnPropertyNames(object).forEach(function(key) ***REMOVED***
    result[key] = Object.getOwnPropertyDescriptor(object, key);
    result[key].enumerable = true;
  ***REMOVED***);

  return result;
***REMOVED***

/*!
 * Defines the accessor named prop on the incoming prototype.
 */

function defineKey(prop, subprops, prototype, prefix, keys, options) ***REMOVED***
  var path = (prefix ? prefix + '.' : '') + prop;
  prefix = prefix || '';

  if (subprops) ***REMOVED***
    Object.defineProperty(prototype, prop, ***REMOVED***
      enumerable: true,
      configurable: true,
      get: function() ***REMOVED***
        var _this = this;
        if (!this.$__.getters) ***REMOVED***
          this.$__.getters = ***REMOVED******REMOVED***;
        ***REMOVED***

        if (!this.$__.getters[path]) ***REMOVED***
          var nested = Object.create(Object.getPrototypeOf(this), getOwnPropertyDescriptors(this));

          // save scope for nested getters/setters
          if (!prefix) ***REMOVED***
            nested.$__.scope = this;
          ***REMOVED***

          // shadow inherited getters from sub-objects so
          // thing.nested.nested.nested... doesn't occur (gh-366)
          var i = 0,
              len = keys.length;

          for (; i < len; ++i) ***REMOVED***
            // over-write the parents getter without triggering it
            Object.defineProperty(nested, keys[i], ***REMOVED***
              enumerable: false,    // It doesn't show up.
              writable: true,       // We can set it later.
              configurable: true,   // We can Object.defineProperty again.
              value: undefined      // It shadows its parent.
            ***REMOVED***);
          ***REMOVED***

          Object.defineProperty(nested, 'toObject', ***REMOVED***
            enumerable: true,
            configurable: true,
            writable: false,
            value: function() ***REMOVED***
              return _this.get(path);
            ***REMOVED***
          ***REMOVED***);

          Object.defineProperty(nested, 'toJSON', ***REMOVED***
            enumerable: true,
            configurable: true,
            writable: false,
            value: function() ***REMOVED***
              return _this.get(path);
            ***REMOVED***
          ***REMOVED***);

          Object.defineProperty(nested, '$__isNested', ***REMOVED***
            enumerable: true,
            configurable: true,
            writable: false,
            value: true
          ***REMOVED***);

          compile(subprops, nested, path, options);
          this.$__.getters[path] = nested;
        ***REMOVED***

        return this.$__.getters[path];
      ***REMOVED***,
      set: function(v) ***REMOVED***
        if (v instanceof Document) ***REMOVED***
          v = v.toObject(***REMOVED*** transform: false ***REMOVED***);
        ***REMOVED***
        return (this.$__.scope || this).set(path, v);
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    Object.defineProperty(prototype, prop, ***REMOVED***
      enumerable: true,
      configurable: true,
      get: function() ***REMOVED***
        return this.get.call(this.$__.scope || this, path);
      ***REMOVED***,
      set: function(v) ***REMOVED***
        return this.set.call(this.$__.scope || this, path, v);
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***
***REMOVED***

/**
 * Assigns/compiles `schema` into this documents prototype.
 *
 * @param ***REMOVED***Schema***REMOVED*** schema
 * @api private
 * @method $__setSchema
 * @memberOf Document
 */

Document.prototype.$__setSchema = function(schema) ***REMOVED***
  compile(schema.tree, this, undefined, schema.options);
  this.schema = schema;
***REMOVED***;


/**
 * Get active path that were changed and are arrays
 *
 * @api private
 * @method $__getArrayPathsToValidate
 * @memberOf Document
 */

Document.prototype.$__getArrayPathsToValidate = function() ***REMOVED***
  DocumentArray || (DocumentArray = require('./types/documentarray'));

  // validate all document arrays.
  return this.$__.activePaths
  .map('init', 'modify', function(i) ***REMOVED***
    return this.getValue(i);
  ***REMOVED***.bind(this))
  .filter(function(val) ***REMOVED***
    return val && val instanceof Array && val.isMongooseDocumentArray && val.length;
  ***REMOVED***).reduce(function(seed, array) ***REMOVED***
    return seed.concat(array);
  ***REMOVED***, [])
  .filter(function(doc) ***REMOVED***
    return doc;
  ***REMOVED***);
***REMOVED***;


/**
 * Get all subdocs (by bfs)
 *
 * @api private
 * @method $__getAllSubdocs
 * @memberOf Document
 */

Document.prototype.$__getAllSubdocs = function() ***REMOVED***
  DocumentArray || (DocumentArray = require('./types/documentarray'));
  Embedded = Embedded || require('./types/embedded');

  function docReducer(seed, path) ***REMOVED***
    var val = this[path];

    if (val instanceof Embedded) ***REMOVED***
      seed.push(val);
    ***REMOVED***
    if (val && val.$isSingleNested) ***REMOVED***
      seed = Object.keys(val._doc).reduce(docReducer.bind(val._doc), seed);
      seed.push(val);
    ***REMOVED***
    if (val && val.isMongooseDocumentArray) ***REMOVED***
      val.forEach(function _docReduce(doc) ***REMOVED***
        if (!doc || !doc._doc) ***REMOVED***
          return;
        ***REMOVED***
        if (doc instanceof Embedded) ***REMOVED***
          seed.push(doc);
        ***REMOVED***
        seed = Object.keys(doc._doc).reduce(docReducer.bind(doc._doc), seed);
      ***REMOVED***);
    ***REMOVED*** else if (val instanceof Document && val.$__isNested) ***REMOVED***
      val = val.toObject();
      if (val) ***REMOVED***
        seed = Object.keys(val).reduce(docReducer.bind(val), seed);
      ***REMOVED***
    ***REMOVED***
    return seed;
  ***REMOVED***

  var subDocs = Object.keys(this._doc).reduce(docReducer.bind(this), []);

  return subDocs;
***REMOVED***;

/**
 * Executes methods queued from the Schema definition
 *
 * @api private
 * @method $__registerHooksFromSchema
 * @memberOf Document
 */

Document.prototype.$__registerHooksFromSchema = function() ***REMOVED***
  Embedded = Embedded || require('./types/embedded');
  var Promise = PromiseProvider.get();

  var _this = this;
  var q = _this.schema && _this.schema.callQueue;
  var toWrapEl;
  var len;
  var i;
  var j;
  var pointCut;
  var keys;
  if (!q.length) ***REMOVED***
    return _this;
  ***REMOVED***

  // we are only interested in 'pre' hooks, and group by point-cut
  var toWrap = ***REMOVED*** post: [] ***REMOVED***;
  var pair;

  for (i = 0; i < q.length; ++i) ***REMOVED***
    pair = q[i];
    if (pair[0] !== 'pre' && pair[0] !== 'post' && pair[0] !== 'on') ***REMOVED***
      _this[pair[0]].apply(_this, pair[1]);
      continue;
    ***REMOVED***
    var args = [].slice.call(pair[1]);
    pointCut = pair[0] === 'on' ? 'post' : args[0];
    if (!(pointCut in toWrap)) ***REMOVED***
      toWrap[pointCut] = ***REMOVED***post: [], pre: []***REMOVED***;
    ***REMOVED***
    if (pair[0] === 'post') ***REMOVED***
      toWrap[pointCut].post.push(args);
    ***REMOVED*** else if (pair[0] === 'on') ***REMOVED***
      toWrap[pointCut].push(args);
    ***REMOVED*** else ***REMOVED***
      toWrap[pointCut].pre.push(args);
    ***REMOVED***
  ***REMOVED***

  // 'post' hooks are simpler
  len = toWrap.post.length;
  toWrap.post.forEach(function(args) ***REMOVED***
    _this.on.apply(_this, args);
  ***REMOVED***);
  delete toWrap.post;

  // 'init' should be synchronous on subdocuments
  if (toWrap.init && _this instanceof Embedded) ***REMOVED***
    if (toWrap.init.pre) ***REMOVED***
      toWrap.init.pre.forEach(function(args) ***REMOVED***
        _this.$pre.apply(_this, args);
      ***REMOVED***);
    ***REMOVED***
    if (toWrap.init.post) ***REMOVED***
      toWrap.init.post.forEach(function(args) ***REMOVED***
        _this.$post.apply(_this, args);
      ***REMOVED***);
    ***REMOVED***
    delete toWrap.init;
  ***REMOVED*** else if (toWrap.set) ***REMOVED***
    // Set hooks also need to be sync re: gh-3479
    if (toWrap.set.pre) ***REMOVED***
      toWrap.set.pre.forEach(function(args) ***REMOVED***
        _this.$pre.apply(_this, args);
      ***REMOVED***);
    ***REMOVED***
    if (toWrap.set.post) ***REMOVED***
      toWrap.set.post.forEach(function(args) ***REMOVED***
        _this.$post.apply(_this, args);
      ***REMOVED***);
    ***REMOVED***
    delete toWrap.set;
  ***REMOVED***

  keys = Object.keys(toWrap);
  len = keys.length;
  for (i = 0; i < len; ++i) ***REMOVED***
    pointCut = keys[i];
    // this is so we can wrap everything into a promise;
    var newName = ('$__original_' + pointCut);
    if (!_this[pointCut]) ***REMOVED***
      continue;
    ***REMOVED***
    _this[newName] = _this[pointCut];
    _this[pointCut] = (function(_newName) ***REMOVED***
      return function wrappedPointCut() ***REMOVED***
        var args = [].slice.call(arguments);
        var lastArg = args.pop();
        var fn;
        var originalError = new Error();
        var $results;
        if (lastArg && typeof lastArg !== 'function') ***REMOVED***
          args.push(lastArg);
        ***REMOVED*** else ***REMOVED***
          fn = lastArg;
        ***REMOVED***

        var promise = new Promise.ES6(function(resolve, reject) ***REMOVED***
          args.push(function(error) ***REMOVED***
            if (error) ***REMOVED***
              // gh-2633: since VersionError is very generic, take the
              // stack trace of the original save() function call rather
              // than the async trace
              if (error instanceof VersionError) ***REMOVED***
                error.stack = originalError.stack;
              ***REMOVED***
              _this.$__handleReject(error);
              reject(error);
              return;
            ***REMOVED***

            // There may be multiple results and promise libs other than
            // mpromise don't support passing multiple values to `resolve()`
            $results = Array.prototype.slice.call(arguments, 1);
            resolve.apply(promise, $results);
          ***REMOVED***);

          _this[_newName].apply(_this, args);
        ***REMOVED***);
        if (fn) ***REMOVED***
          if (_this.constructor.$wrapCallback) ***REMOVED***
            fn = _this.constructor.$wrapCallback(fn);
          ***REMOVED***
          return promise.then(
            function() ***REMOVED***
              process.nextTick(function() ***REMOVED***
                fn.apply(null, [null].concat($results));
              ***REMOVED***);
            ***REMOVED***,
            function(error) ***REMOVED***
              process.nextTick(function() ***REMOVED***
                fn(error);
              ***REMOVED***);
            ***REMOVED***);
        ***REMOVED***
        return promise;
      ***REMOVED***;
    ***REMOVED***)(newName);

    toWrapEl = toWrap[pointCut];
    var _len = toWrapEl.pre.length;
    args;
    for (j = 0; j < _len; ++j) ***REMOVED***
      args = toWrapEl.pre[j];
      args[0] = newName;
      _this.$pre.apply(_this, args);
    ***REMOVED***

    _len = toWrapEl.post.length;
    for (j = 0; j < _len; ++j) ***REMOVED***
      args = toWrapEl.post[j];
      args[0] = newName;
      _this.$post.apply(_this, args);
    ***REMOVED***
  ***REMOVED***
  return _this;
***REMOVED***;

Document.prototype.$__handleReject = function handleReject(err) ***REMOVED***
  // emit on the Model if listening
  if (this.listeners('error').length) ***REMOVED***
    this.emit('error', err);
  ***REMOVED*** else if (this.constructor.listeners && this.constructor.listeners('error').length) ***REMOVED***
    this.constructor.emit('error', err);
  ***REMOVED*** else if (this.listeners && this.listeners('error').length) ***REMOVED***
    this.emit('error', err);
  ***REMOVED***
***REMOVED***;

/**
 * Internal helper for toObject() and toJSON() that doesn't manipulate options
 *
 * @api private
 * @method $toObject
 * @memberOf Document
 */

Document.prototype.$toObject = function(options, json) ***REMOVED***
  var defaultOptions = ***REMOVED***
    transform: true,
    json: json,
    retainKeyOrder: this.schema.options.retainKeyOrder
  ***REMOVED***;

  // _isNested will only be true if this is not the top level document, we
  // should never depopulate
  if (options && options.depopulate && options._isNested && this.$__.wasPopulated) ***REMOVED***
    // populated paths that we set to a document
    return clone(this._id, options);
  ***REMOVED***

  // When internally saving this document we always pass options,
  // bypassing the custom schema options.
  if (!(options && utils.getFunctionName(options.constructor) === 'Object') ||
      (options && options._useSchemaOptions)) ***REMOVED***
    if (json) ***REMOVED***
      options = this.schema.options.toJSON ?
        clone(this.schema.options.toJSON) :
        ***REMOVED******REMOVED***;
      options.json = true;
      options._useSchemaOptions = true;
    ***REMOVED*** else ***REMOVED***
      options = this.schema.options.toObject ?
        clone(this.schema.options.toObject) :
        ***REMOVED******REMOVED***;
      options.json = false;
      options._useSchemaOptions = true;
    ***REMOVED***
  ***REMOVED***

  for (var key in defaultOptions) ***REMOVED***
    if (options[key] === undefined) ***REMOVED***
      options[key] = defaultOptions[key];
    ***REMOVED***
  ***REMOVED***

  ('minimize' in options) || (options.minimize = this.schema.options.minimize);

  // remember the root transform function
  // to save it from being overwritten by sub-transform functions
  var originalTransform = options.transform;

  options._isNested = true;

  var ret = clone(this._doc, options) || ***REMOVED******REMOVED***;

  if (options.getters) ***REMOVED***
    applyGetters(this, ret, 'paths', options);
    // applyGetters for paths will add nested empty objects;
    // if minimize is set, we need to remove them.
    if (options.minimize) ***REMOVED***
      ret = minimize(ret) || ***REMOVED******REMOVED***;
    ***REMOVED***
  ***REMOVED***

  if (options.virtuals || options.getters && options.virtuals !== false) ***REMOVED***
    applyGetters(this, ret, 'virtuals', options);
  ***REMOVED***

  if (options.versionKey === false && this.schema.options.versionKey) ***REMOVED***
    delete ret[this.schema.options.versionKey];
  ***REMOVED***

  var transform = options.transform;

  // In the case where a subdocument has its own transform function, we need to
  // check and see if the parent has a transform (options.transform) and if the
  // child schema has a transform (this.schema.options.toObject) In this case,
  // we need to adjust options.transform to be the child schema's transform and
  // not the parent schema's
  if (transform === true ||
      (this.schema.options.toObject && transform)) ***REMOVED***
    var opts = options.json ? this.schema.options.toJSON : this.schema.options.toObject;

    if (opts) ***REMOVED***
      transform = (typeof options.transform === 'function' ? options.transform : opts.transform);
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
    options.transform = originalTransform;
  ***REMOVED***

  if (typeof transform === 'function') ***REMOVED***
    var xformed = transform(this, ret, options);
    if (typeof xformed !== 'undefined') ***REMOVED***
      ret = xformed;
    ***REMOVED***
  ***REMOVED***

  return ret;
***REMOVED***;

/**
 * Converts this document into a plain javascript object, ready for storage in MongoDB.
 *
 * Buffers are converted to instances of [mongodb.Binary](http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html) for proper storage.
 *
 * ####Options:
 *
 * - `getters` apply all getters (path and virtual getters)
 * - `virtuals` apply virtual getters (can override `getters` option)
 * - `minimize` remove empty objects (defaults to true)
 * - `transform` a transform function to apply to the resulting document before returning
 * - `depopulate` depopulate any populated paths, replacing them with their original refs (defaults to false)
 * - `versionKey` whether to include the version key (defaults to true)
 * - `retainKeyOrder` keep the order of object keys. If this is set to true, `Object.keys(new Doc(***REMOVED*** a: 1, b: 2***REMOVED***).toObject())` will always produce `['a', 'b']` (defaults to false)
 *
 * ####Getters/Virtuals
 *
 * Example of only applying path getters
 *
 *     doc.toObject(***REMOVED*** getters: true, virtuals: false ***REMOVED***)
 *
 * Example of only applying virtual getters
 *
 *     doc.toObject(***REMOVED*** virtuals: true ***REMOVED***)
 *
 * Example of applying both path and virtual getters
 *
 *     doc.toObject(***REMOVED*** getters: true ***REMOVED***)
 *
 * To apply these options to every document of your schema by default, set your [schemas](#schema_Schema) `toObject` option to the same argument.
 *
 *     schema.set('toObject', ***REMOVED*** virtuals: true ***REMOVED***)
 *
 * ####Transform
 *
 * We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional `transform` function.
 *
 * Transform functions receive three arguments
 *
 *     function (doc, ret, options) ***REMOVED******REMOVED***
 *
 * - `doc` The mongoose document which is being converted
 * - `ret` The plain object representation which has been converted
 * - `options` The options in use (either schema options or the options passed inline)
 *
 * ####Example
 *
 *     // specify the transform schema option
 *     if (!schema.options.toObject) schema.options.toObject = ***REMOVED******REMOVED***;
 *     schema.options.toObject.transform = function (doc, ret, options) ***REMOVED***
 *       // remove the _id of every document before returning the result
 *       delete ret._id;
 *       return ret;
 *     ***REMOVED***
 *
 *     // without the transformation in the schema
 *     doc.toObject(); // ***REMOVED*** _id: 'anId', name: 'Wreck-it Ralph' ***REMOVED***
 *
 *     // with the transformation
 *     doc.toObject(); // ***REMOVED*** name: 'Wreck-it Ralph' ***REMOVED***
 *
 * With transformations we can do a lot more than remove properties. We can even return completely new customized objects:
 *
 *     if (!schema.options.toObject) schema.options.toObject = ***REMOVED******REMOVED***;
 *     schema.options.toObject.transform = function (doc, ret, options) ***REMOVED***
 *       return ***REMOVED*** movie: ret.name ***REMOVED***
 *     ***REMOVED***
 *
 *     // without the transformation in the schema
 *     doc.toObject(); // ***REMOVED*** _id: 'anId', name: 'Wreck-it Ralph' ***REMOVED***
 *
 *     // with the transformation
 *     doc.toObject(); // ***REMOVED*** movie: 'Wreck-it Ralph' ***REMOVED***
 *
 * _Note: if a transform function returns `undefined`, the return value will be ignored._
 *
 * Transformations may also be applied inline, overridding any transform set in the options:
 *
 *     function xform (doc, ret, options) ***REMOVED***
 *       return ***REMOVED*** inline: ret.name, custom: true ***REMOVED***
 *     ***REMOVED***
 *
 *     // pass the transform as an inline option
 *     doc.toObject(***REMOVED*** transform: xform ***REMOVED***); // ***REMOVED*** inline: 'Wreck-it Ralph', custom: true ***REMOVED***
 *
 * _Note: if you call `toObject` and pass any options, the transform declared in your schema options will __not__ be applied. To force its application pass `transform: true`_
 *
 *     if (!schema.options.toObject) schema.options.toObject = ***REMOVED******REMOVED***;
 *     schema.options.toObject.hide = '_id';
 *     schema.options.toObject.transform = function (doc, ret, options) ***REMOVED***
 *       if (options.hide) ***REMOVED***
 *         options.hide.split(' ').forEach(function (prop) ***REMOVED***
 *           delete ret[prop];
 *         ***REMOVED***);
 *       ***REMOVED***
 *       return ret;
 *     ***REMOVED***
 *
 *     var doc = new Doc(***REMOVED*** _id: 'anId', secret: 47, name: 'Wreck-it Ralph' ***REMOVED***);
 *     doc.toObject();                                        // ***REMOVED*** secret: 47, name: 'Wreck-it Ralph' ***REMOVED***
 *     doc.toObject(***REMOVED*** hide: 'secret _id' ***REMOVED***);                  // ***REMOVED*** _id: 'anId', secret: 47, name: 'Wreck-it Ralph' ***REMOVED***
 *     doc.toObject(***REMOVED*** hide: 'secret _id', transform: true ***REMOVED***); // ***REMOVED*** name: 'Wreck-it Ralph' ***REMOVED***
 *
 * Transforms are applied _only to the document and are not applied to sub-documents_.
 *
 * Transforms, like all of these options, are also available for `toJSON`.
 *
 * See [schema options](/docs/guide.html#toObject) for some more details.
 *
 * _During save, no custom options are applied to the document before being sent to the database._
 *
 * @param ***REMOVED***Object***REMOVED*** [options]
 * @return ***REMOVED***Object***REMOVED*** js object
 * @see mongodb.Binary http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html
 * @api public
 */

Document.prototype.toObject = function(options) ***REMOVED***
  return this.$toObject(options);
***REMOVED***;

/*!
 * Minimizes an object, removing undefined values and empty objects
 *
 * @param ***REMOVED***Object***REMOVED*** object to minimize
 * @return ***REMOVED***Object***REMOVED***
 */

function minimize(obj) ***REMOVED***
  var keys = Object.keys(obj),
      i = keys.length,
      hasKeys,
      key,
      val;

  while (i--) ***REMOVED***
    key = keys[i];
    val = obj[key];

    if (utils.isObject(val) && !Buffer.isBuffer(val)) ***REMOVED***
      obj[key] = minimize(val);
    ***REMOVED***

    if (undefined === obj[key]) ***REMOVED***
      delete obj[key];
      continue;
    ***REMOVED***

    hasKeys = true;
  ***REMOVED***

  return hasKeys
      ? obj
      : undefined;
***REMOVED***

/*!
 * Applies virtuals properties to `json`.
 *
 * @param ***REMOVED***Document***REMOVED*** self
 * @param ***REMOVED***Object***REMOVED*** json
 * @param ***REMOVED***String***REMOVED*** type either `virtuals` or `paths`
 * @return ***REMOVED***Object***REMOVED*** `json`
 */

function applyGetters(self, json, type, options) ***REMOVED***
  var schema = self.schema,
      paths = Object.keys(schema[type]),
      i = paths.length,
      path;

  while (i--) ***REMOVED***
    path = paths[i];

    var parts = path.split('.'),
        plen = parts.length,
        last = plen - 1,
        branch = json,
        part;

    for (var ii = 0; ii < plen; ++ii) ***REMOVED***
      part = parts[ii];
      if (ii === last) ***REMOVED***
        branch[part] = clone(self.get(path), options);
      ***REMOVED*** else ***REMOVED***
        branch = branch[part] || (branch[part] = ***REMOVED******REMOVED***);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  return json;
***REMOVED***

/**
 * The return value of this method is used in calls to JSON.stringify(doc).
 *
 * This method accepts the same options as [Document#toObject](#document_Document-toObject). To apply the options to every document of your schema by default, set your [schemas](#schema_Schema) `toJSON` option to the same argument.
 *
 *     schema.set('toJSON', ***REMOVED*** virtuals: true ***REMOVED***)
 *
 * See [schema options](/docs/guide.html#toJSON) for details.
 *
 * @param ***REMOVED***Object***REMOVED*** options
 * @return ***REMOVED***Object***REMOVED***
 * @see Document#toObject #document_Document-toObject
 * @api public
 */

Document.prototype.toJSON = function(options) ***REMOVED***
  return this.$toObject(options, true);
***REMOVED***;

/**
 * Helper for console.log
 *
 * @api public
 */

Document.prototype.inspect = function(options) ***REMOVED***
  var isPOJO = options &&
    utils.getFunctionName(options.constructor) === 'Object';
  var opts;
  if (isPOJO) ***REMOVED***
    opts = options;
    opts.minimize = false;
    opts.retainKeyOrder = true;
  ***REMOVED***
  return this.toObject(opts);
***REMOVED***;

/**
 * Helper for console.log
 *
 * @api public
 * @method toString
 */

Document.prototype.toString = function() ***REMOVED***
  return inspect(this.inspect());
***REMOVED***;

/**
 * Returns true if the Document stores the same data as doc.
 *
 * Documents are considered equal when they have matching `_id`s, unless neither
 * document has an `_id`, in which case this function falls back to using
 * `deepEqual()`.
 *
 * @param ***REMOVED***Document***REMOVED*** doc a document to compare
 * @return ***REMOVED***Boolean***REMOVED***
 * @api public
 */

Document.prototype.equals = function(doc) ***REMOVED***
  if (!doc) ***REMOVED***
    return false;
  ***REMOVED***

  var tid = this.get('_id');
  var docid = doc.get ? doc.get('_id') : doc;
  if (!tid && !docid) ***REMOVED***
    return deepEqual(this, doc);
  ***REMOVED***
  return tid && tid.equals
      ? tid.equals(docid)
      : tid === docid;
***REMOVED***;

/**
 * Populates document references, executing the `callback` when complete.
 * If you want to use promises instead, use this function with
 * [`execPopulate()`](#document_Document-execPopulate)
 *
 * ####Example:
 *
 *     doc
 *     .populate('company')
 *     .populate(***REMOVED***
 *       path: 'notes',
 *       match: /airline/,
 *       select: 'text',
 *       model: 'modelName'
 *       options: opts
 *     ***REMOVED***, function (err, user) ***REMOVED***
 *       assert(doc._id === user._id) // the document itself is passed
 *     ***REMOVED***)
 *
 *     // summary
 *     doc.populate(path)                   // not executed
 *     doc.populate(options);               // not executed
 *     doc.populate(path, callback)         // executed
 *     doc.populate(options, callback);     // executed
 *     doc.populate(callback);              // executed
 *     doc.populate(options).execPopulate() // executed, returns promise
 *
 *
 * ####NOTE:
 *
 * Population does not occur unless a `callback` is passed *or* you explicitly
 * call `execPopulate()`.
 * Passing the same path a second time will overwrite the previous path options.
 * See [Model.populate()](#model_Model.populate) for explaination of options.
 *
 * @see Model.populate #model_Model.populate
 * @see Document.execPopulate #document_Document-execPopulate
 * @param ***REMOVED***String|Object***REMOVED*** [path] The path to populate or an options object
 * @param ***REMOVED***Function***REMOVED*** [callback] When passed, population is invoked
 * @api public
 * @return ***REMOVED***Document***REMOVED*** this
 */

Document.prototype.populate = function populate() ***REMOVED***
  if (arguments.length === 0) ***REMOVED***
    return this;
  ***REMOVED***

  var pop = this.$__.populate || (this.$__.populate = ***REMOVED******REMOVED***);
  var args = utils.args(arguments);
  var fn;

  if (typeof args[args.length - 1] === 'function') ***REMOVED***
    fn = args.pop();
  ***REMOVED***

  // allow `doc.populate(callback)`
  if (args.length) ***REMOVED***
    // use hash to remove duplicate paths
    var res = utils.populate.apply(null, args);
    for (var i = 0; i < res.length; ++i) ***REMOVED***
      pop[res[i].path] = res[i];
    ***REMOVED***
  ***REMOVED***

  if (fn) ***REMOVED***
    var paths = utils.object.vals(pop);
    this.$__.populate = undefined;
    paths.__noPromise = true;
    this.constructor.populate(this, paths, fn);
  ***REMOVED***

  return this;
***REMOVED***;

/**
 * Explicitly executes population and returns a promise. Useful for ES2015
 * integration.
 *
 * ####Example:
 *
 *     var promise = doc.
 *       populate('company').
 *       populate(***REMOVED***
 *         path: 'notes',
 *         match: /airline/,
 *         select: 'text',
 *         model: 'modelName'
 *         options: opts
 *       ***REMOVED***).
 *       execPopulate();
 *
 *     // summary
 *     doc.execPopulate().then(resolve, reject);
 *
 *
 * @see Document.populate #document_Document-populate
 * @api public
 * @return ***REMOVED***Promise***REMOVED*** promise that resolves to the document when population is done
 */

Document.prototype.execPopulate = function() ***REMOVED***
  var Promise = PromiseProvider.get();
  var _this = this;
  return new Promise.ES6(function(resolve, reject) ***REMOVED***
    _this.populate(function(error, res) ***REMOVED***
      if (error) ***REMOVED***
        reject(error);
      ***REMOVED*** else ***REMOVED***
        resolve(res);
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***;

/**
 * Gets _id(s) used during population of the given `path`.
 *
 * ####Example:
 *
 *     Model.findOne().populate('author').exec(function (err, doc) ***REMOVED***
 *       console.log(doc.author.name)         // Dr.Seuss
 *       console.log(doc.populated('author')) // '5144cf8050f071d979c118a7'
 *     ***REMOVED***)
 *
 * If the path was not populated, undefined is returned.
 *
 * @param ***REMOVED***String***REMOVED*** path
 * @return ***REMOVED***Array|ObjectId|Number|Buffer|String|undefined***REMOVED***
 * @api public
 */

Document.prototype.populated = function(path, val, options) ***REMOVED***
  // val and options are internal

  if (val === null || val === void 0) ***REMOVED***
    if (!this.$__.populated) ***REMOVED***
      return undefined;
    ***REMOVED***
    var v = this.$__.populated[path];
    if (v) ***REMOVED***
      return v.value;
    ***REMOVED***
    return undefined;
  ***REMOVED***

  // internal

  if (val === true) ***REMOVED***
    if (!this.$__.populated) ***REMOVED***
      return undefined;
    ***REMOVED***
    return this.$__.populated[path];
  ***REMOVED***

  this.$__.populated || (this.$__.populated = ***REMOVED******REMOVED***);
  this.$__.populated[path] = ***REMOVED***value: val, options: options***REMOVED***;
  return val;
***REMOVED***;

/**
 * Takes a populated field and returns it to its unpopulated state.
 *
 * ####Example:
 *
 *     Model.findOne().populate('author').exec(function (err, doc) ***REMOVED***
 *       console.log(doc.author.name); // Dr.Seuss
 *       console.log(doc.depopulate('author'));
 *       console.log(doc.author); // '5144cf8050f071d979c118a7'
 *     ***REMOVED***)
 *
 * If the path was not populated, this is a no-op.
 *
 * @param ***REMOVED***String***REMOVED*** path
 * @see Document.populate #document_Document-populate
 * @api public
 */

Document.prototype.depopulate = function(path) ***REMOVED***
  var populatedIds = this.populated(path);
  if (!populatedIds) ***REMOVED***
    return;
  ***REMOVED***
  delete this.$__.populated[path];
  this.set(path, populatedIds);
***REMOVED***;


/**
 * Returns the full path to this document.
 *
 * @param ***REMOVED***String***REMOVED*** [path]
 * @return ***REMOVED***String***REMOVED***
 * @api private
 * @method $__fullPath
 * @memberOf Document
 */

Document.prototype.$__fullPath = function(path) ***REMOVED***
  // overridden in SubDocuments
  return path || '';
***REMOVED***;

/*!
 * Module exports.
 */

Document.ValidationError = ValidationError;
module.exports = exports = Document;
