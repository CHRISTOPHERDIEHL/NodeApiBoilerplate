var ReplSet = require('./lib2/topologies/replset'),
  ReadPreference = require('./lib2/topologies/read_preference');

// Attempt to connect
var server = new ReplSet([***REMOVED***
  host: 'localhost', port: 31000
***REMOVED***, ***REMOVED***
  host: 'localhost', port: 31001
***REMOVED***], ***REMOVED***
  setName: 'rs'
***REMOVED***);

function executeCursors(_server, cb) ***REMOVED***
  var count = 100;

  for(var i = 0; i < 100; i++) ***REMOVED***
    // Execute the write
    var cursor = _server.cursor('test.test', ***REMOVED***
        find: 'test.test'
      , query: ***REMOVED***a:1***REMOVED***
    ***REMOVED***, ***REMOVED***readPreference: new ReadPreference('secondary')***REMOVED***);

    // Get the first document
    cursor.next(function(err, doc) ***REMOVED***
      count = count - 1;
      if(err) console.dir(err)
      if(count == 0) return cb();
    ***REMOVED***);
  ***REMOVED***
***REMOVED***

server.on('connect', function(_server) ***REMOVED***
  console.log("---------------------------------- 0")
  // Attempt authentication
  _server.auth('scram-sha-1', 'admin', 'root', 'root', function(err, r) ***REMOVED***
    console.log("---------------------------------- 1")
    // console.dir(err)
    // console.dir(r)

    _server.insert('test.test', [***REMOVED***a:1***REMOVED***], function(err, r) ***REMOVED***
      console.log("---------------------------------- 2")
      console.dir(err)
      if(r)console.dir(r.result)
      var name = null;

      _server.on('joined', function(_t, _server) ***REMOVED***
        if(name == _server.name) ***REMOVED***
          console.log("=========== joined :: " + _t + " :: " + _server.name)
          executeCursors(_server, function() ***REMOVED***
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***)

      // var s = _server.s.replicaSetState.secondaries[0];
      // s.destroy(***REMOVED***emitClose:true***REMOVED***);
      executeCursors(_server, function() ***REMOVED***
        console.log("============== 0")
        // Attempt to force a server reconnect
        var s = _server.s.replicaSetState.secondaries[0];
        name = s.name;
        s.destroy(***REMOVED***emitClose:true***REMOVED***);
        // console.log("============== 1")

        // _server.destroy();
        // test.done();
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***);

server.connect();
