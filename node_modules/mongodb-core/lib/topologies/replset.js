"use strict"

var inherits = require('util').inherits,
  f = require('util').format,
  EventEmitter = require('events').EventEmitter,
  ReadPreference = require('./read_preference'),
  BasicCursor = require('../cursor'),
  retrieveBSON = require('../connection/utils').retrieveBSON,
  Logger = require('../connection/logger'),
  MongoError = require('../error'),
  Server = require('./server'),
  ReplSetState = require('./replset_state'),
  assign = require('./shared').assign,
  clone = require('./shared').clone,
  createClientInfo = require('./shared').createClientInfo;

var MongoCR = require('../auth/mongocr')
  , X509 = require('../auth/x509')
  , Plain = require('../auth/plain')
  , GSSAPI = require('../auth/gssapi')
  , SSPI = require('../auth/sspi')
  , ScramSHA1 = require('../auth/scram');

var BSON = retrieveBSON();

//
// States
var DISCONNECTED = 'disconnected';
var CONNECTING = 'connecting';
var CONNECTED = 'connected';
var DESTROYED = 'destroyed';

function stateTransition(self, newState) ***REMOVED***
  var legalTransitions = ***REMOVED***
    'disconnected': [CONNECTING, DESTROYED, DISCONNECTED],
    'connecting': [CONNECTING, DESTROYED, CONNECTED, DISCONNECTED],
    'connected': [CONNECTED, DISCONNECTED, DESTROYED],
    'destroyed': [DESTROYED]
  ***REMOVED***

  // Get current state
  var legalStates = legalTransitions[self.state];
  if(legalStates && legalStates.indexOf(newState) != -1) ***REMOVED***
    self.state = newState;
  ***REMOVED*** else ***REMOVED***
    self.logger.error(f('Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]'
      , self.id, self.state, newState, legalStates));
  ***REMOVED***
***REMOVED***

//
// ReplSet instance id
var id = 1;
var handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];

/**
 * Creates a new Replset instance
 * @class
 * @param ***REMOVED***array***REMOVED*** seedlist A list of seeds for the replicaset
 * @param ***REMOVED***boolean***REMOVED*** options.setName The Replicaset set name
 * @param ***REMOVED***boolean***REMOVED*** [options.secondaryOnlyConnectionAllowed=false] Allow connection to a secondary only replicaset
 * @param ***REMOVED***number***REMOVED*** [options.haInterval=10000] The High availability period for replicaset inquiry
 * @param ***REMOVED***boolean***REMOVED*** [options.emitError=false] Server will emit errors events
 * @param ***REMOVED***Cursor***REMOVED*** [options.cursorFactory=Cursor] The cursor factory class used for all query cursors
 * @param ***REMOVED***number***REMOVED*** [options.size=5] Server connection pool size
 * @param ***REMOVED***boolean***REMOVED*** [options.keepAlive=true] TCP Connection keep alive enabled
 * @param ***REMOVED***number***REMOVED*** [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled
 * @param ***REMOVED***boolean***REMOVED*** [options.noDelay=true] TCP Connection no delay
 * @param ***REMOVED***number***REMOVED*** [options.connectionTimeout=10000] TCP Connection timeout setting
 * @param ***REMOVED***number***REMOVED*** [options.socketTimeout=0] TCP Socket timeout setting
 * @param ***REMOVED***boolean***REMOVED*** [options.singleBufferSerializtion=true] Serialize into single buffer, trade of peak memory for serialization speed
 * @param ***REMOVED***boolean***REMOVED*** [options.ssl=false] Use SSL for connection
 * @param ***REMOVED***boolean|function***REMOVED*** [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.
 * @param ***REMOVED***Buffer***REMOVED*** [options.ca] SSL Certificate store binary buffer
 * @param ***REMOVED***Buffer***REMOVED*** [options.cert] SSL Certificate binary buffer
 * @param ***REMOVED***Buffer***REMOVED*** [options.key] SSL Key file binary buffer
 * @param ***REMOVED***string***REMOVED*** [options.passphrase] SSL Certificate pass phrase
 * @param ***REMOVED***string***REMOVED*** [options.servername=null] String containing the server name requested via TLS SNI.
 * @param ***REMOVED***boolean***REMOVED*** [options.rejectUnauthorized=true] Reject unauthorized server certificates
 * @param ***REMOVED***boolean***REMOVED*** [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits
 * @param ***REMOVED***boolean***REMOVED*** [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.
 * @param ***REMOVED***boolean***REMOVED*** [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.
 * @param ***REMOVED***number***REMOVED*** [options.pingInterval=5000] Ping interval to check the response time to the different servers
 * @param ***REMOVED***number***REMOVED*** [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection
 * @param ***REMOVED***boolean***REMOVED*** [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.
 * @return ***REMOVED***ReplSet***REMOVED*** A cursor instance
 * @fires ReplSet#connect
 * @fires ReplSet#ha
 * @fires ReplSet#joined
 * @fires ReplSet#left
 * @fires ReplSet#failed
 * @fires ReplSet#fullsetup
 * @fires ReplSet#all
 * @fires ReplSet#error
 * @fires ReplSet#serverHeartbeatStarted
 * @fires ReplSet#serverHeartbeatSucceeded
 * @fires ReplSet#serverHeartbeatFailed
 * @fires ReplSet#topologyOpening
 * @fires ReplSet#topologyClosed
 * @fires ReplSet#topologyDescriptionChanged
 * @property ***REMOVED***string***REMOVED*** type the topology type.
 * @property ***REMOVED***string***REMOVED*** parserType the parser type used (c++ or js).
 */
var ReplSet = function(seedlist, options) ***REMOVED***
  var self = this;
  options = options || ***REMOVED******REMOVED***;

  // Validate seedlist
  if(!Array.isArray(seedlist)) throw new MongoError("seedlist must be an array");
  // Validate list
  if(seedlist.length == 0) throw new MongoError("seedlist must contain at least one entry");
  // Validate entries
  seedlist.forEach(function(e) ***REMOVED***
    if(typeof e.host != 'string' || typeof e.port != 'number')
      throw new MongoError("seedlist entry must contain a host and port");
  ***REMOVED***);

  // Add event listener
  EventEmitter.call(this);

  // Get replSet Id
  this.id = id++;

  // Get the localThresholdMS
  var localThresholdMS = options.localThresholdMS || 15;
  // Backward compatibility
  if(options.acceptableLatency) localThresholdMS = options.acceptableLatency;

  // Create a logger
  var logger = Logger('ReplSet', options);

  // Internal state
  this.s = ***REMOVED***
    options: assign(***REMOVED******REMOVED***, options),
    // BSON instance
    bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128,
      BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey,
      BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),
    // Factory overrides
    Cursor: options.cursorFactory || BasicCursor,
    // Logger instance
    logger: logger,
    // Seedlist
    seedlist: seedlist,
    // Replicaset state
    replicaSetState: new ReplSetState(***REMOVED***
      id: this.id, setName: options.setName,
      acceptableLatency: localThresholdMS,
      heartbeatFrequencyMS: options.haInterval ? options.haInterval : 10000,
      logger: logger
    ***REMOVED***),
    // Current servers we are connecting to
    connectingServers: [],
    // Ha interval
    haInterval: options.haInterval ? options.haInterval : 10000,
    // Minimum heartbeat frequency used if we detect a server close
    minHeartbeatFrequencyMS: 500,
    // Disconnect handler
    disconnectHandler: options.disconnectHandler,
    // Server selection index
    index: 0,
    // Connect function options passed in
    connectOptions: ***REMOVED******REMOVED***,
    // Are we running in debug mode
    debug: typeof options.debug == 'boolean' ? options.debug : false,
    // Client info
    clientInfo: createClientInfo(options)
  ***REMOVED***

  // Add handler for topology change
  this.s.replicaSetState.on('topologyDescriptionChanged', function(r) ***REMOVED*** self.emit('topologyDescriptionChanged', r); ***REMOVED***);

  // Log info warning if the socketTimeout < haInterval as it will cause
  // a lot of recycled connections to happen.
  if(this.s.logger.isWarn()
    && this.s.options.socketTimeout != 0
    && this.s.options.socketTimeout < this.s.haInterval) ***REMOVED***
      this.s.logger.warn(f('warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts'
        , this.s.options.socketTimeout, this.s.haInterval));
  ***REMOVED***

  // All the authProviders
  this.authProviders = options.authProviders || ***REMOVED***
      'mongocr': new MongoCR(this.s.bson), 'x509': new X509(this.s.bson)
    , 'plain': new Plain(this.s.bson), 'gssapi': new GSSAPI(this.s.bson)
    , 'sspi': new SSPI(this.s.bson), 'scram-sha-1': new ScramSHA1(this.s.bson)
  ***REMOVED***

  // Add forwarding of events from state handler
  var types = ['joined', 'left'];
  types.forEach(function(x) ***REMOVED***
    self.s.replicaSetState.on(x, function(t, s) ***REMOVED***
      if(self.state === CONNECTED && x === 'joined' && t == 'primary') ***REMOVED***
        self.emit('reconnect', self);
      ***REMOVED***

      self.emit(x, t, s);
    ***REMOVED***);
  ***REMOVED***);

  // Connect stat
  this.initialConnectState = ***REMOVED***
    connect: false, fullsetup: false, all: false
  ***REMOVED***

  // Disconnected state
  this.state = DISCONNECTED;
  this.haTimeoutId = null;
  // Are we authenticating
  this.authenticating = false;
  // Last ismaster
  this.ismaster = null;
***REMOVED***

inherits(ReplSet, EventEmitter);

Object.defineProperty(ReplSet.prototype, 'type', ***REMOVED***
  enumerable:true, get: function() ***REMOVED*** return 'replset'; ***REMOVED***
***REMOVED***);

Object.defineProperty(ReplSet.prototype, 'parserType', ***REMOVED***
  enumerable:true, get: function() ***REMOVED***
    return BSON.native ? "c++" : "js";
  ***REMOVED***
***REMOVED***);

function attemptReconnect(self) ***REMOVED***
  if(self.runningAttempReconnect) return;
  // Set as running
  self.runningAttempReconnect = true;
  // Wait before execute
  self.haTimeoutId = setTimeout(function() ***REMOVED***
    if(self.state == DESTROYED) return;

    // Debug log
    if(self.s.logger.isDebug()) ***REMOVED***
      self.s.logger.debug(f('attemptReconnect for replset with id %s', self.id));
    ***REMOVED***

    // Get all known hosts
    var keys = Object.keys(self.s.replicaSetState.set);
    var servers = keys.map(function(x) ***REMOVED***
      return new Server(assign(***REMOVED******REMOVED***, self.s.options, ***REMOVED***
        host: x.split(':')[0], port: parseInt(x.split(':')[1], 10)
      ***REMOVED***, ***REMOVED***
        authProviders: self.authProviders, reconnect:false, monitoring: false, inTopology: true
      ***REMOVED***, ***REMOVED***
        clientInfo: clone(self.s.clientInfo)
      ***REMOVED***));
    ***REMOVED***);

    // Create the list of servers
    self.s.connectingServers = servers.slice(0);

    // Handle all events coming from servers
    function _handleEvent(self, event) ***REMOVED***
      return function() ***REMOVED***
        // Destroy the instance
        if(self.state == DESTROYED) ***REMOVED***
          return this.destroy();
        ***REMOVED***

        // Debug log
        if(self.s.logger.isDebug()) ***REMOVED***
          self.s.logger.debug(f('attemptReconnect for replset with id %s using server %s ended with event %s', self.id, this.name, event));
        ***REMOVED***

        // Check if we are done
        function done() ***REMOVED***
          // Done with the reconnection attempt
          if(self.s.connectingServers.length == 0) ***REMOVED***
            if(self.state == DESTROYED) return;

            // If we have a primary and a disconnect handler, execute
            // buffered operations
            if(self.s.replicaSetState.hasPrimaryAndSecondary() && self.s.disconnectHandler) ***REMOVED***
              self.s.disconnectHandler.execute();
            ***REMOVED*** else if(self.s.replicaSetState.hasPrimary() && self.s.disconnectHandler) ***REMOVED***
              self.s.disconnectHandler.execute(***REMOVED*** executePrimary:true ***REMOVED***);
            ***REMOVED*** else if(self.s.replicaSetState.hasSecondary() && self.s.disconnectHandler) ***REMOVED***
              self.s.disconnectHandler.execute(***REMOVED*** executeSecondary:true ***REMOVED***);
            ***REMOVED***

            // Do we have a primary
            if(self.s.replicaSetState.hasPrimary()) ***REMOVED***
              // Emit reconnect as new primary was discovered
              self.emit('reconnect', self);

              // Connect any missing servers
              connectNewServers(self, self.s.replicaSetState.unknownServers, function() ***REMOVED***
                // Debug log
                if(self.s.logger.isDebug()) ***REMOVED***
                  self.s.logger.debug(f('attemptReconnect for replset with id successful resuming topologyMonitor', self.id));
                ***REMOVED***

                // Reset the running
                self.runningAttempReconnect = false;

                // Go back to normal topology monitoring
                // Schedule a topology monitoring sweep
                setTimeout(function() ***REMOVED***
                  topologyMonitor(self);
                ***REMOVED***, self.s.haInterval);
              ***REMOVED***);
            ***REMOVED*** else ***REMOVED***
              if(self.listeners("close").length > 0) ***REMOVED***
                self.emit('close', self);
              ***REMOVED***

              // Reset the running
              self.runningAttempReconnect = false;
              // Attempt a new reconnect
              attemptReconnect(self);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***

        // Remove the server from our list
        for(var i = 0; i < self.s.connectingServers.length; i++) ***REMOVED***
          if(self.s.connectingServers[i].equals(this)) ***REMOVED***
            self.s.connectingServers.splice(i, 1);
          ***REMOVED***
        ***REMOVED***

        // Keep reference to server
        var _self = this;

        // Debug log
        if(self.s.logger.isDebug()) ***REMOVED***
          self.s.logger.debug(f('attemptReconnect in replset with id %s for', self.id));
        ***REMOVED***

        // Connect and not authenticating
        if(event == 'connect' && !self.authenticating) ***REMOVED***
          if(self.state == DESTROYED) ***REMOVED***
            return _self.destroy();
          ***REMOVED***

          // Update the replicaset state
          if(self.s.replicaSetState.update(_self)) ***REMOVED***
            // Primary lastIsMaster store it
            if(_self.lastIsMaster() && _self.lastIsMaster().ismaster) ***REMOVED***
              self.ismaster = _self.lastIsMaster();
            ***REMOVED***

            // Remove the handlers
            for(i = 0; i < handlers.length; i++) ***REMOVED***
              _self.removeAllListeners(handlers[i]);
            ***REMOVED***

            // Add stable state handlers
            _self.on('error', handleEvent(self, 'error'));
            _self.on('close', handleEvent(self, 'close'));
            _self.on('timeout', handleEvent(self, 'timeout'));
            _self.on('parseError', handleEvent(self, 'parseError'));
          ***REMOVED*** else ***REMOVED***
            _self.destroy();
          ***REMOVED***
        ***REMOVED*** else if(event == 'connect' && self.authenticating) ***REMOVED***
          this.destroy();
        ***REMOVED***

        done();
      ***REMOVED***
    ***REMOVED***

    // Index used to interleaf the server connects, avoiding
    // runtime issues on io constrained vm's
    var timeoutInterval = 0;

    function connect(server, timeoutInterval) ***REMOVED***
      setTimeout(function() ***REMOVED***
        server.once('connect', _handleEvent(self, 'connect'));
        server.once('close', _handleEvent(self, 'close'));
        server.once('timeout', _handleEvent(self, 'timeout'));
        server.once('error', _handleEvent(self, 'error'));
        server.once('parseError', _handleEvent(self, 'parseError'));

        // SDAM Monitoring events
        server.on('serverOpening', function(e) ***REMOVED*** self.emit('serverOpening', e); ***REMOVED***);
        server.on('serverDescriptionChanged', function(e) ***REMOVED*** self.emit('serverDescriptionChanged', e); ***REMOVED***);
        server.on('serverClosed', function(e) ***REMOVED*** self.emit('serverClosed', e); ***REMOVED***);

        server.connect(self.s.connectOptions);
      ***REMOVED***, timeoutInterval);
    ***REMOVED***

    // Connect all servers
    while(servers.length > 0) ***REMOVED***
      connect(servers.shift(), timeoutInterval++);
    ***REMOVED***
  ***REMOVED***, self.s.minHeartbeatFrequencyMS);
***REMOVED***

function connectNewServers(self, servers, callback) ***REMOVED***
  // Count lefts
  var count = servers.length;

  // Handle events
  var _handleEvent = function(self, event) ***REMOVED***
    return function() ***REMOVED***
      var _self = this;
      count = count - 1;

      // Destroyed
      if(self.state == DESTROYED) ***REMOVED***
        return this.destroy();
      ***REMOVED***

      if(event == 'connect' && !self.authenticating) ***REMOVED***
        // Destroyed
        if(self.state == DESTROYED) ***REMOVED***
          return _self.destroy();
        ***REMOVED***

        var result = self.s.replicaSetState.update(_self);
        // Update the state with the new server
        if(result) ***REMOVED***
          // Primary lastIsMaster store it
          if(_self.lastIsMaster() && _self.lastIsMaster().ismaster) ***REMOVED***
            self.ismaster = _self.lastIsMaster();
          ***REMOVED***

          // Remove the handlers
          for(var i = 0; i < handlers.length; i++) ***REMOVED***
            _self.removeAllListeners(handlers[i]);
          ***REMOVED***

          // Add stable state handlers
          _self.on('error', handleEvent(self, 'error'));
          _self.on('close', handleEvent(self, 'close'));
          _self.on('timeout', handleEvent(self, 'timeout'));
          _self.on('parseError', handleEvent(self, 'parseError'));
        ***REMOVED*** else ***REMOVED***
          _self.destroy();
        ***REMOVED***
      ***REMOVED*** else if(event == 'connect' && self.authenticating) ***REMOVED***
        this.destroy();
      ***REMOVED***

      // Are we done finish up callback
      if(count == 0) ***REMOVED*** callback(); ***REMOVED***
    ***REMOVED***
  ***REMOVED***

  // No new servers
  if(count == 0) return callback();

  // Execute method
  function execute(_server, i) ***REMOVED***
    setTimeout(function() ***REMOVED***
      // Destroyed
      if(self.state == DESTROYED) ***REMOVED***
        return;
      ***REMOVED***

      // Create a new server instance
      var server = new Server(assign(***REMOVED******REMOVED***, self.s.options, ***REMOVED***
        host: _server.split(':')[0],
        port: parseInt(_server.split(':')[1], 10)
      ***REMOVED***, ***REMOVED***
        authProviders: self.authProviders, reconnect:false, monitoring: false, inTopology: true
      ***REMOVED***, ***REMOVED***
        clientInfo: clone(self.s.clientInfo)
      ***REMOVED***));

      // Add temp handlers
      server.once('connect', _handleEvent(self, 'connect'));
      server.once('close', _handleEvent(self, 'close'));
      server.once('timeout', _handleEvent(self, 'timeout'));
      server.once('error', _handleEvent(self, 'error'));
      server.once('parseError', _handleEvent(self, 'parseError'));

      // SDAM Monitoring events
      server.on('serverOpening', function(e) ***REMOVED*** self.emit('serverOpening', e); ***REMOVED***);
      server.on('serverDescriptionChanged', function(e) ***REMOVED*** self.emit('serverDescriptionChanged', e); ***REMOVED***);
      server.on('serverClosed', function(e) ***REMOVED*** self.emit('serverClosed', e); ***REMOVED***);
      server.connect(self.s.connectOptions);
    ***REMOVED***, i);
  ***REMOVED***

  // Create new instances
  for(var i = 0; i < servers.length; i++) ***REMOVED***
    execute(servers[i], i);
  ***REMOVED***
***REMOVED***

function topologyMonitor(self, options) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;

  // Set momitoring timeout
  self.haTimeoutId = setTimeout(function() ***REMOVED***
    if(self.state == DESTROYED) return;

    // Is this a on connect topology discovery
    // Schedule a proper topology monitoring to happen
    // To ensure any discovered servers do not timeout
    // while waiting for the initial discovery to happen.
    if(options.haInterval) ***REMOVED***
      topologyMonitor(self);
    ***REMOVED***

    // If we have a primary and a disconnect handler, execute
    // buffered operations
    if(self.s.replicaSetState.hasPrimaryAndSecondary() && self.s.disconnectHandler) ***REMOVED***
      self.s.disconnectHandler.execute();
    ***REMOVED*** else if(self.s.replicaSetState.hasPrimary() && self.s.disconnectHandler) ***REMOVED***
      self.s.disconnectHandler.execute(***REMOVED*** executePrimary:true ***REMOVED***);
    ***REMOVED*** else if(self.s.replicaSetState.hasSecondary() && self.s.disconnectHandler) ***REMOVED***
      self.s.disconnectHandler.execute(***REMOVED*** executeSecondary:true ***REMOVED***);
    ***REMOVED***

    // Get the connectingServers
    var connectingServers = self.s.replicaSetState.allServers();
    // Debug log
    if(self.s.logger.isDebug()) ***REMOVED***
      self.s.logger.debug(f('topologyMonitor in replset with id %s connected servers [%s]'
        , self.id
        , connectingServers.map(function(x) ***REMOVED***
          return x.name;
        ***REMOVED***)));
    ***REMOVED***
    // Get the count
    var count = connectingServers.length;

    // If we have no servers connected
    if(count == 0 && !options.haInterval) ***REMOVED***
      if(self.listeners("close").length > 0) ***REMOVED***
        self.emit('close', self);
      ***REMOVED***

      return attemptReconnect(self);
    ***REMOVED***

    // If the count is zero schedule a new fast
    function pingServer(_self, _server, cb) ***REMOVED***
      // Measure running time
      var start = new Date().getTime();

      // Emit the server heartbeat start
      emitSDAMEvent(self, 'serverHeartbeatStarted', ***REMOVED*** connectionId: _server.name ***REMOVED***);
      // Execute ismaster
      // Set the socketTimeout for a monitoring message to a low number
      // Ensuring ismaster calls are timed out quickly
      _server.command('admin.$cmd', ***REMOVED***
        ismaster:true
      ***REMOVED***, ***REMOVED***
        monitoring: true,
        socketTimeout: self.s.options.connectionTimeout || 2000,
      ***REMOVED***, function(err, r) ***REMOVED***
        if(self.state == DESTROYED) ***REMOVED***
          _server.destroy();
          return cb(err, r);
        ***REMOVED***

        // Calculate latency
        var latencyMS = new Date().getTime() - start;

        // Set the last updatedTime
        var hrTime = process.hrtime();
        // Calculate the last update time
        _server.lastUpdateTime = hrTime[0] * 1000 + Math.round(hrTime[1]/1000);

        // We had an error, remove it from the state
        if(err) ***REMOVED***
          // Emit the server heartbeat failure
          emitSDAMEvent(self, 'serverHeartbeatFailed', ***REMOVED*** durationMS: latencyMS, failure: err, connectionId: _server.name ***REMOVED***);
          // Remove server from the state
          _self.s.replicaSetState.remove(_server);
        ***REMOVED*** else ***REMOVED***
          // Update the server ismaster
          _server.ismaster = r.result;

          // Check if we have a lastWriteDate convert it to MS
          // and store on the server instance for later use
          if(_server.ismaster.lastWrite && _server.ismaster.lastWrite.lastWriteDate) ***REMOVED***
            _server.lastWriteDate = _server.ismaster.lastWrite.lastWriteDate.getTime();
          ***REMOVED***

          // Do we have a brand new server
          if(_server.lastIsMasterMS == -1) ***REMOVED***
            _server.lastIsMasterMS = latencyMS;
          ***REMOVED*** else if(_server.lastIsMasterMS) ***REMOVED***
            // After the first measurement, average RTT MUST be computed using an
            // exponentially-weighted moving average formula, with a weighting factor (alpha) of 0.2.
            // If the prior average is denoted old_rtt, then the new average (new_rtt) is
            // computed from a new RTT measurement (x) using the following formula:
            // alpha = 0.2
            // new_rtt = alpha * x + (1 - alpha) * old_rtt
            _server.lastIsMasterMS = 0.2 * latencyMS + (1 - 0.2) * _server.lastIsMasterMS;
          ***REMOVED***

          if(_self.s.replicaSetState.update(_server)) ***REMOVED***
            // Primary lastIsMaster store it
            if(_server.lastIsMaster() && _server.lastIsMaster().ismaster) ***REMOVED***
              self.ismaster = _server.lastIsMaster();
            ***REMOVED***
          ***REMOVED***

          // Server heart beat event
          emitSDAMEvent(self, 'serverHeartbeatSucceeded', ***REMOVED*** durationMS: latencyMS, reply: r.result, connectionId: _server.name ***REMOVED***);
        ***REMOVED***

        // Calculate the stalness for this server
        self.s.replicaSetState.updateServerMaxStaleness(_server, self.s.haInterval);

        // Callback
        cb(err, r);
      ***REMOVED***);
    ***REMOVED***

    // Connect any missing servers
    function connectMissingServers() ***REMOVED***
      if(self.state == DESTROYED) return;

      // Attempt to connect to any unknown servers
      connectNewServers(self, self.s.replicaSetState.unknownServers, function() ***REMOVED***
        if(self.state == DESTROYED) return;

        // Check if we have an options.haInterval (meaning it was triggered from connect)
        if(options.haInterval) ***REMOVED***
          // Do we have a primary and secondary
          if(self.state == CONNECTING
            && self.s.replicaSetState.hasPrimaryAndSecondary()) ***REMOVED***
            // Transition to connected
            stateTransition(self, CONNECTED);
            // Update initial state
            self.initialConnectState.connect = true;
            self.initialConnectState.fullsetup = true;
            self.initialConnectState.all = true;
            // Emit fullsetup and all events
            process.nextTick(function() ***REMOVED***
              self.emit('connect', self);
              self.emit('fullsetup', self);
              self.emit('all', self);
            ***REMOVED***);
          ***REMOVED*** else if(self.state == CONNECTING
            && self.s.replicaSetState.hasPrimary()) ***REMOVED***
              // Transition to connected
              stateTransition(self, CONNECTED);
              // Update initial state
              self.initialConnectState.connect = true;
              // Emit connected sign
              process.nextTick(function() ***REMOVED***
                self.emit('connect', self);
              ***REMOVED***);
          ***REMOVED*** else if(self.state == CONNECTING
            && self.s.replicaSetState.hasSecondary()
            && self.s.options.secondaryOnlyConnectionAllowed) ***REMOVED***
              // Transition to connected
              stateTransition(self, CONNECTED);
              // Update initial state
              self.initialConnectState.connect = true;
              // Emit connected sign
              process.nextTick(function() ***REMOVED***
                self.emit('connect', self);
              ***REMOVED***);
          ***REMOVED*** else if(self.state == CONNECTING) ***REMOVED***
            self.emit('error', new MongoError('no primary found in replicaset'));
            // Destroy the topology
            return self.destroy();
          ***REMOVED*** else if(self.state == CONNECTED
            && self.s.replicaSetState.hasPrimaryAndSecondary()
            && !self.initialConnectState.fullsetup) ***REMOVED***
              self.initialConnectState.fullsetup = true;
            // Emit fullsetup and all events
            process.nextTick(function() ***REMOVED***
              self.emit('fullsetup', self);
              self.emit('all', self);
            ***REMOVED***);
          ***REMOVED***
        ***REMOVED***

        if(!options.haInterval) topologyMonitor(self);
      ***REMOVED***);
    ***REMOVED***

    // No connectingServers but unknown servers
    if(connectingServers.length == 0
      && self.s.replicaSetState.unknownServers.length > 0 && options.haInterval) ***REMOVED***
        return connectMissingServers();
    ***REMOVED*** else if(connectingServers.length == 0 && options.haInterval) ***REMOVED***
      self.destroy();
      return self.emit('error', new MongoError('no valid replicaset members found'));
    ***REMOVED***

    // Ping all servers
    for(var i = 0; i < connectingServers.length; i++) ***REMOVED***
      pingServer(self, connectingServers[i], function() ***REMOVED***
        count = count - 1;

        if(count == 0) ***REMOVED***
          connectMissingServers();
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED***, options.haInterval || self.s.haInterval)
***REMOVED***

function handleEvent(self, event) ***REMOVED***
  return function() ***REMOVED***
    if(self.state == DESTROYED) return;
    // Debug log
    if(self.s.logger.isDebug()) ***REMOVED***
      self.s.logger.debug(f('handleEvent %s from server %s in replset with id %s', event, this.name, self.id));
    ***REMOVED***

    self.s.replicaSetState.remove(this);
  ***REMOVED***
***REMOVED***

function handleInitialConnectEvent(self, event) ***REMOVED***
  return function() ***REMOVED***
    // Debug log
    if(self.s.logger.isDebug()) ***REMOVED***
      self.s.logger.debug(f('handleInitialConnectEvent %s from server %s in replset with id %s', event, this.name, self.id));
    ***REMOVED***

    // Destroy the instance
    if(self.state == DESTROYED) ***REMOVED***
      return this.destroy();
    ***REMOVED***

    // Check the type of server
    if(event == 'connect') ***REMOVED***
      // Update the state
      var result = self.s.replicaSetState.update(this);
      if(result == true) ***REMOVED***
        // Primary lastIsMaster store it
        if(this.lastIsMaster() && this.lastIsMaster().ismaster) ***REMOVED***
          self.ismaster = this.lastIsMaster();
        ***REMOVED***

        // Debug log
        if(self.s.logger.isDebug()) ***REMOVED***
          self.s.logger.debug(f('handleInitialConnectEvent %s from server %s in replset with id %s has state [%s]', event, this.name, self.id, JSON.stringify(self.s.replicaSetState.set)));
        ***REMOVED***

        // Remove the handlers
        for(var i = 0; i < handlers.length; i++) ***REMOVED***
          this.removeAllListeners(handlers[i]);
        ***REMOVED***

        // Add stable state handlers
        this.on('error', handleEvent(self, 'error'));
        this.on('close', handleEvent(self, 'close'));
        this.on('timeout', handleEvent(self, 'timeout'));
        this.on('parseError', handleEvent(self, 'parseError'));
      ***REMOVED*** else if(result instanceof MongoError) ***REMOVED***
        this.destroy();
        self.destroy();
        return self.emit('error', result);
      ***REMOVED*** else ***REMOVED***
        this.destroy();
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      // Emit failure to connect
      self.emit('failed', this);
      // Remove from the state
      self.s.replicaSetState.remove(this);
    ***REMOVED***

    // Remove from the list from connectingServers
    for(i = 0; i < self.s.connectingServers.length; i++) ***REMOVED***
      if(self.s.connectingServers[i].equals(this)) ***REMOVED***
        self.s.connectingServers.splice(i, 1);
      ***REMOVED***
    ***REMOVED***

    // Trigger topologyMonitor
    if(self.s.connectingServers.length == 0) ***REMOVED***
      topologyMonitor(self, ***REMOVED***haInterval: 1***REMOVED***);
    ***REMOVED***
  ***REMOVED***;
***REMOVED***

function connectServers(self, servers) ***REMOVED***
  // Update connectingServers
  self.s.connectingServers = self.s.connectingServers.concat(servers);

  // Index used to interleaf the server connects, avoiding
  // runtime issues on io constrained vm's
  var timeoutInterval = 0;

  function connect(server, timeoutInterval) ***REMOVED***
    setTimeout(function() ***REMOVED***
      // Add the server to the state
      if(self.s.replicaSetState.update(server)) ***REMOVED***
        // Primary lastIsMaster store it
        if(server.lastIsMaster() && server.lastIsMaster().ismaster) ***REMOVED***
          self.ismaster = server.lastIsMaster();
        ***REMOVED***
      ***REMOVED***

      // Add event handlers
      server.once('close', handleInitialConnectEvent(self, 'close'));
      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));
      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));
      server.once('error', handleInitialConnectEvent(self, 'error'));
      server.once('connect', handleInitialConnectEvent(self, 'connect'));
      // SDAM Monitoring events
      server.on('serverOpening', function(e) ***REMOVED*** self.emit('serverOpening', e); ***REMOVED***);
      server.on('serverDescriptionChanged', function(e) ***REMOVED*** self.emit('serverDescriptionChanged', e); ***REMOVED***);
      server.on('serverClosed', function(e) ***REMOVED*** self.emit('serverClosed', e); ***REMOVED***);
      // Start connection
      server.connect(self.s.connectOptions);
    ***REMOVED***, timeoutInterval);
  ***REMOVED***

  // Start all the servers
  while(servers.length > 0) ***REMOVED***
    connect(servers.shift(), timeoutInterval++);
  ***REMOVED***
***REMOVED***

/**
 * Emit event if it exists
 * @method
 */
function emitSDAMEvent(self, event, description) ***REMOVED***
  if(self.listeners(event).length > 0) ***REMOVED***
    self.emit(event, description);
  ***REMOVED***
***REMOVED***

/**
 * Initiate server connect
 * @method
 * @param ***REMOVED***array***REMOVED*** [options.auth=null] Array of auth options to apply on connect
 */
ReplSet.prototype.connect = function(options) ***REMOVED***
  var self = this;
  // Add any connect level options to the internal state
  this.s.connectOptions = options || ***REMOVED******REMOVED***;
  // Set connecting state
  stateTransition(this, CONNECTING);
  // Create server instances
  var servers = this.s.seedlist.map(function(x) ***REMOVED***
    return new Server(assign(***REMOVED******REMOVED***, self.s.options, x, ***REMOVED***
      authProviders: self.authProviders, reconnect:false, monitoring:false, inTopology: true
    ***REMOVED***, ***REMOVED***
      clientInfo: clone(self.s.clientInfo)
    ***REMOVED***));
  ***REMOVED***);

  // Error out as high availbility interval must be < than socketTimeout
  if(this.s.options.socketTimeout > 0 && this.s.options.socketTimeout <= this.s.options.haInterval) ***REMOVED***
    return self.emit('error', new MongoError(f("haInterval [%s] MS must be set to less than socketTimeout [%s] MS"
      , this.s.options.haInterval, this.s.options.socketTimeout)));
  ***REMOVED***

  // Emit the topology opening event
  emitSDAMEvent(this, 'topologyOpening', ***REMOVED*** topologyId: this.id ***REMOVED***);
  // Start all server connections
  connectServers(self, servers);
***REMOVED***

/**
 * Destroy the server connection
 * @param ***REMOVED***boolean***REMOVED*** [options.force=false] Force destroy the pool
 * @method
 */
ReplSet.prototype.destroy = function(options) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;
  // Transition state
  stateTransition(this, DESTROYED);
  // Clear out any monitoring process
  if(this.haTimeoutId) clearTimeout(this.haTimeoutId);
  // Destroy the replicaset
  this.s.replicaSetState.destroy(options);

  // Destroy all connecting servers
  this.s.connectingServers.forEach(function(x) ***REMOVED***
    x.destroy(options);
  ***REMOVED***);

  // Emit toplogy closing event
  emitSDAMEvent(this, 'topologyClosed', ***REMOVED*** topologyId: this.id ***REMOVED***);
***REMOVED***

/**
 * Unref all connections belong to this server
 * @method
 */
ReplSet.prototype.unref = function() ***REMOVED***
  // Transition state
  stateTransition(this, DISCONNECTED);

  this.s.replicaSetState.allServers().forEach(function(x) ***REMOVED***
    x.unref();
  ***REMOVED***);

  clearTimeout(this.haTimeoutId);
***REMOVED***

/**
 * Returns the last known ismaster document for this server
 * @method
 * @return ***REMOVED***object***REMOVED***
 */
ReplSet.prototype.lastIsMaster = function() ***REMOVED***
  return this.s.replicaSetState.primary
    ? this.s.replicaSetState.primary.lastIsMaster() : this.ismaster;
***REMOVED***

/**
 * All raw connections
 * @method
 * @return ***REMOVED***Connection[]***REMOVED***
 */
ReplSet.prototype.connections = function() ***REMOVED***
  var servers = this.s.replicaSetState.allServers();
  var connections = [];
  for(var i = 0; i < servers.length; i++) ***REMOVED***
    connections = connections.concat(servers[i].connections());
  ***REMOVED***

  return connections;
***REMOVED***

/**
 * Figure out if the server is connected
 * @method
 * @param ***REMOVED***ReadPreference***REMOVED*** [options.readPreference] Specify read preference if command supports it
 * @return ***REMOVED***boolean***REMOVED***
 */
ReplSet.prototype.isConnected = function(options) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;

  // If we are authenticating signal not connected
  // To avoid interleaving of operations
  if(this.authenticating) return false;

  // If we specified a read preference check if we are connected to something
  // than can satisfy this
  if(options.readPreference
    && options.readPreference.equals(ReadPreference.secondary)) ***REMOVED***
    return this.s.replicaSetState.hasSecondary();
  ***REMOVED***

  if(options.readPreference
    && options.readPreference.equals(ReadPreference.primary)) ***REMOVED***
    return this.s.replicaSetState.hasPrimary();
  ***REMOVED***

  if(options.readPreference
    && options.readPreference.equals(ReadPreference.primaryPreferred)) ***REMOVED***
    return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();
  ***REMOVED***

  if(options.readPreference
    && options.readPreference.equals(ReadPreference.secondaryPreferred)) ***REMOVED***
    return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();
  ***REMOVED***

  if(this.s.secondaryOnlyConnectionAllowed
    && this.s.replicaSetState.hasSecondary()) ***REMOVED***
      return true;
  ***REMOVED***

  return this.s.replicaSetState.hasPrimary();
***REMOVED***

/**
 * Figure out if the replicaset instance was destroyed by calling destroy
 * @method
 * @return ***REMOVED***boolean***REMOVED***
 */
ReplSet.prototype.isDestroyed = function() ***REMOVED***
  return this.state == DESTROYED;
***REMOVED***

/**
 * Get server
 * @method
 * @param ***REMOVED***ReadPreference***REMOVED*** [options.readPreference] Specify read preference if command supports it
 * @return ***REMOVED***Server***REMOVED***
 */
ReplSet.prototype.getServer = function(options) ***REMOVED***
  // Ensure we have no options
  options = options || ***REMOVED******REMOVED***;

  // Pick the right server baspickServerd on readPreference
  var server = this.s.replicaSetState.pickServer(options.readPreference);
  if(this.s.debug) this.emit('pickedServer', options.readPreference, server);
  return server;
***REMOVED***

/**
 * Get all connected servers
 * @method
 * @return ***REMOVED***Server[]***REMOVED***
 */
ReplSet.prototype.getServers = function() ***REMOVED***
  return this.s.replicaSetState.allServers();
***REMOVED***

//
// Execute write operation
var executeWriteOperation = function(self, op, ns, ops, options, callback) ***REMOVED***
  if(typeof options == 'function') callback = options, options = ***REMOVED******REMOVED***, options = options || ***REMOVED******REMOVED***;
  // Ensure we have no options
  options = options || ***REMOVED******REMOVED***;

  // No server returned we had an error
  if(self.s.replicaSetState.primary == null) ***REMOVED***
    return callback(new MongoError("no primary server found"));
  ***REMOVED***

  // Execute the command
  self.s.replicaSetState.primary[op](ns, ops, options, callback);
***REMOVED***

/**
 * Insert one or more documents
 * @method
 * @param ***REMOVED***string***REMOVED*** ns The MongoDB fully qualified namespace (ex: db1.collection1)
 * @param ***REMOVED***array***REMOVED*** ops An array of documents to insert
 * @param ***REMOVED***boolean***REMOVED*** [options.ordered=true] Execute in order or out of order
 * @param ***REMOVED***object***REMOVED*** [options.writeConcern=***REMOVED******REMOVED***] Write concern for the operation
 * @param ***REMOVED***Boolean***REMOVED*** [options.serializeFunctions=false] Specify if functions on an object should be serialized.
 * @param ***REMOVED***Boolean***REMOVED*** [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
 * @param ***REMOVED***opResultCallback***REMOVED*** callback A callback function
 */
ReplSet.prototype.insert = function(ns, ops, options, callback) ***REMOVED***
  if(typeof options == 'function') callback = options, options = ***REMOVED******REMOVED***, options = options || ***REMOVED******REMOVED***;
  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));

  // Not connected but we have a disconnecthandler
  if(!this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) ***REMOVED***
    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);
  ***REMOVED***

  // Execute write operation
  executeWriteOperation(this, 'insert', ns, ops, options, callback);
***REMOVED***

/**
 * Perform one or more update operations
 * @method
 * @param ***REMOVED***string***REMOVED*** ns The MongoDB fully qualified namespace (ex: db1.collection1)
 * @param ***REMOVED***array***REMOVED*** ops An array of updates
 * @param ***REMOVED***boolean***REMOVED*** [options.ordered=true] Execute in order or out of order
 * @param ***REMOVED***object***REMOVED*** [options.writeConcern=***REMOVED******REMOVED***] Write concern for the operation
 * @param ***REMOVED***Boolean***REMOVED*** [options.serializeFunctions=false] Specify if functions on an object should be serialized.
 * @param ***REMOVED***Boolean***REMOVED*** [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
 * @param ***REMOVED***opResultCallback***REMOVED*** callback A callback function
 */
ReplSet.prototype.update = function(ns, ops, options, callback) ***REMOVED***
  if(typeof options == 'function') callback = options, options = ***REMOVED******REMOVED***, options = options || ***REMOVED******REMOVED***;
  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));

  // Not connected but we have a disconnecthandler
  if(!this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) ***REMOVED***
    return this.s.disconnectHandler.add('update', ns, ops, options, callback);
  ***REMOVED***

  // Execute write operation
  executeWriteOperation(this, 'update', ns, ops, options, callback);
***REMOVED***

/**
 * Perform one or more remove operations
 * @method
 * @param ***REMOVED***string***REMOVED*** ns The MongoDB fully qualified namespace (ex: db1.collection1)
 * @param ***REMOVED***array***REMOVED*** ops An array of removes
 * @param ***REMOVED***boolean***REMOVED*** [options.ordered=true] Execute in order or out of order
 * @param ***REMOVED***object***REMOVED*** [options.writeConcern=***REMOVED******REMOVED***] Write concern for the operation
 * @param ***REMOVED***Boolean***REMOVED*** [options.serializeFunctions=false] Specify if functions on an object should be serialized.
 * @param ***REMOVED***Boolean***REMOVED*** [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
 * @param ***REMOVED***opResultCallback***REMOVED*** callback A callback function
 */
ReplSet.prototype.remove = function(ns, ops, options, callback) ***REMOVED***
  if(typeof options == 'function') callback = options, options = ***REMOVED******REMOVED***, options = options || ***REMOVED******REMOVED***;
  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));

  // Not connected but we have a disconnecthandler
  if(!this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) ***REMOVED***
    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);
  ***REMOVED***

  // Execute write operation
  executeWriteOperation(this, 'remove', ns, ops, options, callback);
***REMOVED***

/**
 * Execute a command
 * @method
 * @param ***REMOVED***string***REMOVED*** ns The MongoDB fully qualified namespace (ex: db1.collection1)
 * @param ***REMOVED***object***REMOVED*** cmd The command hash
 * @param ***REMOVED***ReadPreference***REMOVED*** [options.readPreference] Specify read preference if command supports it
 * @param ***REMOVED***Connection***REMOVED*** [options.connection] Specify connection object to execute command against
 * @param ***REMOVED***Boolean***REMOVED*** [options.serializeFunctions=false] Specify if functions on an object should be serialized.
 * @param ***REMOVED***Boolean***REMOVED*** [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
 * @param ***REMOVED***opResultCallback***REMOVED*** callback A callback function
 */
ReplSet.prototype.command = function(ns, cmd, options, callback) ***REMOVED***
  if(typeof options == 'function') callback = options, options = ***REMOVED******REMOVED***, options = options || ***REMOVED******REMOVED***;
  if(this.state == DESTROYED) return callback(new MongoError(f('topology was destroyed')));
  var self = this;

  // Establish readPreference
  var readPreference = options.readPreference ? options.readPreference : ReadPreference.primary;

  // If the readPreference is primary and we have no primary, store it
  if(readPreference.preference == 'primary' && !this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) ***REMOVED***
    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);
  ***REMOVED*** else if(readPreference.preference == 'secondary' && !this.s.replicaSetState.hasSecondary() && this.s.disconnectHandler != null) ***REMOVED***
    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);
  ***REMOVED*** else if(readPreference.preference != 'primary' && !this.s.replicaSetState.hasSecondary() && !this.s.replicaSetState.hasPrimary() && this.s.disconnectHandler != null) ***REMOVED***
    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);
  ***REMOVED***

  // Pick a server
  var server = this.s.replicaSetState.pickServer(readPreference);
  // We received an error, return it
  if(!(server instanceof Server)) return callback(server);
  // Emit debug event
  if(self.s.debug) self.emit('pickedServer', ReadPreference.primary, server);

  // No server returned we had an error
  if(server == null) ***REMOVED***
    return callback(new MongoError(f("no server found that matches the provided readPreference %s", readPreference)));
  ***REMOVED***

  // Execute the command
  server.command(ns, cmd, options, callback);
***REMOVED***

/**
 * Authenticate using a specified mechanism
 * @method
 * @param ***REMOVED***string***REMOVED*** mechanism The Auth mechanism we are invoking
 * @param ***REMOVED***string***REMOVED*** db The db we are invoking the mechanism against
 * @param ***REMOVED***...object***REMOVED*** param Parameters for the specific mechanism
 * @param ***REMOVED***authResultCallback***REMOVED*** callback A callback function
 */
ReplSet.prototype.auth = function(mechanism, db) ***REMOVED***
  var allArgs = Array.prototype.slice.call(arguments, 0).slice(0);
  var self = this;
  var args = Array.prototype.slice.call(arguments, 2);
  var callback = args.pop();

  // If we don't have the mechanism fail
  if(this.authProviders[mechanism] == null && mechanism != 'default') ***REMOVED***
    return callback(new MongoError(f("auth provider %s does not exist", mechanism)));
  ***REMOVED***

  // Are we already authenticating, throw
  if(this.authenticating) ***REMOVED***
    return callback(new MongoError('authentication or logout allready in process'));
  ***REMOVED***

  // Topology is not connected, save the call in the provided store to be
  // Executed at some point when the handler deems it's reconnected
  if(!self.s.replicaSetState.hasPrimary() && self.s.disconnectHandler != null) ***REMOVED***
    return self.s.disconnectHandler.add('auth', db, allArgs, ***REMOVED******REMOVED***, callback);
  ***REMOVED***

  // Set to authenticating
  this.authenticating = true;
  // All errors
  var errors = [];

  // Get all the servers
  var servers = this.s.replicaSetState.allServers();
  // No servers return
  if(servers.length == 0) ***REMOVED***
    this.authenticating = false;
    callback(null, true);
  ***REMOVED***

  // Authenticate
  function auth(server) ***REMOVED***
    // Arguments without a callback
    var argsWithoutCallback = [mechanism, db].concat(args.slice(0));
    // Create arguments
    var finalArguments = argsWithoutCallback.concat([function(err) ***REMOVED***
      count = count - 1;
      // Save all the errors
      if(err) errors.push(***REMOVED***name: server.name, err: err***REMOVED***);
      // We are done
      if(count == 0) ***REMOVED***
        // Auth is done
        self.authenticating = false;

        // Return the auth error
        if(errors.length) return callback(MongoError.create(***REMOVED***
          message: 'authentication fail', errors: errors
        ***REMOVED***), false);

        // Successfully authenticated session
        callback(null, self);
      ***REMOVED***
    ***REMOVED***]);

    if(!server.lastIsMaster().arbiterOnly) ***REMOVED***
      // Execute the auth only against non arbiter servers
      server.auth.apply(server, finalArguments);
    ***REMOVED*** else ***REMOVED***
      // If we are authenticating against an arbiter just ignore it
      finalArguments.pop()(null);
    ***REMOVED***
  ***REMOVED***

  // Get total count
  var count = servers.length;
  // Authenticate against all servers
  while(servers.length > 0) ***REMOVED***
    auth(servers.shift());
  ***REMOVED***
***REMOVED***

/**
 * Logout from a database
 * @method
 * @param ***REMOVED***string***REMOVED*** db The db we are logging out from
 * @param ***REMOVED***authResultCallback***REMOVED*** callback A callback function
 */
ReplSet.prototype.logout = function(dbName, callback) ***REMOVED***
  var self = this;
  // Are we authenticating or logging out, throw
  if(this.authenticating) ***REMOVED***
    throw new MongoError('authentication or logout allready in process');
  ***REMOVED***

  // Ensure no new members are processed while logging out
  this.authenticating = true;

  // Remove from all auth providers (avoid any reaplication of the auth details)
  var providers = Object.keys(this.authProviders);
  for(var i = 0; i < providers.length; i++) ***REMOVED***
    this.authProviders[providers[i]].logout(dbName);
  ***REMOVED***

  // Now logout all the servers
  var servers = this.s.replicaSetState.allServers();
  var count = servers.length;
  if(count == 0) return callback();
  var errors = [];

  function logoutServer(_server, cb) ***REMOVED***
    _server.logout(dbName, function(err) ***REMOVED***
      if(err) errors.push(***REMOVED***name: _server.name, err: err***REMOVED***);
      cb();
    ***REMOVED***);
  ***REMOVED***

  // Execute logout on all server instances
  for(i = 0; i < servers.length; i++) ***REMOVED***
    logoutServer(servers[i], function() ***REMOVED***
      count = count - 1;

      if(count == 0) ***REMOVED***
        // Do not block new operations
        self.authenticating = false;
        // If we have one or more errors
        if(errors.length) return callback(MongoError.create(***REMOVED***
          message: f('logout failed against db %s', dbName), errors: errors
        ***REMOVED***), false);

        // No errors
        callback();
      ***REMOVED***
    ***REMOVED***)
  ***REMOVED***
***REMOVED***

/**
 * Perform one or more remove operations
 * @method
 * @param ***REMOVED***string***REMOVED*** ns The MongoDB fully qualified namespace (ex: db1.collection1)
 * @param ***REMOVED******REMOVED***object***REMOVED***|***REMOVED***Long***REMOVED******REMOVED*** cmd Can be either a command returning a cursor or a cursorId
 * @param ***REMOVED***object***REMOVED*** [options.batchSize=0] Batchsize for the operation
 * @param ***REMOVED***array***REMOVED*** [options.documents=[]] Initial documents list for cursor
 * @param ***REMOVED***ReadPreference***REMOVED*** [options.readPreference] Specify read preference if command supports it
 * @param ***REMOVED***Boolean***REMOVED*** [options.serializeFunctions=false] Specify if functions on an object should be serialized.
 * @param ***REMOVED***Boolean***REMOVED*** [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.
 * @param ***REMOVED***opResultCallback***REMOVED*** callback A callback function
 */
ReplSet.prototype.cursor = function(ns, cmd, cursorOptions) ***REMOVED***
  cursorOptions = cursorOptions || ***REMOVED******REMOVED***;
  var FinalCursor = cursorOptions.cursorFactory || this.s.Cursor;
  return new FinalCursor(this.s.bson, ns, cmd, cursorOptions, this, this.s.options);
***REMOVED***

/**
 * A replset connect event, used to verify that the connection is up and running
 *
 * @event ReplSet#connect
 * @type ***REMOVED***ReplSet***REMOVED***
 */

/**
 * A replset reconnect event, used to verify that the topology reconnected
 *
 * @event ReplSet#reconnect
 * @type ***REMOVED***ReplSet***REMOVED***
 */

/**
 * A replset fullsetup event, used to signal that all topology members have been contacted.
 *
 * @event ReplSet#fullsetup
 * @type ***REMOVED***ReplSet***REMOVED***
 */

/**
 * A replset all event, used to signal that all topology members have been contacted.
 *
 * @event ReplSet#all
 * @type ***REMOVED***ReplSet***REMOVED***
 */

/**
 * A replset failed event, used to signal that initial replset connection failed.
 *
 * @event ReplSet#failed
 * @type ***REMOVED***ReplSet***REMOVED***
 */

/**
 * A server member left the replicaset
 *
 * @event ReplSet#left
 * @type ***REMOVED***function***REMOVED***
 * @param ***REMOVED***string***REMOVED*** type The type of member that left (primary|secondary|arbiter)
 * @param ***REMOVED***Server***REMOVED*** server The server object that left
 */

/**
 * A server member joined the replicaset
 *
 * @event ReplSet#joined
 * @type ***REMOVED***function***REMOVED***
 * @param ***REMOVED***string***REMOVED*** type The type of member that joined (primary|secondary|arbiter)
 * @param ***REMOVED***Server***REMOVED*** server The server object that joined
 */

/**
 * A server opening SDAM monitoring event
 *
 * @event ReplSet#serverOpening
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A server closed SDAM monitoring event
 *
 * @event ReplSet#serverClosed
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A server description SDAM change monitoring event
 *
 * @event ReplSet#serverDescriptionChanged
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A topology open SDAM event
 *
 * @event ReplSet#topologyOpening
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A topology closed SDAM event
 *
 * @event ReplSet#topologyClosed
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A topology structure SDAM change event
 *
 * @event ReplSet#topologyDescriptionChanged
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A topology serverHeartbeatStarted SDAM event
 *
 * @event ReplSet#serverHeartbeatStarted
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A topology serverHeartbeatFailed SDAM event
 *
 * @event ReplSet#serverHeartbeatFailed
 * @type ***REMOVED***object***REMOVED***
 */

/**
 * A topology serverHeartbeatSucceeded SDAM change event
 *
 * @event ReplSet#serverHeartbeatSucceeded
 * @type ***REMOVED***object***REMOVED***
 */

module.exports = ReplSet;
