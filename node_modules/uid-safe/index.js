/*!
 * uid-safe
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2016 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module dependencies.
 * @private
 */

var escape = require('base64-url').escape
var randomBytes = require('random-bytes')

/**
 * Module exports.
 * @public
 */

module.exports = uid
module.exports.sync = uidSync

/**
 * Create a unique ID.
 *
 * @param ***REMOVED***number***REMOVED*** length
 * @param ***REMOVED***function***REMOVED*** [callback]
 * @return ***REMOVED***Promise***REMOVED***
 * @public
 */

function uid (length, callback) ***REMOVED***
  // validate callback is a function, if provided
  if (callback !== undefined && typeof callback !== 'function') ***REMOVED***
    throw new TypeError('argument callback must be a function')
  ***REMOVED***

  // require the callback without promises
  if (!callback && !global.Promise) ***REMOVED***
    throw new TypeError('argument callback is required')
  ***REMOVED***

  if (callback) ***REMOVED***
    // classic callback style
    return generateUid(length, callback)
  ***REMOVED***

  return new Promise(function executor (resolve, reject) ***REMOVED***
    generateUid(length, function onUid (err, str) ***REMOVED***
      if (err) return reject(err)
      resolve(str)
    ***REMOVED***)
  ***REMOVED***)
***REMOVED***

/**
 * Create a unique ID sync.
 *
 * @param ***REMOVED***number***REMOVED*** length
 * @return ***REMOVED***string***REMOVED***
 * @public
 */

function uidSync (length) ***REMOVED***
  return toString(randomBytes.sync(length))
***REMOVED***

/**
 * Generate a unique ID string.
 *
 * @param ***REMOVED***number***REMOVED*** length
 * @param ***REMOVED***function***REMOVED*** callback
 * @private
 */

function generateUid (length, callback) ***REMOVED***
  randomBytes(length, function (err, buf) ***REMOVED***
    if (err) return callback(err)
    callback(null, toString(buf))
  ***REMOVED***)
***REMOVED***

/**
 * Change a Buffer into a string.
 *
 * @param ***REMOVED***Buffer***REMOVED*** buf
 * @return ***REMOVED***string***REMOVED***
 * @private
 */

function toString (buf) ***REMOVED***
  return escape(buf.toString('base64'))
***REMOVED***
