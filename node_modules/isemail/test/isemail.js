var Lab = require('lab');
var Code = require('code');
var IsEmail = require('..');
var Tests = require('./tests.json');

var internals = ***REMOVED***
    defaultThreshold: 16
***REMOVED***;

// Test shortcuts
var isEmail = IsEmail;
var lab = exports.lab = Lab.script();
var before = lab.before;
var after = lab.after;
var describe = lab.describe;
var it = lab.it;
var expect = Code.expect;

// Diagnoses
var diag = isEmail.diagnoses;

// Expectations
var expectations = Tests.map(function mapper (value) ***REMOVED***

    value[1] = diag[value[1]];
    return value;
***REMOVED***);

// Null characters aren't supported in JSON
expectations.push(['test@[\0', diag.errExpectingDTEXT]);
expectations.push(['(\0)test@example.com', diag.errExpectingCTEXT]);

var tldExpectations = [
    ['shouldbe@invalid', diag.errUnknownTLD],
    ['shouldbe@example.com', diag.valid]
];

describe('isEmail', function () ***REMOVED***

    it('should check options.tldWhitelist', function (done) ***REMOVED***

        expect(isEmail('person@top', ***REMOVED***
            tldWhitelist: 'top',
            checkDNS: false
        ***REMOVED***)).to.equal(true);

        expect(isEmail('person@top', ***REMOVED***
            tldWhitelist: ['com'],
            checkDNS: false
        ***REMOVED***)).to.equal(false);

        expect(function () ***REMOVED***

            isEmail('', ***REMOVED***
                tldWhitelist: 77
            ***REMOVED***);
        ***REMOVED***).to.throw(/tldWhitelist/);
        done();
    ***REMOVED***);

    it('should check options.minDomainAtoms', function (done) ***REMOVED***

        expect(function () ***REMOVED***

            isEmail('person@top', ***REMOVED***
                minDomainAtoms: -1
            ***REMOVED***);
        ***REMOVED***).to.throw(/minDomainAtoms/);

        expect(function () ***REMOVED***

            isEmail('person@top', ***REMOVED***
                minDomainAtoms: 1.5
            ***REMOVED***);
        ***REMOVED***).to.throw(/minDomainAtoms/);
        done();
    ***REMOVED***);

    it('should use options.errorLevel', function (done) ***REMOVED***

        expect(isEmail('person@123', ***REMOVED***
            errorLevel: diag.rfc5321TLDNumeric + 1
        ***REMOVED***)).to.equal(0);

        expect(isEmail('person@123', ***REMOVED***
            errorLevel: diag.rfc5321TLDNumeric
        ***REMOVED***)).to.equal(diag.rfc5321TLDNumeric);
        done();
    ***REMOVED***);

    it('should ensure callback provided with checkDNS', function (done) ***REMOVED***

        expect(function () ***REMOVED***

            isEmail('person@top', ***REMOVED***
                checkDNS: true
            ***REMOVED***);
        ***REMOVED***).to.throw(/(?=.*\bcheckDNS\b)(?=.*\bcallback\b)/);
        done();
    ***REMOVED***);

    it('should handle omitted options', function (done) ***REMOVED***

        expect(isEmail(expectations[0][0])).to.equal(expectations[0][1] < internals.defaultThreshold);
        done();
    ***REMOVED***);

    it('should handle omitted options with callback', function (done) ***REMOVED***

        isEmail(expectations[0][0], function (res) ***REMOVED***

            expect(res).to.equal(expectations[0][1] < internals.defaultThreshold);
            done();
        ***REMOVED***);
    ***REMOVED***);

    expectations.forEach(function (obj, i) ***REMOVED***

        var email = obj[0], result = obj[1];
        it('should handle test ' + (i + 1), function (done) ***REMOVED***

            isEmail(email, ***REMOVED***
                errorLevel: 0,
                checkDNS: true
            ***REMOVED***, function (res) ***REMOVED***

                expect(res).to.equal(result);
                done();
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***);

    tldExpectations.forEach(function (obj, i) ***REMOVED***

        var email = obj[0];
        var result = obj[1];

        it('should handle tld test ' + (i + 1), function (done) ***REMOVED***

            expect(isEmail(email, ***REMOVED***
                errorLevel: 0,
                tldWhitelist: ***REMOVED***
                    com: true
                ***REMOVED***
            ***REMOVED***)).to.equal(result);

            expect(isEmail(email, ***REMOVED***
                errorLevel: 0,
                tldWhitelist: ['com']
            ***REMOVED***)).to.equal(result);

            done();
        ***REMOVED***);
    ***REMOVED***);

    it('should handle domain atom test 1', function (done) ***REMOVED***

        expect(isEmail('shouldbe@invalid', ***REMOVED***
            errorLevel: 0,
            minDomainAtoms: 2
        ***REMOVED***)).to.equal(diag.errDomainTooShort);

        done();
    ***REMOVED***);

    it('should handle domain atom test 2', function (done) ***REMOVED***

        expect(isEmail('valid@example.com', ***REMOVED***
            errorLevel: 0,
            minDomainAtoms: 2
        ***REMOVED***)).to.equal(diag.valid);

        done();
    ***REMOVED***);
***REMOVED***);
