/*
 * winston.js: Top-level include defining Winston.
 *
 * (C) 2010 Charlie Robbins
 * MIT LICENCE
 *
 */

var winston = exports;

//
// use require method for webpack bundle
//
winston.version = require('../package.json').version

//
// Include transports defined by default by winston
//
winston.transports = require('./winston/transports');

//
// Expose utility methods
//
var common             = require('./winston/common');
winston.hash           = common.hash;
winston.clone          = common.clone;
winston.longestElement = common.longestElement;
winston.exception      = require('./winston/exception');
winston.config         = require('./winston/config');
winston.addColors      = winston.config.addColors;

//
// Expose core Logging-related prototypes.
//
winston.Container      = require('./winston/container').Container;
winston.Logger         = require('./winston/logger').Logger;
winston.Transport      = require('./winston/transports/transport').Transport;

//
// We create and expose a default `Container` to `winston.loggers` so that the
// programmer may manage multiple `winston.Logger` instances without any additional overhead.
//
// ### some-file1.js
//
//     var logger = require('winston').loggers.get('something');
//
// ### some-file2.js
//
//     var logger = require('winston').loggers.get('something');
//
winston.loggers = new winston.Container();

//
// We create and expose a 'defaultLogger' so that the programmer may do the
// following without the need to create an instance of winston.Logger directly:
//
//     var winston = require('winston');
//     winston.log('info', 'some message');
//     winston.error('some error');
//
var defaultLogger = new winston.Logger(***REMOVED***
  transports: [new winston.transports.Console()]
***REMOVED***);

//
// Pass through the target methods onto `winston`.
//
var methods = [
  'log',
  'query',
  'stream',
  'add',
  'remove',
  'clear',
  'profile',
  'startTimer',
  'extend',
  'cli',
  'handleExceptions',
  'unhandleExceptions',
  'configure'
];
common.setLevels(winston, null, defaultLogger.levels);
methods.forEach(function (method) ***REMOVED***
  winston[method] = function () ***REMOVED***
    return defaultLogger[method].apply(defaultLogger, arguments);
  ***REMOVED***;
***REMOVED***);

//
// ### function cli ()
// Configures the default winston logger to have the
// settings for command-line interfaces: no timestamp,
// colors enabled, padded output, and additional levels.
//
winston.cli = function () ***REMOVED***
  winston.padLevels = true;
  common.setLevels(winston, defaultLogger.levels, winston.config.cli.levels);
  defaultLogger.setLevels(winston.config.cli.levels);
  winston.config.addColors(winston.config.cli.colors);

  if (defaultLogger.transports.console) ***REMOVED***
    defaultLogger.transports.console.colorize = true;
    defaultLogger.transports.console.timestamp = false;
  ***REMOVED***

  return winston;
***REMOVED***;

//
// ### function setLevels (target)
// #### @target ***REMOVED***Object***REMOVED*** Target levels to use
// Sets the `target` levels specified on the default winston logger.
//
winston.setLevels = function (target) ***REMOVED***
  common.setLevels(winston, defaultLogger.levels, target);
  defaultLogger.setLevels(target);
***REMOVED***;

//
// Define getter / setter for the default logger level
// which need to be exposed by winston.
//
Object.defineProperty(winston, 'level', ***REMOVED***
  get: function () ***REMOVED***
    return defaultLogger.level;
  ***REMOVED***,
  set: function (val) ***REMOVED***
    defaultLogger.level = val;

    Object.keys(defaultLogger.transports).forEach(function(key) ***REMOVED***
      defaultLogger.transports[key].level = val;
    ***REMOVED***);
  ***REMOVED***
***REMOVED***);

//
// Define getters / setters for appropriate properties of the
// default logger which need to be exposed by winston.
//
['emitErrs', 'exitOnError', 'padLevels', 'levelLength', 'stripColors'].forEach(function (prop) ***REMOVED***
  Object.defineProperty(winston, prop, ***REMOVED***
    get: function () ***REMOVED***
      return defaultLogger[prop];
    ***REMOVED***,
    set: function (val) ***REMOVED***
      defaultLogger[prop] = val;
    ***REMOVED***
  ***REMOVED***);
***REMOVED***);

//
// @default ***REMOVED***Object***REMOVED***
// The default transports and exceptionHandlers for
// the default winston logger.
//
Object.defineProperty(winston, 'default', ***REMOVED***
  get: function () ***REMOVED***
    return ***REMOVED***
      transports: defaultLogger.transports,
      exceptionHandlers: defaultLogger.exceptionHandlers
    ***REMOVED***;
  ***REMOVED***
***REMOVED***);
