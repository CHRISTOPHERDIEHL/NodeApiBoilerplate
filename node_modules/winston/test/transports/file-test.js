/*
 * file-test.js: Tests for instances of the File transport
 *
 * (C) 2010 Charlie Robbins
 * MIT LICENSE
 *
 */

var path = require('path'),
    vows = require('vows'),
    fs = require('fs'),
    assert = require('assert'),
    winston = require('../../lib/winston'),
    stdMocks = require('std-mocks'),
    helpers = require('../helpers');

var transport = require('./transport');

var stream = fs.createWriteStream(
      path.join(__dirname, '..', 'fixtures', 'logs', 'testfile.log')
    ),
    fileTransport = new (winston.transports.File)(***REMOVED***
      filename: path.join(__dirname, '..', 'fixtures', 'logs', 'testfilename.log')
    ***REMOVED***),
    failedFileTransport = new (winston.transports.File)(***REMOVED***
      filename: path.join(__dirname, '..', 'fixtures', 'logs', 'dir404', 'testfile.log')
    ***REMOVED***),
    streamTransport = new (winston.transports.File)(***REMOVED*** stream: stream ***REMOVED***);

vows.describe('winston/transports/file').addBatch(***REMOVED***
  "An instance of the File Transport": ***REMOVED***
    "when passed a valid filename": ***REMOVED***
      "should have the proper methods defined": function () ***REMOVED***
        helpers.assertFile(fileTransport);
      ***REMOVED***,
      "the log() method": helpers.testNpmLevels(fileTransport, "should respond with true", function (ign, err, logged) ***REMOVED***
        assert.isNull(err);
        assert.isTrue(logged);
      ***REMOVED***)
    ***REMOVED***,
    "when passed an invalid filename": ***REMOVED***
      "should have proper methods defined": function () ***REMOVED***
        helpers.assertFile(failedFileTransport);
      ***REMOVED***,
      "should enter noop failed state": function () ***REMOVED***
        helpers.assertFailedTransport(failedFileTransport);
      ***REMOVED***
    ***REMOVED***,
    "when passed a valid file stream": ***REMOVED***
      "should have the proper methods defined": function () ***REMOVED***
        helpers.assertFile(streamTransport);
      ***REMOVED***,
      "the log() method": helpers.testNpmLevels(streamTransport, "should respond with true", function (ign, err, logged) ***REMOVED***
        assert.isNull(err);
        assert.isTrue(logged);
      ***REMOVED***)
    ***REMOVED***,
    "streaming to stdout": ***REMOVED***
      topic: function () ***REMOVED***
        var transport = new (winston.transports.File)(***REMOVED***
          stream: process.stdout, timestamp: false, json: false
        ***REMOVED***);
        stdMocks.use();
        return transport;
      ***REMOVED***,
      "with showLevel off": ***REMOVED***
        topic: function (stdoutStreamTransport) ***REMOVED***
          stdoutStreamTransport.showLevel = false;
          stdoutStreamTransport.log('info', '', undefined, this.callback);
        ***REMOVED***,
        "should not have level prepended": function () ***REMOVED***
          var output = stdMocks.flush(),
            line = output.stdout[0];

          assert.equal(line, '\n');
        ***REMOVED***
      ***REMOVED***,
      // there would be a "with showLevel on" here but I think it's a bug in
      // this version of vows.  ugprading causes even more problems
      teardown: function() ***REMOVED***
        stdMocks.restore();
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***).addBatch(***REMOVED***
  "These tests have a non-deterministic end": ***REMOVED***
    topic: function () ***REMOVED***
      setTimeout(this.callback, 200);
    ***REMOVED***,
    "and this should be fixed before releasing": function () ***REMOVED***
      assert.isTrue(true);
    ***REMOVED***
  ***REMOVED***
***REMOVED***).addBatch(***REMOVED***
  "Error object in metadata #610": ***REMOVED***
    topic: function () ***REMOVED***
      var myErr = new Error("foo");

      fileTransport.log('info', 'test message', myErr, this.callback.bind(this, null, myErr));
    ***REMOVED***,
    "should not be modified": function (err, myErr) ***REMOVED***
      assert.equal(myErr.message, "foo");
      // Not sure if this is the best possible way to check if additional props appeared
      assert.deepEqual(Object.getOwnPropertyNames(myErr), Object.getOwnPropertyNames(new Error("foo")));
    ***REMOVED***
  ***REMOVED***
***REMOVED***).addBatch(***REMOVED***
  "Date object in metadata": ***REMOVED***
    topic: function () ***REMOVED***
      var obj = new Date(1000);

      fileTransport.log('info', 'test message', obj, this.callback.bind(this, null, obj));
    ***REMOVED***,
    "should not be modified": function (err, obj) ***REMOVED***
      // Not sure if this is the best possible way to check if additional props appeared
      assert.deepEqual(Object.getOwnPropertyNames(obj), Object.getOwnPropertyNames(new Date()));
    ***REMOVED***
  ***REMOVED***
***REMOVED***).addBatch(***REMOVED***
  "Plain object in metadata": ***REMOVED***
    topic: function () ***REMOVED***
      var obj = ***REMOVED*** message: "foo" ***REMOVED***;

      fileTransport.log('info', 'test message', obj, this.callback.bind(this, null, obj));
    ***REMOVED***,
    "should not be modified": function (err, obj) ***REMOVED***
      assert.deepEqual(obj, ***REMOVED*** message: "foo" ***REMOVED***);
    ***REMOVED***
  ***REMOVED***
***REMOVED***).addBatch(***REMOVED***
  "An instance of the File Transport": transport(winston.transports.File, ***REMOVED***
    filename: path.join(__dirname, '..', 'fixtures', 'logs', 'testfile.log')
  ***REMOVED***)
***REMOVED***).export(module);
