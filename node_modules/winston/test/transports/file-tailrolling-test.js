var assert = require('assert'),
    fs = require('fs'),
    path = require('path'),
    vows = require('vows'),
    winston = require('../../lib/winston'),
    helpers = require('../helpers');

var maxfilesTransport = new winston.transports.File(***REMOVED***
  timestamp: false,
  json: false,
  filename: path.join(__dirname, '..', 'fixtures', 'logs', 'testtailrollingfiles.log'),
  maxsize: 4096,
  maxFiles: 3,
  tailable: true
***REMOVED***);

process.on('uncaughtException', function (err) ***REMOVED***
  console.log('caught exception');
  console.error(err);
***REMOVED***);

vows.describe('winston/transports/file/tailrolling').addBatch(***REMOVED***
  "An instance of the File Transport": ***REMOVED***
    "when delete old test files": ***REMOVED***
      topic: function () ***REMOVED***
        var logs = path.join(__dirname, '..', 'fixtures', 'logs');
        fs.readdirSync(logs).forEach(function (file) ***REMOVED***
          if (~file.indexOf('testtailrollingfiles')) ***REMOVED***
            fs.unlinkSync(path.join(logs, file));
          ***REMOVED***
        ***REMOVED***);

        this.callback();
      ***REMOVED***,
      "and when passed more files than the maxFiles": ***REMOVED***
        topic: function () ***REMOVED***
          var that = this,
              created = 0;

          function data(ch) ***REMOVED***
            return new Array(1018).join(String.fromCharCode(65 + ch));
          ***REMOVED***;

          function logKbytes(kbytes, txt) ***REMOVED***
            //
            // With no timestamp and at the info level,
            // winston adds exactly 7 characters:
            // [info](4)[ :](2)[\n](1)
            //
            for (var i = 0; i < kbytes; i++) ***REMOVED***
              maxfilesTransport.log('info', data(txt), null, function () ***REMOVED*** ***REMOVED***);
            ***REMOVED***
          ***REMOVED***

          maxfilesTransport.on('logged', function () ***REMOVED***
            if (++created == 4) ***REMOVED***
              return that.callback();
            ***REMOVED***

            logKbytes(4, created);
          ***REMOVED***);

          logKbytes(4, created);
        ***REMOVED***,
        "should be 3 log files, base to maxFiles - 1": function () ***REMOVED***
          var file, fullpath;
          for (var num = 0; num < 4; num++) ***REMOVED***
            file = !num ? 'testtailrollingfiles.log' : 'testtailrollingfiles' + num + '.log';
            fullpath = path.join(__dirname, '..', 'fixtures', 'logs', file);

            if (num == 3) ***REMOVED***
              return assert.ok(!fs.existsSync(fullpath));
            ***REMOVED***

            assert.ok(fs.existsSync(fullpath));
          ***REMOVED***

          return false;
        ***REMOVED***,
        "should have files in correct order": function () ***REMOVED***
          var file, fullpath, content;
          ['D', 'C', 'B'].forEach(function (letter, i) ***REMOVED***
            file = !i ? 'testtailrollingfiles.log' : 'testtailrollingfiles' + i + '.log';
            content = fs.readFileSync(path.join(__dirname, '..', 'fixtures', 'logs', file), 'ascii');

            assert.lengthOf(content.match(new RegExp(letter, 'g')), 4068);
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***).export(module);