/*
 * file-maxfiles-test.js: Tests for instances of the File transport setting the max file size,
 * and setting a number for max files created.
 * maxSize * maxFiles = total storage used by winston.
 *
 * (C) 2011 Daniel Aristizabal
 * MIT LICENSE
 *
 */

var assert = require('assert'),
    exec = require('child_process').exec,
    fs = require('fs'),
    path = require('path'),
    vows = require('vows'),
    winston = require('../../lib/winston'),
    helpers = require('../helpers');

var maxfilesTransport = new winston.transports.File(***REMOVED***
  timestamp: false,
  json: false,
  filename: path.join(__dirname, '..', 'fixtures', 'logs', 'testmaxfiles.log'),
  maxsize: 4096,
  maxFiles: 3
***REMOVED***);

vows.describe('winston/transports/file/maxfiles').addBatch(***REMOVED***
  "An instance of the File Transport": ***REMOVED***
    "when passed a valid filename": ***REMOVED***
      topic: maxfilesTransport,
      "should be a valid transporter": function (transportTest) ***REMOVED***
        helpers.assertFile(transportTest);
      ***REMOVED***,
      "should set the maxFiles option correctly": function (transportTest) ***REMOVED***
        assert.isNumber(transportTest.maxFiles);
      ***REMOVED***
    ***REMOVED***,
    "when delete old test files": ***REMOVED***
      topic: function () ***REMOVED***
        exec('rm -rf ' + path.join(__dirname, '..', 'fixtures', 'logs', 'testmaxfiles*'), this.callback);
      ***REMOVED***,
      "and when passed more files than the maxFiles": ***REMOVED***
        topic: function () ***REMOVED***
          var that = this,
              created = 0;

          function data(ch) ***REMOVED***
            return new Array(1018).join(String.fromCharCode(65 + ch));
          ***REMOVED***;

          function logKbytes(kbytes, txt) ***REMOVED***
            //
            // With no timestamp and at the info level,
            // winston adds exactly 7 characters:
            // [info](4)[ :](2)[\n](1)
            //
            for (var i = 0; i < kbytes; i++) ***REMOVED***
              maxfilesTransport.log('info', data(txt), null, function () ***REMOVED*** ***REMOVED***);
            ***REMOVED***
          ***REMOVED***

          maxfilesTransport.on('logged', function () ***REMOVED***
            if (++created === 6) ***REMOVED***
              return that.callback();
            ***REMOVED***

            logKbytes(4, created);
          ***REMOVED***);

          logKbytes(4, created);
        ***REMOVED***,
        "should be only 3 files called 5.log, 4.log and 3.log": function () ***REMOVED***
          for (var num = 0; num < 6; num++) ***REMOVED***
            var file = !num ? 'testmaxfiles.log' : 'testmaxfiles' + num + '.log',
                fullpath = path.join(__dirname, '..', 'fixtures', 'logs', file);

            // There should be no files with that name
            if (num >= 0 && num < 3) ***REMOVED***
              assert.throws(function () ***REMOVED***
                fs.statSync(fullpath);
              ***REMOVED***, Error);
            ***REMOVED*** else ***REMOVED***
              // The other files should be exist
              assert.doesNotThrow(function () ***REMOVED***
                fs.statSync(fullpath);
              ***REMOVED***, Error);
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***,
        "should have the correct content": function () ***REMOVED***
          ['D', 'E', 'F'].forEach(function (name, inx) ***REMOVED***
            var counter = inx + 3,
                logsDir = path.join(__dirname, '..', 'fixtures', 'logs'),
                content = fs.readFileSync(path.join(logsDir, 'testmaxfiles' + counter + '.log'), 'utf-8');
            // The content minus the 7 characters added by winston
            assert.lengthOf(content.match(new RegExp(name, 'g')), 4068);
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***).export(module);
