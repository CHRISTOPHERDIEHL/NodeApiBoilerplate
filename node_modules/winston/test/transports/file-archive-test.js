/*
 * file-archive-test.js: Tests for instances of the File transport setting the archive option,
 *
 * (C) 2015 Nimrod Becker
 * MIT LICENSE
 *
 */

var assert = require('assert'),
  exec = require('child_process').exec,
  fs = require('fs'),
  path = require('path'),
  vows = require('vows'),
  winston = require('../../lib/winston'),
  helpers = require('../helpers');

var archiveTransport = new winston.transports.File(***REMOVED***
  timestamp: true,
  json: false,
  zippedArchive: true,
  tailable: true,
  filename: 'testarchive.log',
  dirname: path.join(__dirname, '..', 'fixtures', 'logs'),
  maxsize: 4096,
  maxFiles: 3
***REMOVED***);

function data(ch) ***REMOVED***
  return new Array(1018).join(String.fromCharCode(65 + ch));
***REMOVED***

function logKbytes(kbytes, txt) ***REMOVED***
  //
  // With no timestamp and at the info level,
  // winston adds exactly 7 characters:
  // [info](4)[ :](2)[\n](1)
  //
  for (var i = 0; i < kbytes; i++) ***REMOVED***
    archiveTransport.log('info', data(txt), null, function() ***REMOVED******REMOVED***);
  ***REMOVED***
***REMOVED***

vows.describe('winston/transports/file/zippedArchive').addBatch(***REMOVED***
  "An instance of the File Transport with tailable true": ***REMOVED***
    "when created archived files are rolled": ***REMOVED***
      topic: function() ***REMOVED***
        var that = this,
          created = 0;

        archiveTransport.on('logged', function() ***REMOVED***
          if (++created === 6) ***REMOVED***
            return that.callback();
          ***REMOVED***

          logKbytes(4, created);
        ***REMOVED***);

        logKbytes(4, created);
      ***REMOVED***,
      "should be only 3 files called testarchive.log, testarchive1.log.gz and testarchive2.log.gz": function() ***REMOVED***
        //Give the archive a little time to settle
      //  setTimeout(function() ***REMOVED***
          for (var num = 0; num < 6; num++) ***REMOVED***
            var file = !num ? 'testarchive.log' : 'testarchive' + num + '.log.gz',
              fullpath = path.join(__dirname, '..', 'fixtures', 'logs', file);

            // There should be no files with that name
            if (num >= 3) ***REMOVED***
              assert.throws(function() ***REMOVED***
                fs.statSync(fullpath);
              ***REMOVED***, Error);
            ***REMOVED*** else ***REMOVED***
              // The other files should exist
              assert.doesNotThrow(function() ***REMOVED***
                fs.statSync(fullpath);
              ***REMOVED***, Error);
            ***REMOVED***
          ***REMOVED***
        //***REMOVED***,5000);
      ***REMOVED***,
    ***REMOVED***
  ***REMOVED***,
***REMOVED***).export(module);
