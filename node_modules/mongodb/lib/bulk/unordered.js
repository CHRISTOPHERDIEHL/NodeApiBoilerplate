"use strict";

var common = require('./common')
	, utils = require('../utils')
  , toError = require('../utils').toError
	, handleCallback = require('../utils').handleCallback
  , shallowClone = utils.shallowClone
  , BulkWriteResult = common.BulkWriteResult
  , ObjectID = require('mongodb-core').BSON.ObjectID
	, BSON = require('mongodb-core').BSON
  , Define = require('../metadata')
  , Batch = common.Batch
  , mergeBatchResults = common.mergeBatchResults;

var bson = new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128,
	BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey,
	BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]);

/**
 * Create a FindOperatorsUnordered instance (INTERNAL TYPE, do not instantiate directly)
 * @class
 * @property ***REMOVED***number***REMOVED*** length Get the number of operations in the bulk.
 * @return ***REMOVED***FindOperatorsUnordered***REMOVED*** a FindOperatorsUnordered instance.
 */
var FindOperatorsUnordered = function(self) ***REMOVED***
  this.s = self.s;
***REMOVED***

/**
 * Add a single update document to the bulk operation
 *
 * @method
 * @param ***REMOVED***object***REMOVED*** doc update operations
 * @throws ***REMOVED***MongoError***REMOVED***
 * @return ***REMOVED***UnorderedBulkOperation***REMOVED***
 */
FindOperatorsUnordered.prototype.update = function(updateDocument) ***REMOVED***
  // Perform upsert
  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;

  // Establish the update command
  var document = ***REMOVED***
      q: this.s.currentOp.selector
    , u: updateDocument
    , multi: true
    , upsert: upsert
  ***REMOVED***

  // Clear out current Op
  this.s.currentOp = null;
  // Add the update document to the list
  return addToOperationsList(this, common.UPDATE, document);
***REMOVED***

/**
 * Add a single update one document to the bulk operation
 *
 * @method
 * @param ***REMOVED***object***REMOVED*** doc update operations
 * @throws ***REMOVED***MongoError***REMOVED***
 * @return ***REMOVED***UnorderedBulkOperation***REMOVED***
 */
FindOperatorsUnordered.prototype.updateOne = function(updateDocument) ***REMOVED***
  // Perform upsert
  var upsert = typeof this.s.currentOp.upsert == 'boolean' ? this.s.currentOp.upsert : false;

  // Establish the update command
  var document = ***REMOVED***
      q: this.s.currentOp.selector
    , u: updateDocument
    , multi: false
    , upsert: upsert
  ***REMOVED***

  // Clear out current Op
  this.s.currentOp = null;
  // Add the update document to the list
  return addToOperationsList(this, common.UPDATE, document);
***REMOVED***

/**
 * Add a replace one operation to the bulk operation
 *
 * @method
 * @param ***REMOVED***object***REMOVED*** doc the new document to replace the existing one with
 * @throws ***REMOVED***MongoError***REMOVED***
 * @return ***REMOVED***UnorderedBulkOperation***REMOVED***
 */
FindOperatorsUnordered.prototype.replaceOne = function(updateDocument) ***REMOVED***
  this.updateOne(updateDocument);
***REMOVED***

/**
 * Upsert modifier for update bulk operation
 *
 * @method
 * @throws ***REMOVED***MongoError***REMOVED***
 * @return ***REMOVED***UnorderedBulkOperation***REMOVED***
 */
FindOperatorsUnordered.prototype.upsert = function() ***REMOVED***
  this.s.currentOp.upsert = true;
  return this;
***REMOVED***

/**
 * Add a remove one operation to the bulk operation
 *
 * @method
 * @throws ***REMOVED***MongoError***REMOVED***
 * @return ***REMOVED***UnorderedBulkOperation***REMOVED***
 */
FindOperatorsUnordered.prototype.removeOne = function() ***REMOVED***
  // Establish the update command
  var document = ***REMOVED***
      q: this.s.currentOp.selector
    , limit: 1
  ***REMOVED***

  // Clear out current Op
  this.s.currentOp = null;
  // Add the remove document to the list
  return addToOperationsList(this, common.REMOVE, document);
***REMOVED***

/**
 * Add a remove operation to the bulk operation
 *
 * @method
 * @throws ***REMOVED***MongoError***REMOVED***
 * @return ***REMOVED***UnorderedBulkOperation***REMOVED***
 */
FindOperatorsUnordered.prototype.remove = function() ***REMOVED***
  // Establish the update command
  var document = ***REMOVED***
      q: this.s.currentOp.selector
    , limit: 0
  ***REMOVED***

  // Clear out current Op
  this.s.currentOp = null;
  // Add the remove document to the list
  return addToOperationsList(this, common.REMOVE, document);
***REMOVED***

//
// Add to the operations list
//
var addToOperationsList = function(_self, docType, document) ***REMOVED***
  // Get the bsonSize
  var bsonSize = bson.calculateObjectSize(document, ***REMOVED***
		checkKeys: false,		
	***REMOVED***);
  // Throw error if the doc is bigger than the max BSON size
  if(bsonSize >= _self.s.maxBatchSizeBytes) throw toError("document is larger than the maximum size " + _self.s.maxBatchSizeBytes);
  // Holds the current batch
  _self.s.currentBatch = null;
  // Get the right type of batch
  if(docType == common.INSERT) ***REMOVED***
    _self.s.currentBatch = _self.s.currentInsertBatch;
  ***REMOVED*** else if(docType == common.UPDATE) ***REMOVED***
    _self.s.currentBatch = _self.s.currentUpdateBatch;
  ***REMOVED*** else if(docType == common.REMOVE) ***REMOVED***
    _self.s.currentBatch = _self.s.currentRemoveBatch;
  ***REMOVED***

  // Create a new batch object if we don't have a current one
  if(_self.s.currentBatch == null) _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);

  // Check if we need to create a new batch
  if(((_self.s.currentBatch.size + 1) >= _self.s.maxWriteBatchSize)
    || ((_self.s.currentBatch.sizeBytes + bsonSize) >= _self.s.maxBatchSizeBytes)
    || (_self.s.currentBatch.batchType != docType)) ***REMOVED***
    // Save the batch to the execution stack
    _self.s.batches.push(_self.s.currentBatch);

    // Create a new batch
    _self.s.currentBatch = new Batch(docType, _self.s.currentIndex);
  ***REMOVED***

  // We have an array of documents
  if(Array.isArray(document)) ***REMOVED***
    throw toError("operation passed in cannot be an Array");
  ***REMOVED*** else ***REMOVED***
    _self.s.currentBatch.operations.push(document);
    _self.s.currentBatch.originalIndexes.push(_self.s.currentIndex);
    _self.s.currentIndex = _self.s.currentIndex + 1;
  ***REMOVED***

  // Save back the current Batch to the right type
  if(docType == common.INSERT) ***REMOVED***
    _self.s.currentInsertBatch = _self.s.currentBatch;
    _self.s.bulkResult.insertedIds.push(***REMOVED***index: _self.s.currentIndex, _id: document._id***REMOVED***);
  ***REMOVED*** else if(docType == common.UPDATE) ***REMOVED***
    _self.s.currentUpdateBatch = _self.s.currentBatch;
  ***REMOVED*** else if(docType == common.REMOVE) ***REMOVED***
    _self.s.currentRemoveBatch = _self.s.currentBatch;
  ***REMOVED***

  // Update current batch size
  _self.s.currentBatch.size = _self.s.currentBatch.size + 1;
  _self.s.currentBatch.sizeBytes = _self.s.currentBatch.sizeBytes + bsonSize;

  // Return self
  return _self;
***REMOVED***

/**
 * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)
 * @class
 * @property ***REMOVED***number***REMOVED*** length Get the number of operations in the bulk.
 * @return ***REMOVED***UnorderedBulkOperation***REMOVED*** a UnorderedBulkOperation instance.
 */
var UnorderedBulkOperation = function(topology, collection, options) ***REMOVED***
	options = options == null ? ***REMOVED******REMOVED*** : options;

	// Get the namesspace for the write operations
  var namespace = collection.collectionName;
  // Used to mark operation as executed
  var executed = false;

	// Current item
  // var currentBatch = null;
	var currentOp = null;

	// Handle to the bson serializer, used to calculate running sizes
	var bson = topology.bson;

  // Set max byte size
  var maxBatchSizeBytes = topology.isMasterDoc && topology.isMasterDoc.maxBsonObjectSize
    ? topology.isMasterDoc.maxBsonObjectSize : (1024*1025*16);
  var maxWriteBatchSize = topology.isMasterDoc && topology.isMasterDoc.maxWriteBatchSize
    ? topology.isMasterDoc.maxWriteBatchSize : 1000;

  // Get the write concern
  var writeConcern = common.writeConcern(shallowClone(options), collection, options);

  // Get the promiseLibrary
  var promiseLibrary = options.promiseLibrary;

  // No promise library selected fall back
  if(!promiseLibrary) ***REMOVED***
    promiseLibrary = typeof global.Promise == 'function' ?
      global.Promise : require('es6-promise').Promise;
  ***REMOVED***

  // Final results
  var bulkResult = ***REMOVED***
      ok: 1
    , writeErrors: []
    , writeConcernErrors: []
    , insertedIds: []
    , nInserted: 0
    , nUpserted: 0
    , nMatched: 0
    , nModified: 0
    , nRemoved: 0
    , upserted: []
  ***REMOVED***;

  // Internal state
  this.s = ***REMOVED***
    // Final result
      bulkResult: bulkResult
    // Current batch state
    , currentInsertBatch: null
    , currentUpdateBatch: null
    , currentRemoveBatch: null
    , currentBatch: null
    , currentIndex: 0
    , batches: []
    // Write concern
    , writeConcern: writeConcern
    // Max batch size options
    , maxBatchSizeBytes: maxBatchSizeBytes
    , maxWriteBatchSize: maxWriteBatchSize
    // Namespace
    , namespace: namespace
    // BSON
    , bson: bson
    // Topology
    , topology: topology
    // Options
    , options: options
    // Current operation
    , currentOp: currentOp
    // Executed
    , executed: executed
    // Collection
    , collection: collection
    // Promise Library
    , promiseLibrary: promiseLibrary
    // Bypass validation
    , bypassDocumentValidation: typeof options.bypassDocumentValidation == 'boolean' ? options.bypassDocumentValidation : false
  ***REMOVED***
***REMOVED***

var define = UnorderedBulkOperation.define = new Define('UnorderedBulkOperation', UnorderedBulkOperation, false);

/**
 * Add a single insert document to the bulk operation
 *
 * @param ***REMOVED***object***REMOVED*** doc the document to insert
 * @throws ***REMOVED***MongoError***REMOVED***
 * @return ***REMOVED***UnorderedBulkOperation***REMOVED***
 */
UnorderedBulkOperation.prototype.insert = function(document) ***REMOVED***
  if(this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null) document._id = new ObjectID();
  return addToOperationsList(this, common.INSERT, document);
***REMOVED***

/**
 * Initiate a find operation for an update/updateOne/remove/removeOne/replaceOne
 *
 * @method
 * @param ***REMOVED***object***REMOVED*** selector The selector for the bulk operation.
 * @throws ***REMOVED***MongoError***REMOVED***
 * @return ***REMOVED***FindOperatorsUnordered***REMOVED***
 */
UnorderedBulkOperation.prototype.find = function(selector) ***REMOVED***
  if (!selector) ***REMOVED***
    throw toError("Bulk find operation must specify a selector");
  ***REMOVED***

  // Save a current selector
  this.s.currentOp = ***REMOVED***
    selector: selector
  ***REMOVED***

  return new FindOperatorsUnordered(this);
***REMOVED***

Object.defineProperty(UnorderedBulkOperation.prototype, 'length', ***REMOVED***
  enumerable: true,
  get: function() ***REMOVED***
    return this.s.currentIndex;
  ***REMOVED***
***REMOVED***);

UnorderedBulkOperation.prototype.raw = function(op) ***REMOVED***
  var key = Object.keys(op)[0];

  // Set up the force server object id
  var forceServerObjectId = typeof this.s.options.forceServerObjectId == 'boolean'
    ? this.s.options.forceServerObjectId : this.s.collection.s.db.options.forceServerObjectId;

  // Update operations
  if((op.updateOne && op.updateOne.q)
    || (op.updateMany && op.updateMany.q)
    || (op.replaceOne && op.replaceOne.q)) ***REMOVED***
    op[key].multi = op.updateOne || op.replaceOne ? false : true;
    return addToOperationsList(this, common.UPDATE, op[key]);
  ***REMOVED***

  // Crud spec update format
  if(op.updateOne || op.updateMany || op.replaceOne) ***REMOVED***
    var multi = op.updateOne || op.replaceOne ? false : true;
    var operation = ***REMOVED***q: op[key].filter, u: op[key].update || op[key].replacement, multi: multi***REMOVED***
    if(op[key].upsert) operation.upsert = true;
    return addToOperationsList(this, common.UPDATE, operation);
  ***REMOVED***

  // Remove operations
  if(op.removeOne || op.removeMany || (op.deleteOne && op.deleteOne.q) || op.deleteMany && op.deleteMany.q) ***REMOVED***
    op[key].limit = op.removeOne ? 1 : 0;
    return addToOperationsList(this, common.REMOVE, op[key]);
  ***REMOVED***

  // Crud spec delete operations, less efficient
  if(op.deleteOne || op.deleteMany) ***REMOVED***
    var limit = op.deleteOne ? 1 : 0;
    operation = ***REMOVED***q: op[key].filter, limit: limit***REMOVED***
    return addToOperationsList(this, common.REMOVE, operation);
  ***REMOVED***

  // Insert operations
  if(op.insertOne && op.insertOne.document == null) ***REMOVED***
    if(forceServerObjectId !== true && op.insertOne._id == null) op.insertOne._id = new ObjectID();
    return addToOperationsList(this, common.INSERT, op.insertOne);
  ***REMOVED*** else if(op.insertOne && op.insertOne.document) ***REMOVED***
    if(forceServerObjectId !== true && op.insertOne.document._id == null) op.insertOne.document._id = new ObjectID();
    return addToOperationsList(this, common.INSERT, op.insertOne.document);
  ***REMOVED***

  if(op.insertMany) ***REMOVED***
    for(var i = 0; i < op.insertMany.length; i++) ***REMOVED***
      if(forceServerObjectId !== true && op.insertMany[i]._id == null) op.insertMany[i]._id = new ObjectID();
      addToOperationsList(this, common.INSERT, op.insertMany[i]);
    ***REMOVED***

    return;
  ***REMOVED***

  // No valid type of operation
  throw toError("bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany");
***REMOVED***

//
// Execute the command
var executeBatch = function(self, batch, callback) ***REMOVED***
  var finalOptions = ***REMOVED***ordered: false***REMOVED***
  if(self.s.writeConcern != null) ***REMOVED***
    finalOptions.writeConcern = self.s.writeConcern;
  ***REMOVED***

  var resultHandler = function(err, result) ***REMOVED***
		// Error is a driver related error not a bulk op error, terminate
		if(err && err.driver || err && err.message) ***REMOVED***
			return handleCallback(callback, err);
		***REMOVED***

    // If we have and error
    if(err) err.ok = 0;
    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, result));
  ***REMOVED***

	// Set an operationIf if provided
	if(self.operationId) ***REMOVED***
		resultHandler.operationId = self.operationId;
	***REMOVED***

	// Serialize functions
	if(self.s.options.serializeFunctions) ***REMOVED***
		finalOptions.serializeFunctions = true
	***REMOVED***

  // Is the bypassDocumentValidation options specific
  if(self.s.bypassDocumentValidation == true) ***REMOVED***
    finalOptions.bypassDocumentValidation = true;
  ***REMOVED***

  try ***REMOVED***
    if(batch.batchType == common.INSERT) ***REMOVED***
      self.s.topology.insert(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);
    ***REMOVED*** else if(batch.batchType == common.UPDATE) ***REMOVED***
      self.s.topology.update(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);
    ***REMOVED*** else if(batch.batchType == common.REMOVE) ***REMOVED***
      self.s.topology.remove(self.s.collection.namespace, batch.operations, finalOptions, resultHandler);
    ***REMOVED***
  ***REMOVED*** catch(err) ***REMOVED***
    // Force top level error
    err.ok = 0;
    // Merge top level error and return
    handleCallback(callback, null, mergeBatchResults(false, batch, self.s.bulkResult, err, null));
  ***REMOVED***
***REMOVED***

//
// Execute all the commands
var executeBatches = function(self, callback) ***REMOVED***
  var numberOfCommandsToExecute = self.s.batches.length;
  // Execute over all the batches
  for(var i = 0; i < self.s.batches.length; i++) ***REMOVED***
    executeBatch(self, self.s.batches[i], function(err) ***REMOVED***
			// Driver layer error capture it
			if(err) error = err;
			// Count down the number of commands left to execute
      numberOfCommandsToExecute = numberOfCommandsToExecute - 1;

      // Execute
      if(numberOfCommandsToExecute == 0) ***REMOVED***
				// Driver level error
				if(error) return handleCallback(callback, error);
				// Treat write errors
        var error = self.s.bulkResult.writeErrors.length > 0 ? toError(self.s.bulkResult.writeErrors[0]) : null;
        handleCallback(callback, error, new BulkWriteResult(self.s.bulkResult));
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***
***REMOVED***

/**
 * The callback format for results
 * @callback UnorderedBulkOperation~resultCallback
 * @param ***REMOVED***MongoError***REMOVED*** error An error instance representing the error during the execution.
 * @param ***REMOVED***BulkWriteResult***REMOVED*** result The bulk write result.
 */

/**
 * Execute the ordered bulk operation
 *
 * @method
 * @param ***REMOVED***object***REMOVED*** [options=null] Optional settings.
 * @param ***REMOVED***(number|string)***REMOVED*** [options.w=null] The write concern.
 * @param ***REMOVED***number***REMOVED*** [options.wtimeout=null] The write concern timeout.
 * @param ***REMOVED***boolean***REMOVED*** [options.j=false] Specify a journal write concern.
 * @param ***REMOVED***boolean***REMOVED*** [options.fsync=false] Specify a file sync write concern.
 * @param ***REMOVED***UnorderedBulkOperation~resultCallback***REMOVED*** [callback] The result callback
 * @throws ***REMOVED***MongoError***REMOVED***
 * @return ***REMOVED***Promise***REMOVED*** returns Promise if no callback passed
 */
UnorderedBulkOperation.prototype.execute = function(_writeConcern, callback) ***REMOVED***
  var self = this;
  if(this.s.executed) throw toError("batch cannot be re-executed");
  if(typeof _writeConcern == 'function') ***REMOVED***
    callback = _writeConcern;
  ***REMOVED*** else if(_writeConcern && typeof _writeConcern == 'object') ***REMOVED***
    this.s.writeConcern = _writeConcern;
  ***REMOVED***

  // If we have current batch
  if(this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);
  if(this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);
  if(this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);

  // If we have no operations in the bulk raise an error
  if(this.s.batches.length == 0) ***REMOVED***
    throw toError("Invalid Operation, No operations in bulk");
  ***REMOVED***

  // Execute using callback
  if(typeof callback == 'function') return executeBatches(this, callback);

  // Return a Promise
  return new this.s.promiseLibrary(function(resolve, reject) ***REMOVED***
    executeBatches(self, function(err, r) ***REMOVED***
      if(err) return reject(err);
      resolve(r);
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***

define.classMethod('execute', ***REMOVED***callback: true, promise:false***REMOVED***);

/**
 * Returns an unordered batch object
 * @ignore
 */
var initializeUnorderedBulkOp = function(topology, collection, options) ***REMOVED***
	return new UnorderedBulkOperation(topology, collection, options);
***REMOVED***

initializeUnorderedBulkOp.UnorderedBulkOperation = UnorderedBulkOperation;
module.exports = initializeUnorderedBulkOp;
module.exports.Bulk = UnorderedBulkOperation;
