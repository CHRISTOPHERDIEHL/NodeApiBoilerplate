var Joi = require('joi');
var timespan = require('./lib/timespan');
var xtend = require('xtend');
var jws = require('jws');
var once = require('lodash.once');

var sign_options_schema = Joi.object().keys(***REMOVED***
  expiresIn: [Joi.number().integer(), Joi.string()],
  notBefore: [Joi.number().integer(), Joi.string()],
  audience: [Joi.string(), Joi.array()],
  algorithm: Joi.string().valid('RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'ES512', 'HS256', 'HS384', 'HS512', 'none'),
  header: Joi.object(),
  encoding: Joi.string(),
  issuer: Joi.string(),
  subject: Joi.string(),
  jwtid: Joi.string(),
  noTimestamp: Joi.boolean(),
  keyid: Joi.string()
***REMOVED***);

var registered_claims_schema = Joi.object().keys(***REMOVED***
  iat: Joi.number(),
  exp: Joi.number(),
  nbf: Joi.number()
***REMOVED***).unknown();


var options_to_payload = ***REMOVED***
  'audience': 'aud',
  'issuer': 'iss',
  'subject': 'sub',
  'jwtid': 'jti'
***REMOVED***;

var options_for_objects = [
  'expiresIn',
  'notBefore',
  'noTimestamp',
  'audience',
  'issuer',
  'subject',
  'jwtid',
];

module.exports = function (payload, secretOrPrivateKey, options, callback) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;

  var isObjectPayload = typeof payload === 'object' &&
                        !Buffer.isBuffer(payload);

  var header = xtend(***REMOVED***
    alg: options.algorithm || 'HS256',
    typ: isObjectPayload ? 'JWT' : undefined,
    kid: options.keyid
  ***REMOVED***, options.header);

  function failure(err) ***REMOVED***
    if (callback) ***REMOVED***
      return callback(err);
    ***REMOVED***
    throw err;
  ***REMOVED***


  if (typeof payload === 'undefined') ***REMOVED***
    return failure(new Error('payload is required'));
  ***REMOVED*** else if (isObjectPayload) ***REMOVED***
    var payload_validation_result = registered_claims_schema.validate(payload);

    if (payload_validation_result.error) ***REMOVED***
      return failure(payload_validation_result.error);
    ***REMOVED***

    payload = xtend(payload);
  ***REMOVED*** else ***REMOVED***
    var invalid_options = options_for_objects.filter(function (opt) ***REMOVED***
      return typeof options[opt] !== 'undefined';
    ***REMOVED***);

    if (invalid_options.length > 0) ***REMOVED***
      return failure(new Error('invalid ' + invalid_options.join(',') + ' option for ' + (typeof payload ) + ' payload'));
    ***REMOVED***
  ***REMOVED***

  if (typeof payload.exp !== 'undefined' && typeof options.expiresIn !== 'undefined') ***REMOVED***
    return failure(new Error('Bad "options.expiresIn" option the payload already has an "exp" property.'));
  ***REMOVED***

  if (typeof payload.nbf !== 'undefined' && typeof options.notBefore !== 'undefined') ***REMOVED***
    return failure(new Error('Bad "options.notBefore" option the payload already has an "nbf" property.'));
  ***REMOVED***

  var validation_result = sign_options_schema.validate(options);

  if (validation_result.error) ***REMOVED***
    return failure(validation_result.error);
  ***REMOVED***

  var timestamp = payload.iat || Math.floor(Date.now() / 1000);

  if (!options.noTimestamp) ***REMOVED***
    payload.iat = timestamp;
  ***REMOVED*** else ***REMOVED***
    delete payload.iat;
  ***REMOVED***

  if (typeof options.notBefore !== 'undefined') ***REMOVED***
    payload.nbf = timespan(options.notBefore);
    if (typeof payload.nbf === 'undefined') ***REMOVED***
      return failure(new Error('"notBefore" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
    ***REMOVED***
  ***REMOVED***

  if (typeof options.expiresIn !== 'undefined' && typeof payload === 'object') ***REMOVED***
    payload.exp = timespan(options.expiresIn, timestamp);
    if (typeof payload.exp === 'undefined') ***REMOVED***
      return failure(new Error('"expiresIn" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
    ***REMOVED***
  ***REMOVED***

  Object.keys(options_to_payload).forEach(function (key) ***REMOVED***
    var claim = options_to_payload[key];
    if (typeof options[key] !== 'undefined') ***REMOVED***
      if (typeof payload[claim] !== 'undefined') ***REMOVED***
        return failure(new Error('Bad "options.' + key + '" option. The payload already has an "' + claim + '" property.'));
      ***REMOVED***
      payload[claim] = options[key];
    ***REMOVED***
  ***REMOVED***);

  var encoding = options.encoding || 'utf8';

  if (typeof callback === 'function') ***REMOVED***
    callback = callback && once(callback);

    jws.createSign(***REMOVED***
      header: header,
      privateKey: secretOrPrivateKey,
      payload: payload,
      encoding: encoding
    ***REMOVED***).once('error', callback)
      .once('done', function (signature) ***REMOVED***
        callback(null, signature);
      ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    return jws.sign(***REMOVED***header: header, payload: payload, secret: secretOrPrivateKey, encoding: encoding***REMOVED***);
  ***REMOVED***
***REMOVED***;
