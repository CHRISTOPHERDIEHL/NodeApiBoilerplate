var jwt = require('../index');

var expect = require('chai').expect;
var assert = require('chai').assert;

describe('HS256', function() ***REMOVED***

  describe('when signing a token', function() ***REMOVED***
    var secret = 'shhhhhh';

    var token = jwt.sign(***REMOVED*** foo: 'bar' ***REMOVED***, secret, ***REMOVED*** algorithm: 'HS256' ***REMOVED***);

    it('should be syntactically valid', function() ***REMOVED***
      expect(token).to.be.a('string');
      expect(token.split('.')).to.have.length(3);
    ***REMOVED***);

    it('should without options', function(done) ***REMOVED***
      var callback = function(err, decoded) ***REMOVED***
        assert.ok(decoded.foo);
        assert.equal('bar', decoded.foo);
        done();
      ***REMOVED***;
      callback.issuer = "shouldn't affect";
      jwt.verify(token, secret, callback );
    ***REMOVED***);

    it('should validate with secret', function(done) ***REMOVED***
      jwt.verify(token, secret, function(err, decoded) ***REMOVED***
        assert.ok(decoded.foo);
        assert.equal('bar', decoded.foo);
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should throw with invalid secret', function(done) ***REMOVED***
      jwt.verify(token, 'invalid secret', function(err, decoded) ***REMOVED***
        assert.isUndefined(decoded);
        assert.isNotNull(err);
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should throw with secret and token not signed', function(done) ***REMOVED***
      var signed = jwt.sign(***REMOVED*** foo: 'bar' ***REMOVED***, secret, ***REMOVED*** algorithm: 'none' ***REMOVED***);
      var unsigned = signed.split('.')[0] + '.' + signed.split('.')[1] + '.';
      jwt.verify(unsigned, 'secret', function(err, decoded) ***REMOVED***
        assert.isUndefined(decoded);
        assert.isNotNull(err);
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should throw when verifying null', function(done) ***REMOVED***
      jwt.verify(null, 'secret', function(err, decoded) ***REMOVED***
        assert.isUndefined(decoded);
        assert.isNotNull(err);
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should return an error when the token is expired', function(done) ***REMOVED***
      var token = jwt.sign(***REMOVED*** exp: 1 ***REMOVED***, secret, ***REMOVED*** algorithm: 'HS256' ***REMOVED***);
      jwt.verify(token, secret, ***REMOVED*** algorithm: 'HS256' ***REMOVED***, function(err, decoded) ***REMOVED***
        assert.isUndefined(decoded);
        assert.isNotNull(err);
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should NOT return an error when the token is expired with "ignoreExpiration"', function(done) ***REMOVED***
      var token = jwt.sign(***REMOVED*** exp: 1, foo: 'bar' ***REMOVED***, secret, ***REMOVED*** algorithm: 'HS256' ***REMOVED***);
      jwt.verify(token, secret, ***REMOVED*** algorithm: 'HS256', ignoreExpiration: true ***REMOVED***, function(err, decoded) ***REMOVED***
        assert.ok(decoded.foo);
        assert.equal('bar', decoded.foo);
        assert.isNull(err);
        done();
      ***REMOVED***);
    ***REMOVED***);

  ***REMOVED***);
***REMOVED***);
