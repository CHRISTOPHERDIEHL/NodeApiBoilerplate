var jwt = require('../index');
var expect = require('chai').expect;
var jws = require('jws');

describe('signing a token asynchronously', function() ***REMOVED***

  describe('when signing a token', function() ***REMOVED***
    var secret = 'shhhhhh';

    it('should return the same result as singing synchronously', function(done) ***REMOVED***
      jwt.sign(***REMOVED*** foo: 'bar' ***REMOVED***, secret, ***REMOVED*** algorithm: 'HS256' ***REMOVED***, function (err, asyncToken) ***REMOVED***
        if (err) return done(err);
        var syncToken = jwt.sign(***REMOVED*** foo: 'bar' ***REMOVED***, secret, ***REMOVED*** algorithm: 'HS256' ***REMOVED***);
        expect(asyncToken).to.be.a('string');
        expect(asyncToken.split('.')).to.have.length(3);
        expect(asyncToken).to.equal(syncToken);
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should work', function (done) ***REMOVED***
      jwt.sign(***REMOVED***abc: 1***REMOVED***, "secret", ***REMOVED******REMOVED***, function (err, res) ***REMOVED***
        expect(err).to.be.null();
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should return error when secret is not a cert for RS256', function(done) ***REMOVED***
      //this throw an error because the secret is not a cert and RS256 requires a cert.
      jwt.sign(***REMOVED*** foo: 'bar' ***REMOVED***, secret, ***REMOVED*** algorithm: 'RS256' ***REMOVED***, function (err) ***REMOVED***
        expect(err).to.be.ok();
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should return error on wrong arguments', function(done) ***REMOVED***
      //this throw an error because the secret is not a cert and RS256 requires a cert.
      jwt.sign(***REMOVED*** foo: 'bar' ***REMOVED***, secret, ***REMOVED*** notBefore: ***REMOVED******REMOVED*** ***REMOVED***, function (err) ***REMOVED***
        expect(err).to.be.ok();
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should return error on wrong arguments (2)', function(done) ***REMOVED***
      jwt.sign('string', 'secret', ***REMOVED***noTimestamp: true***REMOVED***, function (err) ***REMOVED***
        expect(err).to.be.ok();
        expect(err).to.be.instanceof(Error);
        done();
      ***REMOVED***);
    ***REMOVED***);

    it('should not stringify the payload', function (done) ***REMOVED***
      jwt.sign('string', 'secret', ***REMOVED******REMOVED***, function (err, token) ***REMOVED***
        if (err) ***REMOVED*** return done(err); ***REMOVED***
        expect(jws.decode(token).payload).to.equal('string');
        done();
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***);
