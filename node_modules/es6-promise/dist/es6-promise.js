/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
 * @version   3.2.1
 */

(function() ***REMOVED***
    "use strict";
    function lib$es6$promise$utils$$objectOrFunction(x) ***REMOVED***
      return typeof x === 'function' || (typeof x === 'object' && x !== null);
    ***REMOVED***

    function lib$es6$promise$utils$$isFunction(x) ***REMOVED***
      return typeof x === 'function';
    ***REMOVED***

    function lib$es6$promise$utils$$isMaybeThenable(x) ***REMOVED***
      return typeof x === 'object' && x !== null;
    ***REMOVED***

    var lib$es6$promise$utils$$_isArray;
    if (!Array.isArray) ***REMOVED***
      lib$es6$promise$utils$$_isArray = function (x) ***REMOVED***
        return Object.prototype.toString.call(x) === '[object Array]';
      ***REMOVED***;
    ***REMOVED*** else ***REMOVED***
      lib$es6$promise$utils$$_isArray = Array.isArray;
    ***REMOVED***

    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
    var lib$es6$promise$asap$$len = 0;
    var lib$es6$promise$asap$$vertxNext;
    var lib$es6$promise$asap$$customSchedulerFn;

    var lib$es6$promise$asap$$asap = function asap(callback, arg) ***REMOVED***
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
      lib$es6$promise$asap$$len += 2;
      if (lib$es6$promise$asap$$len === 2) ***REMOVED***
        // If len is 2, that means that we need to schedule an async flush.
        // If additional callbacks are queued before the queue is flushed, they
        // will be processed by this flush that we are scheduling.
        if (lib$es6$promise$asap$$customSchedulerFn) ***REMOVED***
          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
        ***REMOVED*** else ***REMOVED***
          lib$es6$promise$asap$$scheduleFlush();
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    function lib$es6$promise$asap$$setScheduler(scheduleFn) ***REMOVED***
      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
    ***REMOVED***

    function lib$es6$promise$asap$$setAsap(asapFn) ***REMOVED***
      lib$es6$promise$asap$$asap = asapFn;
    ***REMOVED***

    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || ***REMOVED******REMOVED***;
    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
    var lib$es6$promise$asap$$isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ***REMOVED******REMOVED***.toString.call(process) === '[object process]';

    // test for web worker but not in IE10
    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
      typeof importScripts !== 'undefined' &&
      typeof MessageChannel !== 'undefined';

    // node
    function lib$es6$promise$asap$$useNextTick() ***REMOVED***
      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
      // see https://github.com/cujojs/when/issues/410 for details
      return function() ***REMOVED***
        process.nextTick(lib$es6$promise$asap$$flush);
      ***REMOVED***;
    ***REMOVED***

    // vertx
    function lib$es6$promise$asap$$useVertxTimer() ***REMOVED***
      return function() ***REMOVED***
        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
      ***REMOVED***;
    ***REMOVED***

    function lib$es6$promise$asap$$useMutationObserver() ***REMOVED***
      var iterations = 0;
      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
      var node = document.createTextNode('');
      observer.observe(node, ***REMOVED*** characterData: true ***REMOVED***);

      return function() ***REMOVED***
        node.data = (iterations = ++iterations % 2);
      ***REMOVED***;
    ***REMOVED***

    // web worker
    function lib$es6$promise$asap$$useMessageChannel() ***REMOVED***
      var channel = new MessageChannel();
      channel.port1.onmessage = lib$es6$promise$asap$$flush;
      return function () ***REMOVED***
        channel.port2.postMessage(0);
      ***REMOVED***;
    ***REMOVED***

    function lib$es6$promise$asap$$useSetTimeout() ***REMOVED***
      return function() ***REMOVED***
        setTimeout(lib$es6$promise$asap$$flush, 1);
      ***REMOVED***;
    ***REMOVED***

    var lib$es6$promise$asap$$queue = new Array(1000);
    function lib$es6$promise$asap$$flush() ***REMOVED***
      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) ***REMOVED***
        var callback = lib$es6$promise$asap$$queue[i];
        var arg = lib$es6$promise$asap$$queue[i+1];

        callback(arg);

        lib$es6$promise$asap$$queue[i] = undefined;
        lib$es6$promise$asap$$queue[i+1] = undefined;
      ***REMOVED***

      lib$es6$promise$asap$$len = 0;
    ***REMOVED***

    function lib$es6$promise$asap$$attemptVertx() ***REMOVED***
      try ***REMOVED***
        var r = require;
        var vertx = r('vertx');
        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
        return lib$es6$promise$asap$$useVertxTimer();
      ***REMOVED*** catch(e) ***REMOVED***
        return lib$es6$promise$asap$$useSetTimeout();
      ***REMOVED***
    ***REMOVED***

    var lib$es6$promise$asap$$scheduleFlush;
    // Decide what async method to use to triggering processing of queued callbacks:
    if (lib$es6$promise$asap$$isNode) ***REMOVED***
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
    ***REMOVED*** else if (lib$es6$promise$asap$$BrowserMutationObserver) ***REMOVED***
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
    ***REMOVED*** else if (lib$es6$promise$asap$$isWorker) ***REMOVED***
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
    ***REMOVED*** else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') ***REMOVED***
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();
    ***REMOVED*** else ***REMOVED***
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
    ***REMOVED***
    function lib$es6$promise$then$$then(onFulfillment, onRejection) ***REMOVED***
      var parent = this;

      var child = new this.constructor(lib$es6$promise$$internal$$noop);

      if (child[lib$es6$promise$$internal$$PROMISE_ID] === undefined) ***REMOVED***
        lib$es6$promise$$internal$$makePromise(child);
      ***REMOVED***

      var state = parent._state;

      if (state) ***REMOVED***
        var callback = arguments[state - 1];
        lib$es6$promise$asap$$asap(function()***REMOVED***
          lib$es6$promise$$internal$$invokeCallback(state, child, callback, parent._result);
        ***REMOVED***);
      ***REMOVED*** else ***REMOVED***
        lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
      ***REMOVED***

      return child;
    ***REMOVED***
    var lib$es6$promise$then$$default = lib$es6$promise$then$$then;
    function lib$es6$promise$promise$resolve$$resolve(object) ***REMOVED***
      /*jshint validthis:true */
      var Constructor = this;

      if (object && typeof object === 'object' && object.constructor === Constructor) ***REMOVED***
        return object;
      ***REMOVED***

      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$resolve(promise, object);
      return promise;
    ***REMOVED***
    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
    var lib$es6$promise$$internal$$PROMISE_ID = Math.random().toString(36).substring(16);

    function lib$es6$promise$$internal$$noop() ***REMOVED******REMOVED***

    var lib$es6$promise$$internal$$PENDING   = void 0;
    var lib$es6$promise$$internal$$FULFILLED = 1;
    var lib$es6$promise$$internal$$REJECTED  = 2;

    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$selfFulfillment() ***REMOVED***
      return new TypeError("You cannot resolve a promise with itself");
    ***REMOVED***

    function lib$es6$promise$$internal$$cannotReturnOwn() ***REMOVED***
      return new TypeError('A promises callback cannot return that same promise.');
    ***REMOVED***

    function lib$es6$promise$$internal$$getThen(promise) ***REMOVED***
      try ***REMOVED***
        return promise.then;
      ***REMOVED*** catch(error) ***REMOVED***
        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
        return lib$es6$promise$$internal$$GET_THEN_ERROR;
      ***REMOVED***
    ***REMOVED***

    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) ***REMOVED***
      try ***REMOVED***
        then.call(value, fulfillmentHandler, rejectionHandler);
      ***REMOVED*** catch(e) ***REMOVED***
        return e;
      ***REMOVED***
    ***REMOVED***

    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) ***REMOVED***
       lib$es6$promise$asap$$asap(function(promise) ***REMOVED***
        var sealed = false;
        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) ***REMOVED***
          if (sealed) ***REMOVED*** return; ***REMOVED***
          sealed = true;
          if (thenable !== value) ***REMOVED***
            lib$es6$promise$$internal$$resolve(promise, value);
          ***REMOVED*** else ***REMOVED***
            lib$es6$promise$$internal$$fulfill(promise, value);
          ***REMOVED***
        ***REMOVED***, function(reason) ***REMOVED***
          if (sealed) ***REMOVED*** return; ***REMOVED***
          sealed = true;

          lib$es6$promise$$internal$$reject(promise, reason);
        ***REMOVED***, 'Settle: ' + (promise._label || ' unknown promise'));

        if (!sealed && error) ***REMOVED***
          sealed = true;
          lib$es6$promise$$internal$$reject(promise, error);
        ***REMOVED***
      ***REMOVED***, promise);
    ***REMOVED***

    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) ***REMOVED***
      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) ***REMOVED***
        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
      ***REMOVED*** else if (thenable._state === lib$es6$promise$$internal$$REJECTED) ***REMOVED***
        lib$es6$promise$$internal$$reject(promise, thenable._result);
      ***REMOVED*** else ***REMOVED***
        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) ***REMOVED***
          lib$es6$promise$$internal$$resolve(promise, value);
        ***REMOVED***, function(reason) ***REMOVED***
          lib$es6$promise$$internal$$reject(promise, reason);
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***

    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable, then) ***REMOVED***
      if (maybeThenable.constructor === promise.constructor &&
          then === lib$es6$promise$then$$default &&
          constructor.resolve === lib$es6$promise$promise$resolve$$default) ***REMOVED***
        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
      ***REMOVED*** else ***REMOVED***
        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) ***REMOVED***
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
        ***REMOVED*** else if (then === undefined) ***REMOVED***
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        ***REMOVED*** else if (lib$es6$promise$utils$$isFunction(then)) ***REMOVED***
          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
        ***REMOVED*** else ***REMOVED***
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    function lib$es6$promise$$internal$$resolve(promise, value) ***REMOVED***
      if (promise === value) ***REMOVED***
        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());
      ***REMOVED*** else if (lib$es6$promise$utils$$objectOrFunction(value)) ***REMOVED***
        lib$es6$promise$$internal$$handleMaybeThenable(promise, value, lib$es6$promise$$internal$$getThen(value));
      ***REMOVED*** else ***REMOVED***
        lib$es6$promise$$internal$$fulfill(promise, value);
      ***REMOVED***
    ***REMOVED***

    function lib$es6$promise$$internal$$publishRejection(promise) ***REMOVED***
      if (promise._onerror) ***REMOVED***
        promise._onerror(promise._result);
      ***REMOVED***

      lib$es6$promise$$internal$$publish(promise);
    ***REMOVED***

    function lib$es6$promise$$internal$$fulfill(promise, value) ***REMOVED***
      if (promise._state !== lib$es6$promise$$internal$$PENDING) ***REMOVED*** return; ***REMOVED***

      promise._result = value;
      promise._state = lib$es6$promise$$internal$$FULFILLED;

      if (promise._subscribers.length !== 0) ***REMOVED***
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
      ***REMOVED***
    ***REMOVED***

    function lib$es6$promise$$internal$$reject(promise, reason) ***REMOVED***
      if (promise._state !== lib$es6$promise$$internal$$PENDING) ***REMOVED*** return; ***REMOVED***
      promise._state = lib$es6$promise$$internal$$REJECTED;
      promise._result = reason;

      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
    ***REMOVED***

    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) ***REMOVED***
      var subscribers = parent._subscribers;
      var length = subscribers.length;

      parent._onerror = null;

      subscribers[length] = child;
      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;

      if (length === 0 && parent._state) ***REMOVED***
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
      ***REMOVED***
    ***REMOVED***

    function lib$es6$promise$$internal$$publish(promise) ***REMOVED***
      var subscribers = promise._subscribers;
      var settled = promise._state;

      if (subscribers.length === 0) ***REMOVED*** return; ***REMOVED***

      var child, callback, detail = promise._result;

      for (var i = 0; i < subscribers.length; i += 3) ***REMOVED***
        child = subscribers[i];
        callback = subscribers[i + settled];

        if (child) ***REMOVED***
          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
        ***REMOVED*** else ***REMOVED***
          callback(detail);
        ***REMOVED***
      ***REMOVED***

      promise._subscribers.length = 0;
    ***REMOVED***

    function lib$es6$promise$$internal$$ErrorObject() ***REMOVED***
      this.error = null;
    ***REMOVED***

    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$tryCatch(callback, detail) ***REMOVED***
      try ***REMOVED***
        return callback(detail);
      ***REMOVED*** catch(e) ***REMOVED***
        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
      ***REMOVED***
    ***REMOVED***

    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) ***REMOVED***
      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
          value, error, succeeded, failed;

      if (hasCallback) ***REMOVED***
        value = lib$es6$promise$$internal$$tryCatch(callback, detail);

        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) ***REMOVED***
          failed = true;
          error = value.error;
          value = null;
        ***REMOVED*** else ***REMOVED***
          succeeded = true;
        ***REMOVED***

        if (promise === value) ***REMOVED***
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
          return;
        ***REMOVED***

      ***REMOVED*** else ***REMOVED***
        value = detail;
        succeeded = true;
      ***REMOVED***

      if (promise._state !== lib$es6$promise$$internal$$PENDING) ***REMOVED***
        // noop
      ***REMOVED*** else if (hasCallback && succeeded) ***REMOVED***
        lib$es6$promise$$internal$$resolve(promise, value);
      ***REMOVED*** else if (failed) ***REMOVED***
        lib$es6$promise$$internal$$reject(promise, error);
      ***REMOVED*** else if (settled === lib$es6$promise$$internal$$FULFILLED) ***REMOVED***
        lib$es6$promise$$internal$$fulfill(promise, value);
      ***REMOVED*** else if (settled === lib$es6$promise$$internal$$REJECTED) ***REMOVED***
        lib$es6$promise$$internal$$reject(promise, value);
      ***REMOVED***
    ***REMOVED***

    function lib$es6$promise$$internal$$initializePromise(promise, resolver) ***REMOVED***
      try ***REMOVED***
        resolver(function resolvePromise(value)***REMOVED***
          lib$es6$promise$$internal$$resolve(promise, value);
        ***REMOVED***, function rejectPromise(reason) ***REMOVED***
          lib$es6$promise$$internal$$reject(promise, reason);
        ***REMOVED***);
      ***REMOVED*** catch(e) ***REMOVED***
        lib$es6$promise$$internal$$reject(promise, e);
      ***REMOVED***
    ***REMOVED***

    var lib$es6$promise$$internal$$id = 0;
    function lib$es6$promise$$internal$$nextId() ***REMOVED***
      return lib$es6$promise$$internal$$id++;
    ***REMOVED***

    function lib$es6$promise$$internal$$makePromise(promise) ***REMOVED***
      promise[lib$es6$promise$$internal$$PROMISE_ID] = lib$es6$promise$$internal$$id++;
      promise._state = undefined;
      promise._result = undefined;
      promise._subscribers = [];
    ***REMOVED***

    function lib$es6$promise$promise$all$$all(entries) ***REMOVED***
      return new lib$es6$promise$enumerator$$default(this, entries).promise;
    ***REMOVED***
    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
    function lib$es6$promise$promise$race$$race(entries) ***REMOVED***
      /*jshint validthis:true */
      var Constructor = this;

      if (!lib$es6$promise$utils$$isArray(entries)) ***REMOVED***
        return new Constructor(function(resolve, reject) ***REMOVED***
          reject(new TypeError('You must pass an array to race.'));
        ***REMOVED***);
      ***REMOVED*** else ***REMOVED***
        return new Constructor(function(resolve, reject) ***REMOVED***
          var length = entries.length;
          for (var i = 0; i < length; i++) ***REMOVED***
            Constructor.resolve(entries[i]).then(resolve, reject);
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***
    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
    function lib$es6$promise$promise$reject$$reject(reason) ***REMOVED***
      /*jshint validthis:true */
      var Constructor = this;
      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$reject(promise, reason);
      return promise;
    ***REMOVED***
    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;


    function lib$es6$promise$promise$$needsResolver() ***REMOVED***
      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
    ***REMOVED***

    function lib$es6$promise$promise$$needsNew() ***REMOVED***
      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
    ***REMOVED***

    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
    /**
      Promise objects represent the eventual result of an asynchronous operation. The
      primary way of interacting with a promise is through its `then` method, which
      registers callbacks to receive either a promise's eventual value or the reason
      why the promise cannot be fulfilled.

      Terminology
      -----------

      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
      - `thenable` is an object or function that defines a `then` method.
      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
      - `exception` is a value that is thrown using the throw statement.
      - `reason` is a value that indicates why a promise was rejected.
      - `settled` the final resting state of a promise, fulfilled or rejected.

      A promise can be in one of three states: pending, fulfilled, or rejected.

      Promises that are fulfilled have a fulfillment value and are in the fulfilled
      state.  Promises that are rejected have a rejection reason and are in the
      rejected state.  A fulfillment value is never a thenable.

      Promises can also be said to *resolve* a value.  If this value is also a
      promise, then the original promise's settled state will match the value's
      settled state.  So a promise that *resolves* a promise that rejects will
      itself reject, and a promise that *resolves* a promise that fulfills will
      itself fulfill.


      Basic Usage:
      ------------

      ```js
      var promise = new Promise(function(resolve, reject) ***REMOVED***
        // on success
        resolve(value);

        // on failure
        reject(reason);
      ***REMOVED***);

      promise.then(function(value) ***REMOVED***
        // on fulfillment
      ***REMOVED***, function(reason) ***REMOVED***
        // on rejection
      ***REMOVED***);
      ```

      Advanced Usage:
      ---------------

      Promises shine when abstracting away asynchronous interactions such as
      `XMLHttpRequest`s.

      ```js
      function getJSON(url) ***REMOVED***
        return new Promise(function(resolve, reject)***REMOVED***
          var xhr = new XMLHttpRequest();

          xhr.open('GET', url);
          xhr.onreadystatechange = handler;
          xhr.responseType = 'json';
          xhr.setRequestHeader('Accept', 'application/json');
          xhr.send();

          function handler() ***REMOVED***
            if (this.readyState === this.DONE) ***REMOVED***
              if (this.status === 200) ***REMOVED***
                resolve(this.response);
              ***REMOVED*** else ***REMOVED***
                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***;
        ***REMOVED***);
      ***REMOVED***

      getJSON('/posts.json').then(function(json) ***REMOVED***
        // on fulfillment
      ***REMOVED***, function(reason) ***REMOVED***
        // on rejection
      ***REMOVED***);
      ```

      Unlike callbacks, promises are great composable primitives.

      ```js
      Promise.all([
        getJSON('/posts'),
        getJSON('/comments')
      ]).then(function(values)***REMOVED***
        values[0] // => postsJSON
        values[1] // => commentsJSON

        return values;
      ***REMOVED***);
      ```

      @class Promise
      @param ***REMOVED***function***REMOVED*** resolver
      Useful for tooling.
      @constructor
    */
    function lib$es6$promise$promise$$Promise(resolver) ***REMOVED***
      this[lib$es6$promise$$internal$$PROMISE_ID] = lib$es6$promise$$internal$$nextId();
      this._result = this._state = undefined;
      this._subscribers = [];

      if (lib$es6$promise$$internal$$noop !== resolver) ***REMOVED***
        typeof resolver !== 'function' && lib$es6$promise$promise$$needsResolver();
        this instanceof lib$es6$promise$promise$$Promise ? lib$es6$promise$$internal$$initializePromise(this, resolver) : lib$es6$promise$promise$$needsNew();
      ***REMOVED***
    ***REMOVED***

    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;

    lib$es6$promise$promise$$Promise.prototype = ***REMOVED***
      constructor: lib$es6$promise$promise$$Promise,

    /**
      The primary way of interacting with a promise is through its `then` method,
      which registers callbacks to receive either a promise's eventual value or the
      reason why the promise cannot be fulfilled.

      ```js
      findUser().then(function(user)***REMOVED***
        // user is available
      ***REMOVED***, function(reason)***REMOVED***
        // user is unavailable, and you are given the reason why
      ***REMOVED***);
      ```

      Chaining
      --------

      The return value of `then` is itself a promise.  This second, 'downstream'
      promise is resolved with the return value of the first promise's fulfillment
      or rejection handler, or rejected if the handler throws an exception.

      ```js
      findUser().then(function (user) ***REMOVED***
        return user.name;
      ***REMOVED***, function (reason) ***REMOVED***
        return 'default name';
      ***REMOVED***).then(function (userName) ***REMOVED***
        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
        // will be `'default name'`
      ***REMOVED***);

      findUser().then(function (user) ***REMOVED***
        throw new Error('Found user, but still unhappy');
      ***REMOVED***, function (reason) ***REMOVED***
        throw new Error('`findUser` rejected and we're unhappy');
      ***REMOVED***).then(function (value) ***REMOVED***
        // never reached
      ***REMOVED***, function (reason) ***REMOVED***
        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
      ***REMOVED***);
      ```
      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

      ```js
      findUser().then(function (user) ***REMOVED***
        throw new PedagogicalException('Upstream error');
      ***REMOVED***).then(function (value) ***REMOVED***
        // never reached
      ***REMOVED***).then(function (value) ***REMOVED***
        // never reached
      ***REMOVED***, function (reason) ***REMOVED***
        // The `PedgagocialException` is propagated all the way down to here
      ***REMOVED***);
      ```

      Assimilation
      ------------

      Sometimes the value you want to propagate to a downstream promise can only be
      retrieved asynchronously. This can be achieved by returning a promise in the
      fulfillment or rejection handler. The downstream promise will then be pending
      until the returned promise is settled. This is called *assimilation*.

      ```js
      findUser().then(function (user) ***REMOVED***
        return findCommentsByAuthor(user);
      ***REMOVED***).then(function (comments) ***REMOVED***
        // The user's comments are now available
      ***REMOVED***);
      ```

      If the assimliated promise rejects, then the downstream promise will also reject.

      ```js
      findUser().then(function (user) ***REMOVED***
        return findCommentsByAuthor(user);
      ***REMOVED***).then(function (comments) ***REMOVED***
        // If `findCommentsByAuthor` fulfills, we'll have the value here
      ***REMOVED***, function (reason) ***REMOVED***
        // If `findCommentsByAuthor` rejects, we'll have the reason here
      ***REMOVED***);
      ```

      Simple Example
      --------------

      Synchronous Example

      ```javascript
      var result;

      try ***REMOVED***
        result = findResult();
        // success
      ***REMOVED*** catch(reason) ***REMOVED***
        // failure
      ***REMOVED***
      ```

      Errback Example

      ```js
      findResult(function(result, err)***REMOVED***
        if (err) ***REMOVED***
          // failure
        ***REMOVED*** else ***REMOVED***
          // success
        ***REMOVED***
      ***REMOVED***);
      ```

      Promise Example;

      ```javascript
      findResult().then(function(result)***REMOVED***
        // success
      ***REMOVED***, function(reason)***REMOVED***
        // failure
      ***REMOVED***);
      ```

      Advanced Example
      --------------

      Synchronous Example

      ```javascript
      var author, books;

      try ***REMOVED***
        author = findAuthor();
        books  = findBooksByAuthor(author);
        // success
      ***REMOVED*** catch(reason) ***REMOVED***
        // failure
      ***REMOVED***
      ```

      Errback Example

      ```js

      function foundBooks(books) ***REMOVED***

      ***REMOVED***

      function failure(reason) ***REMOVED***

      ***REMOVED***

      findAuthor(function(author, err)***REMOVED***
        if (err) ***REMOVED***
          failure(err);
          // failure
        ***REMOVED*** else ***REMOVED***
          try ***REMOVED***
            findBoooksByAuthor(author, function(books, err) ***REMOVED***
              if (err) ***REMOVED***
                failure(err);
              ***REMOVED*** else ***REMOVED***
                try ***REMOVED***
                  foundBooks(books);
                ***REMOVED*** catch(reason) ***REMOVED***
                  failure(reason);
                ***REMOVED***
              ***REMOVED***
            ***REMOVED***);
          ***REMOVED*** catch(error) ***REMOVED***
            failure(err);
          ***REMOVED***
          // success
        ***REMOVED***
      ***REMOVED***);
      ```

      Promise Example;

      ```javascript
      findAuthor().
        then(findBooksByAuthor).
        then(function(books)***REMOVED***
          // found books
      ***REMOVED***).catch(function(reason)***REMOVED***
        // something went wrong
      ***REMOVED***);
      ```

      @method then
      @param ***REMOVED***Function***REMOVED*** onFulfilled
      @param ***REMOVED***Function***REMOVED*** onRejected
      Useful for tooling.
      @return ***REMOVED***Promise***REMOVED***
    */
      then: lib$es6$promise$then$$default,

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.

      ```js
      function findAuthor()***REMOVED***
        throw new Error('couldn't find that author');
      ***REMOVED***

      // synchronous
      try ***REMOVED***
        findAuthor();
      ***REMOVED*** catch(reason) ***REMOVED***
        // something went wrong
      ***REMOVED***

      // async with promises
      findAuthor().catch(function(reason)***REMOVED***
        // something went wrong
      ***REMOVED***);
      ```

      @method catch
      @param ***REMOVED***Function***REMOVED*** onRejection
      Useful for tooling.
      @return ***REMOVED***Promise***REMOVED***
    */
      'catch': function(onRejection) ***REMOVED***
        return this.then(null, onRejection);
      ***REMOVED***
    ***REMOVED***;
    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;
    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) ***REMOVED***
      this._instanceConstructor = Constructor;
      this.promise = new Constructor(lib$es6$promise$$internal$$noop);

      if (!this.promise[lib$es6$promise$$internal$$PROMISE_ID]) ***REMOVED***
        lib$es6$promise$$internal$$makePromise(this.promise);
      ***REMOVED***

      if (lib$es6$promise$utils$$isArray(input)) ***REMOVED***
        this._input     = input;
        this.length     = input.length;
        this._remaining = input.length;

        this._result = new Array(this.length);

        if (this.length === 0) ***REMOVED***
          lib$es6$promise$$internal$$fulfill(this.promise, this._result);
        ***REMOVED*** else ***REMOVED***
          this.length = this.length || 0;
          this._enumerate();
          if (this._remaining === 0) ***REMOVED***
            lib$es6$promise$$internal$$fulfill(this.promise, this._result);
          ***REMOVED***
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        lib$es6$promise$$internal$$reject(this.promise, lib$es6$promise$enumerator$$validationError());
      ***REMOVED***
    ***REMOVED***

    function lib$es6$promise$enumerator$$validationError() ***REMOVED***
      return new Error('Array Methods must be provided an Array');
    ***REMOVED***

    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() ***REMOVED***
      var length  = this.length;
      var input   = this._input;

      for (var i = 0; this._state === lib$es6$promise$$internal$$PENDING && i < length; i++) ***REMOVED***
        this._eachEntry(input[i], i);
      ***REMOVED***
    ***REMOVED***;

    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) ***REMOVED***
      var c = this._instanceConstructor;
      var resolve = c.resolve;

      if (resolve === lib$es6$promise$promise$resolve$$default) ***REMOVED***
        var then = lib$es6$promise$$internal$$getThen(entry);

        if (then === lib$es6$promise$then$$default &&
            entry._state !== lib$es6$promise$$internal$$PENDING) ***REMOVED***
          this._settledAt(entry._state, i, entry._result);
        ***REMOVED*** else if (typeof then !== 'function') ***REMOVED***
          this._remaining--;
          this._result[i] = entry;
        ***REMOVED*** else if (c === lib$es6$promise$promise$$default) ***REMOVED***
          var promise = new c(lib$es6$promise$$internal$$noop);
          lib$es6$promise$$internal$$handleMaybeThenable(promise, entry, then);
          this._willSettleAt(promise, i);
        ***REMOVED*** else ***REMOVED***
          this._willSettleAt(new c(function(resolve) ***REMOVED*** resolve(entry); ***REMOVED***), i);
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        this._willSettleAt(resolve(entry), i);
      ***REMOVED***
    ***REMOVED***;

    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) ***REMOVED***
      var promise = this.promise;

      if (promise._state === lib$es6$promise$$internal$$PENDING) ***REMOVED***
        this._remaining--;

        if (state === lib$es6$promise$$internal$$REJECTED) ***REMOVED***
          lib$es6$promise$$internal$$reject(promise, value);
        ***REMOVED*** else ***REMOVED***
          this._result[i] = value;
        ***REMOVED***
      ***REMOVED***

      if (this._remaining === 0) ***REMOVED***
        lib$es6$promise$$internal$$fulfill(promise, this._result);
      ***REMOVED***
    ***REMOVED***;

    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) ***REMOVED***
      var enumerator = this;

      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) ***REMOVED***
        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
      ***REMOVED***, function(reason) ***REMOVED***
        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
      ***REMOVED***);
    ***REMOVED***;
    function lib$es6$promise$polyfill$$polyfill() ***REMOVED***
      var local;

      if (typeof global !== 'undefined') ***REMOVED***
          local = global;
      ***REMOVED*** else if (typeof self !== 'undefined') ***REMOVED***
          local = self;
      ***REMOVED*** else ***REMOVED***
          try ***REMOVED***
              local = Function('return this')();
          ***REMOVED*** catch (e) ***REMOVED***
              throw new Error('polyfill failed because global object is unavailable in this environment');
          ***REMOVED***
      ***REMOVED***

      var P = local.Promise;

      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) ***REMOVED***
        return;
      ***REMOVED***

      local.Promise = lib$es6$promise$promise$$default;
    ***REMOVED***
    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;

    var lib$es6$promise$umd$$ES6Promise = ***REMOVED***
      'Promise': lib$es6$promise$promise$$default,
      'polyfill': lib$es6$promise$polyfill$$default
    ***REMOVED***;

    /* global define:true module:true window: true */
    if (typeof define === 'function' && define['amd']) ***REMOVED***
      define(function() ***REMOVED*** return lib$es6$promise$umd$$ES6Promise; ***REMOVED***);
    ***REMOVED*** else if (typeof module !== 'undefined' && module['exports']) ***REMOVED***
      module['exports'] = lib$es6$promise$umd$$ES6Promise;
    ***REMOVED*** else if (typeof this !== 'undefined') ***REMOVED***
      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
    ***REMOVED***

    lib$es6$promise$polyfill$$default();
***REMOVED***).call(this);

