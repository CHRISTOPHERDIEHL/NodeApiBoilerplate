import ***REMOVED***
  noop,
  reject as _reject
***REMOVED*** from '../-internal';

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  var promise = new Promise(function(resolve, reject)***REMOVED***
    reject(new Error('WHOOPS'));
  ***REMOVED***);

  promise.then(function(value)***REMOVED***
    // Code here doesn't run because the promise is rejected!
  ***REMOVED***, function(reason)***REMOVED***
    // reason.message === 'WHOOPS'
  ***REMOVED***);
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  var promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value)***REMOVED***
    // Code here doesn't run because the promise is rejected!
  ***REMOVED***, function(reason)***REMOVED***
    // reason.message === 'WHOOPS'
  ***REMOVED***);
  ```

  @method reject
  @static
  @param ***REMOVED***Any***REMOVED*** reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return ***REMOVED***Promise***REMOVED*** a promise rejected with the given `reason`.
*/
export default function reject(reason) ***REMOVED***
  /*jshint validthis:true */
  var Constructor = this;
  var promise = new Constructor(noop);
  _reject(promise, reason);
  return promise;
***REMOVED***
