import ***REMOVED***
  isArray
***REMOVED*** from "../utils";

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  var promise1 = new Promise(function(resolve, reject)***REMOVED***
    setTimeout(function()***REMOVED***
      resolve('promise 1');
    ***REMOVED***, 200);
  ***REMOVED***);

  var promise2 = new Promise(function(resolve, reject)***REMOVED***
    setTimeout(function()***REMOVED***
      resolve('promise 2');
    ***REMOVED***, 100);
  ***REMOVED***);

  Promise.race([promise1, promise2]).then(function(result)***REMOVED***
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  ***REMOVED***);
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  var promise1 = new Promise(function(resolve, reject)***REMOVED***
    setTimeout(function()***REMOVED***
      resolve('promise 1');
    ***REMOVED***, 200);
  ***REMOVED***);

  var promise2 = new Promise(function(resolve, reject)***REMOVED***
    setTimeout(function()***REMOVED***
      reject(new Error('promise 2'));
    ***REMOVED***, 100);
  ***REMOVED***);

  Promise.race([promise1, promise2]).then(function(result)***REMOVED***
    // Code here never runs
  ***REMOVED***, function(reason)***REMOVED***
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  ***REMOVED***);
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param ***REMOVED***Array***REMOVED*** promises array of promises to observe
  Useful for tooling.
  @return ***REMOVED***Promise***REMOVED*** a promise which settles in the same way as the first passed
  promise to settle.
*/
export default function race(entries) ***REMOVED***
  /*jshint validthis:true */
  var Constructor = this;

  if (!isArray(entries)) ***REMOVED***
    return new Constructor(function(resolve, reject) ***REMOVED***
      reject(new TypeError('You must pass an array to race.'));
    ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
    return new Constructor(function(resolve, reject) ***REMOVED***
      var length = entries.length;
      for (var i = 0; i < length; i++) ***REMOVED***
        Constructor.resolve(entries[i]).then(resolve, reject);
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***
***REMOVED***
