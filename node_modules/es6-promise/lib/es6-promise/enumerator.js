import ***REMOVED***
  isArray,
  isMaybeThenable
***REMOVED*** from './utils';

import ***REMOVED***
  noop,
  reject,
  fulfill,
  subscribe,
  FULFILLED,
  REJECTED,
  PENDING,
  getThen,
  handleMaybeThenable
***REMOVED*** from './-internal';

import then from './then';
import Promise from './promise';
import originalResolve from './promise/resolve';
import originalThen from './then';
import ***REMOVED*** makePromise, PROMISE_ID ***REMOVED*** from './-internal';

export default Enumerator;
function Enumerator(Constructor, input) ***REMOVED***
  this._instanceConstructor = Constructor;
  this.promise = new Constructor(noop);

  if (!this.promise[PROMISE_ID]) ***REMOVED***
    makePromise(this.promise);
  ***REMOVED***

  if (isArray(input)) ***REMOVED***
    this._input     = input;
    this.length     = input.length;
    this._remaining = input.length;

    this._result = new Array(this.length);

    if (this.length === 0) ***REMOVED***
      fulfill(this.promise, this._result);
    ***REMOVED*** else ***REMOVED***
      this.length = this.length || 0;
      this._enumerate();
      if (this._remaining === 0) ***REMOVED***
        fulfill(this.promise, this._result);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
    reject(this.promise, validationError());
  ***REMOVED***
***REMOVED***

function validationError() ***REMOVED***
  return new Error('Array Methods must be provided an Array');
***REMOVED***;

Enumerator.prototype._enumerate = function() ***REMOVED***
  var length  = this.length;
  var input   = this._input;

  for (var i = 0; this._state === PENDING && i < length; i++) ***REMOVED***
    this._eachEntry(input[i], i);
  ***REMOVED***
***REMOVED***;

Enumerator.prototype._eachEntry = function(entry, i) ***REMOVED***
  var c = this._instanceConstructor;
  var resolve = c.resolve;

  if (resolve === originalResolve) ***REMOVED***
    var then = getThen(entry);

    if (then === originalThen &&
        entry._state !== PENDING) ***REMOVED***
      this._settledAt(entry._state, i, entry._result);
    ***REMOVED*** else if (typeof then !== 'function') ***REMOVED***
      this._remaining--;
      this._result[i] = entry;
    ***REMOVED*** else if (c === Promise) ***REMOVED***
      var promise = new c(noop);
      handleMaybeThenable(promise, entry, then);
      this._willSettleAt(promise, i);
    ***REMOVED*** else ***REMOVED***
      this._willSettleAt(new c(function(resolve) ***REMOVED*** resolve(entry); ***REMOVED***), i);
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
    this._willSettleAt(resolve(entry), i);
  ***REMOVED***
***REMOVED***;

Enumerator.prototype._settledAt = function(state, i, value) ***REMOVED***
  var promise = this.promise;

  if (promise._state === PENDING) ***REMOVED***
    this._remaining--;

    if (state === REJECTED) ***REMOVED***
      reject(promise, value);
    ***REMOVED*** else ***REMOVED***
      this._result[i] = value;
    ***REMOVED***
  ***REMOVED***

  if (this._remaining === 0) ***REMOVED***
    fulfill(promise, this._result);
  ***REMOVED***
***REMOVED***;

Enumerator.prototype._willSettleAt = function(promise, i) ***REMOVED***
  var enumerator = this;

  subscribe(promise, undefined, function(value) ***REMOVED***
    enumerator._settledAt(FULFILLED, i, value);
  ***REMOVED***, function(reason) ***REMOVED***
    enumerator._settledAt(REJECTED, i, reason);
  ***REMOVED***);
***REMOVED***;
