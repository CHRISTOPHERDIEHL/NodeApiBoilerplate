var chai = require('chai')
    , Strategy = require('../lib/strategy')
    , test_data = require('./testdata')
    , sinon = require('sinon')
    , extract_jwt = require('../lib/extract_jwt');


describe('Strategy', function() ***REMOVED***

    before(function() ***REMOVED***
        Strategy.JwtVerifier = sinon.stub(); 
        Strategy.JwtVerifier.callsArgWith(3, null, test_data.valid_jwt.payload);
    ***REMOVED***);

    describe('Handling a request with a valid JWT and succesful verification', function() ***REMOVED***

        var strategy, user, info; 

        before(function(done) ***REMOVED***
            strategy = new Strategy(***REMOVED***jwtFromRequest:extract_jwt.fromAuthHeader(), secretOrKey: 'secret'***REMOVED***, function(jwt_paylod, next) ***REMOVED***
                return next(null, ***REMOVED***user_id: 1234567890***REMOVED***, ***REMOVED***foo:'bar'***REMOVED***);
            ***REMOVED***);

            chai.passport.use(strategy)
                .success(function(u, i) ***REMOVED***
                    user = u;
                    info = i;
                    done();
                ***REMOVED***)
                .req(function(req) ***REMOVED***
                    req.headers['authorization'] = "JWT " + test_data.valid_jwt.token;
                ***REMOVED***)
                .authenticate();
        ***REMOVED***);


        it('should provide a user', function() ***REMOVED***
            expect(user).to.be.an.object;
            expect(user.user_id).to.equal(1234567890);
        ***REMOVED***);


        it('should forward info', function() ***REMOVED***
            expect(info).to.be.an.object;
            expect(info.foo).to.equal('bar');
        ***REMOVED***);

    ***REMOVED***);



    describe('handling a request with valid jwt and failed verification', function() ***REMOVED***

        var strategy, info;

        before(function(done) ***REMOVED***
            strategy = new Strategy(***REMOVED***jwtFromRequest: extract_jwt.fromAuthHeader(), secretOrKey: 'secret'***REMOVED***, function(jwt_payload, next) ***REMOVED***
                return next(null, false, ***REMOVED***message: 'invalid user'***REMOVED***);
            ***REMOVED***);

            chai.passport.use(strategy)
                .fail(function(i) ***REMOVED***
                    info = i;
                    done();
                ***REMOVED***)
                .req(function(req) ***REMOVED*** 
                    req.headers['authorization'] = "JWT " + test_data.valid_jwt.token;
                ***REMOVED***)
                .authenticate();
        ***REMOVED***);


        it('should fail with info', function() ***REMOVED***
            expect(info).to.be.an.object;
            expect(info.message).to.equal('invalid user');
        ***REMOVED***);
        
    ***REMOVED***);



    describe('handling a request with a valid jwt and an error during verification', function() ***REMOVED***

        var strategy, err;

        before(function(done) ***REMOVED***
            strategy = new Strategy(***REMOVED***jwtFromRequest: extract_jwt.fromAuthHeader(), secretOrKey: 'secrety'***REMOVED***, function(jwt_payload, next) ***REMOVED***
                return next(new Error("ERROR"), false, ***REMOVED***message: 'invalid user'***REMOVED***);
            ***REMOVED***);

            chai.passport.use(strategy)
                .error(function(e) ***REMOVED***
                    err = e;
                    done();
                ***REMOVED***)
                .req(function(req) ***REMOVED*** 
                    req.headers['authorization'] = "JWT " + test_data.valid_jwt.token;
                ***REMOVED***)
                .authenticate();
        ***REMOVED***);


        it('should error', function() ***REMOVED***
            expect(err).to.be.an.instanceof(Error);
            expect(err.message).to.equal('ERROR');
        ***REMOVED***);

    ***REMOVED***);



    describe('handling a request with a valid jwt and an exception during verification', function() ***REMOVED***
        var strategy, err;

        before(function(done) ***REMOVED***
            strategy = new Strategy(***REMOVED***jwtFromRequest: extract_jwt.fromAuthHeader(), secretOrKey: 'secret'***REMOVED***, function(jwt_payload, next) ***REMOVED***
                throw new Error("EXCEPTION");
            ***REMOVED***);

            chai.passport.use(strategy)
                .error(function(e) ***REMOVED***
                    err = e;
                    done();
                ***REMOVED***)
                .req(function(req) ***REMOVED*** 
                    req.headers['authorization'] = "JWT " + test_data.valid_jwt.token;
                ***REMOVED***)
                .authenticate();
        ***REMOVED***);


        it('should error', function() ***REMOVED***
            expect(err).to.be.an.instanceof(Error);
            expect(err.message).to.equal('EXCEPTION');
        ***REMOVED***);

    ***REMOVED***);



    describe('handling a request with a valid jwt and option passReqToCallback is true', function() ***REMOVED***

        var strategy, expected_request, request_arg;

        before(function(done) ***REMOVED***
            opts = ***REMOVED*** passReqToCallback: true ***REMOVED***;
            opts.secretOrKey = 'secret';
            opts.jwtFromRequest = extract_jwt.fromAuthHeader();
            strategy = new Strategy(opts, function(request, jwt_payload, next) ***REMOVED***
                // Capture the value passed in as the request argument
                request_arg = request;
                return next(null, ***REMOVED***user_id: 1234567890***REMOVED***, ***REMOVED***foo:'bar'***REMOVED***);
            ***REMOVED***);

            chai.passport.use(strategy)
                .success(function(u, i) ***REMOVED***
                    done();
                ***REMOVED***)
                .req(function(req) ***REMOVED***
                    req.headers['authorization'] = "JWT " + test_data.valid_jwt.token;
                    expected_request = req;
                ***REMOVED***)
                .authenticate();
        ***REMOVED***);

        it('will call verify with request as the first argument', function() ***REMOVED***
            expect(expected_request).to.equal(request_arg);
        ***REMOVED***);

    ***REMOVED***);

***REMOVED***);
