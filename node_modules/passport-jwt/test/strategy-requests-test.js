var Strategy = require('../lib/strategy')
    , chai = require('chai')
    , sinon = require('sinon')
    , test_data= require('./testdata')
    , url = require('url')
    , extract_jwt = require('../lib/extract_jwt')


describe('Strategy', function() ***REMOVED***

    var mockVerifier = null;

    before(function() ***REMOVED***
        // Replace the JWT Verfier with a stub to capture the value
        // extracted from the request
        mockVerifier = sinon.stub();
        mockVerifier.callsArgWith(3, null, test_data.valid_jwt.payload);
        Strategy.JwtVerifier = mockVerifier;
    ***REMOVED***);
    


    describe('handling request JWT present in request', function() ***REMOVED***
        var strategy;

        before(function(done) ***REMOVED***
            strategy = new Strategy(***REMOVED***
                    jwtFromRequest: function (r) ***REMOVED*** return test_data.valid_jwt.token; ***REMOVED***,
                    secretOrKey: 'secret'
                ***REMOVED***,
                function(jwt_payload, next) ***REMOVED***
                    // Return values aren't important in this case
                    return next(null, ***REMOVED******REMOVED***, ***REMOVED******REMOVED***);
                ***REMOVED***
            );
            
            mockVerifier.reset();
           
            chai.passport.use(strategy)
                .success(function(u, i) ***REMOVED***
                    done();
                ***REMOVED***)
                .authenticate();
        ***REMOVED***);


        it("verifies the right jwt", function() ***REMOVED***
            sinon.assert.calledOnce(mockVerifier);
            expect(mockVerifier.args[0][0]).to.equal(test_data.valid_jwt.token);
        ***REMOVED***);
    ***REMOVED***);



    describe('handling request with NO JWT', function() ***REMOVED***

        var info;

        before(function(done) ***REMOVED***
            strategy = new Strategy(***REMOVED***jwtFromRequest: function(r) ***REMOVED******REMOVED***, secretOrKey: 'secret'***REMOVED***, function(jwt_payload, next) ***REMOVED***
                // Return values aren't important in this case
                return next(null, ***REMOVED******REMOVED***, ***REMOVED******REMOVED***);
            ***REMOVED***);
            
            mockVerifier.reset();
           
            chai.passport.use(strategy)
                .fail(function(i) ***REMOVED***
                    info = i
                    done();
                ***REMOVED***)
                .req(function(req) ***REMOVED***
                    req.body = ***REMOVED******REMOVED***
                ***REMOVED***)
                .authenticate();
        ***REMOVED***);


        it('should fail authentication', function() ***REMOVED***
            expect(info).to.be.an.object;
            expect(info.message).to.equal("No auth token");
        ***REMOVED***);


        it('Should not try to verify anything', function() ***REMOVED***
            sinon.assert.notCalled(mockVerifier);
        ***REMOVED***);

    ***REMOVED***);

    describe('handling request url set to url.Url instead of string', function() ***REMOVED***

        var info;

        before(function(done) ***REMOVED***
            strategy = new Strategy(***REMOVED***jwtFromRequest: function(r) ***REMOVED******REMOVED***, secretOrKey: 'secret'***REMOVED***, function(jwt_payload, next) ***REMOVED***
                // Return values aren't important in this case
                return next(null, ***REMOVED******REMOVED***, ***REMOVED******REMOVED***);
            ***REMOVED***);

            mockVerifier.reset();

            chai.passport.use(strategy)
                .fail(function(i) ***REMOVED***
                    info = i
                    done();
                ***REMOVED***)
                .req(function(req) ***REMOVED***
                    req.body = ***REMOVED******REMOVED***;
                    req.url = new url.Url('/');
                ***REMOVED***)
                .authenticate();
        ***REMOVED***);


        it('should fail authentication', function() ***REMOVED***
            expect(info).to.be.an.object;
            expect(info.message).to.equal("No auth token");
        ***REMOVED***);

    ***REMOVED***);


***REMOVED***);
