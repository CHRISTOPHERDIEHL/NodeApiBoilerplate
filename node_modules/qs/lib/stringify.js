'use strict';

var Utils = require('./utils');

var arrayPrefixGenerators = ***REMOVED***
    brackets: function brackets(prefix) ***REMOVED***
        return prefix + '[]';
    ***REMOVED***,
    indices: function indices(prefix, key) ***REMOVED***
        return prefix + '[' + key + ']';
    ***REMOVED***,
    repeat: function repeat(prefix) ***REMOVED***
        return prefix;
    ***REMOVED***
***REMOVED***;

var defaults = ***REMOVED***
    delimiter: '&',
    strictNullHandling: false,
    skipNulls: false,
    encode: true,
    encoder: Utils.encode
***REMOVED***;

var stringify = function stringify(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots) ***REMOVED***
    var obj = object;
    if (typeof filter === 'function') ***REMOVED***
        obj = filter(prefix, obj);
    ***REMOVED*** else if (obj instanceof Date) ***REMOVED***
        obj = obj.toISOString();
    ***REMOVED*** else if (obj === null) ***REMOVED***
        if (strictNullHandling) ***REMOVED***
            return encoder ? encoder(prefix) : prefix;
        ***REMOVED***

        obj = '';
    ***REMOVED***

    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || Utils.isBuffer(obj)) ***REMOVED***
        if (encoder) ***REMOVED***
            return [encoder(prefix) + '=' + encoder(obj)];
        ***REMOVED***
        return [prefix + '=' + String(obj)];
    ***REMOVED***

    var values = [];

    if (typeof obj === 'undefined') ***REMOVED***
        return values;
    ***REMOVED***

    var objKeys;
    if (Array.isArray(filter)) ***REMOVED***
        objKeys = filter;
    ***REMOVED*** else ***REMOVED***
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    ***REMOVED***

    for (var i = 0; i < objKeys.length; ++i) ***REMOVED***
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) ***REMOVED***
            continue;
        ***REMOVED***

        if (Array.isArray(obj)) ***REMOVED***
            values = values.concat(stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
        ***REMOVED*** else ***REMOVED***
            values = values.concat(stringify(obj[key], prefix + (allowDots ? '.' + key : '[' + key + ']'), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
        ***REMOVED***
    ***REMOVED***

    return values;
***REMOVED***;

module.exports = function (object, opts) ***REMOVED***
    var obj = object;
    var options = opts || ***REMOVED******REMOVED***;
    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
    var encoder = encode ? (typeof options.encoder === 'function' ? options.encoder : defaults.encoder) : null;
    var sort = typeof options.sort === 'function' ? options.sort : null;
    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
    var objKeys;
    var filter;

    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') ***REMOVED***
        throw new TypeError('Encoder has to be a function.');
    ***REMOVED***

    if (typeof options.filter === 'function') ***REMOVED***
        filter = options.filter;
        obj = filter('', obj);
    ***REMOVED*** else if (Array.isArray(options.filter)) ***REMOVED***
        objKeys = filter = options.filter;
    ***REMOVED***

    var keys = [];

    if (typeof obj !== 'object' || obj === null) ***REMOVED***
        return '';
    ***REMOVED***

    var arrayFormat;
    if (options.arrayFormat in arrayPrefixGenerators) ***REMOVED***
        arrayFormat = options.arrayFormat;
    ***REMOVED*** else if ('indices' in options) ***REMOVED***
        arrayFormat = options.indices ? 'indices' : 'repeat';
    ***REMOVED*** else ***REMOVED***
        arrayFormat = 'indices';
    ***REMOVED***

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) ***REMOVED***
        objKeys = Object.keys(obj);
    ***REMOVED***

    if (sort) ***REMOVED***
        objKeys.sort(sort);
    ***REMOVED***

    for (var i = 0; i < objKeys.length; ++i) ***REMOVED***
        var key = objKeys[i];

        if (skipNulls && obj[key] === null) ***REMOVED***
            continue;
        ***REMOVED***

        keys = keys.concat(stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots));
    ***REMOVED***

    return keys.join(delimiter);
***REMOVED***;
