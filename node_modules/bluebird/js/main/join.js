"use strict";
module.exports =
function(Promise, PromiseArray, tryConvertToPromise, INTERNAL) ***REMOVED***
var util = require("./util.js");
var canEvaluate = util.canEvaluate;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var reject;

if (!false) ***REMOVED***
if (canEvaluate) ***REMOVED***
    var thenCallback = function(i) ***REMOVED***
        return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
    ***REMOVED***;

    var caller = function(count) ***REMOVED***
        var values = [];
        for (var i = 1; i <= count; ++i) values.push("holder.p" + i);
        return new Function("holder", "                                      \n\
            'use strict';                                                    \n\
            var callback = holder.fn;                                        \n\
            return callback(values);                                         \n\
            ".replace(/values/g, values.join(", ")));
    ***REMOVED***;
    var thenCallbacks = [];
    var callers = [undefined];
    for (var i = 1; i <= 5; ++i) ***REMOVED***
        thenCallbacks.push(thenCallback(i));
        callers.push(caller(i));
    ***REMOVED***

    var Holder = function(total, fn) ***REMOVED***
        this.p1 = this.p2 = this.p3 = this.p4 = this.p5 = null;
        this.fn = fn;
        this.total = total;
        this.now = 0;
    ***REMOVED***;

    Holder.prototype.callers = callers;
    Holder.prototype.checkFulfillment = function(promise) ***REMOVED***
        var now = this.now;
        now++;
        var total = this.total;
        if (now >= total) ***REMOVED***
            var handler = this.callers[total];
            promise._pushContext();
            var ret = tryCatch(handler)(this);
            promise._popContext();
            if (ret === errorObj) ***REMOVED***
                promise._rejectCallback(ret.e, false, true);
            ***REMOVED*** else ***REMOVED***
                promise._resolveCallback(ret);
            ***REMOVED***
        ***REMOVED*** else ***REMOVED***
            this.now = now;
        ***REMOVED***
    ***REMOVED***;

    var reject = function (reason) ***REMOVED***
        this._reject(reason);
    ***REMOVED***;
***REMOVED***
***REMOVED***

Promise.join = function () ***REMOVED***
    var last = arguments.length - 1;
    var fn;
    if (last > 0 && typeof arguments[last] === "function") ***REMOVED***
        fn = arguments[last];
        if (!false) ***REMOVED***
            if (last < 6 && canEvaluate) ***REMOVED***
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                var holder = new Holder(last, fn);
                var callbacks = thenCallbacks;
                for (var i = 0; i < last; ++i) ***REMOVED***
                    var maybePromise = tryConvertToPromise(arguments[i], ret);
                    if (maybePromise instanceof Promise) ***REMOVED***
                        maybePromise = maybePromise._target();
                        if (maybePromise._isPending()) ***REMOVED***
                            maybePromise._then(callbacks[i], reject,
                                               undefined, ret, holder);
                        ***REMOVED*** else if (maybePromise._isFulfilled()) ***REMOVED***
                            callbacks[i].call(ret,
                                              maybePromise._value(), holder);
                        ***REMOVED*** else ***REMOVED***
                            ret._reject(maybePromise._reason());
                        ***REMOVED***
                    ***REMOVED*** else ***REMOVED***
                        callbacks[i].call(ret, maybePromise, holder);
                    ***REMOVED***
                ***REMOVED***
                return ret;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    var $_len = arguments.length;var args = new Array($_len); for(var $_i = 0; $_i < $_len; ++$_i) ***REMOVED***args[$_i] = arguments[$_i];***REMOVED***
    if (fn) args.pop();
    var ret = new PromiseArray(args).promise();
    return fn !== undefined ? ret.spread(fn) : ret;
***REMOVED***;

***REMOVED***;
