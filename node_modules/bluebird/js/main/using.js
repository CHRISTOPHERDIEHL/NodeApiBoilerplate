"use strict";
module.exports = function (Promise, apiRejection, tryConvertToPromise,
    createContext) ***REMOVED***
    var TypeError = require("./errors.js").TypeError;
    var inherits = require("./util.js").inherits;
    var PromiseInspection = Promise.PromiseInspection;

    function inspectionMapper(inspections) ***REMOVED***
        var len = inspections.length;
        for (var i = 0; i < len; ++i) ***REMOVED***
            var inspection = inspections[i];
            if (inspection.isRejected()) ***REMOVED***
                return Promise.reject(inspection.error());
            ***REMOVED***
            inspections[i] = inspection._settledValue;
        ***REMOVED***
        return inspections;
    ***REMOVED***

    function thrower(e) ***REMOVED***
        setTimeout(function()***REMOVED***throw e;***REMOVED***, 0);
    ***REMOVED***

    function castPreservingDisposable(thenable) ***REMOVED***
        var maybePromise = tryConvertToPromise(thenable);
        if (maybePromise !== thenable &&
            typeof thenable._isDisposable === "function" &&
            typeof thenable._getDisposer === "function" &&
            thenable._isDisposable()) ***REMOVED***
            maybePromise._setDisposable(thenable._getDisposer());
        ***REMOVED***
        return maybePromise;
    ***REMOVED***
    function dispose(resources, inspection) ***REMOVED***
        var i = 0;
        var len = resources.length;
        var ret = Promise.defer();
        function iterator() ***REMOVED***
            if (i >= len) return ret.resolve();
            var maybePromise = castPreservingDisposable(resources[i++]);
            if (maybePromise instanceof Promise &&
                maybePromise._isDisposable()) ***REMOVED***
                try ***REMOVED***
                    maybePromise = tryConvertToPromise(
                        maybePromise._getDisposer().tryDispose(inspection),
                        resources.promise);
                ***REMOVED*** catch (e) ***REMOVED***
                    return thrower(e);
                ***REMOVED***
                if (maybePromise instanceof Promise) ***REMOVED***
                    return maybePromise._then(iterator, thrower,
                                              null, null, null);
                ***REMOVED***
            ***REMOVED***
            iterator();
        ***REMOVED***
        iterator();
        return ret.promise;
    ***REMOVED***

    function disposerSuccess(value) ***REMOVED***
        var inspection = new PromiseInspection();
        inspection._settledValue = value;
        inspection._bitField = 268435456;
        return dispose(this, inspection).thenReturn(value);
    ***REMOVED***

    function disposerFail(reason) ***REMOVED***
        var inspection = new PromiseInspection();
        inspection._settledValue = reason;
        inspection._bitField = 134217728;
        return dispose(this, inspection).thenThrow(reason);
    ***REMOVED***

    function Disposer(data, promise, context) ***REMOVED***
        this._data = data;
        this._promise = promise;
        this._context = context;
    ***REMOVED***

    Disposer.prototype.data = function () ***REMOVED***
        return this._data;
    ***REMOVED***;

    Disposer.prototype.promise = function () ***REMOVED***
        return this._promise;
    ***REMOVED***;

    Disposer.prototype.resource = function () ***REMOVED***
        if (this.promise().isFulfilled()) ***REMOVED***
            return this.promise().value();
        ***REMOVED***
        return null;
    ***REMOVED***;

    Disposer.prototype.tryDispose = function(inspection) ***REMOVED***
        var resource = this.resource();
        var context = this._context;
        if (context !== undefined) context._pushContext();
        var ret = resource !== null
            ? this.doDispose(resource, inspection) : null;
        if (context !== undefined) context._popContext();
        this._promise._unsetDisposable();
        this._data = null;
        return ret;
    ***REMOVED***;

    Disposer.isDisposer = function (d) ***REMOVED***
        return (d != null &&
                typeof d.resource === "function" &&
                typeof d.tryDispose === "function");
    ***REMOVED***;

    function FunctionDisposer(fn, promise, context) ***REMOVED***
        this.constructor$(fn, promise, context);
    ***REMOVED***
    inherits(FunctionDisposer, Disposer);

    FunctionDisposer.prototype.doDispose = function (resource, inspection) ***REMOVED***
        var fn = this.data();
        return fn.call(resource, resource, inspection);
    ***REMOVED***;

    function maybeUnwrapDisposer(value) ***REMOVED***
        if (Disposer.isDisposer(value)) ***REMOVED***
            this.resources[this.index]._setDisposable(value);
            return value.promise();
        ***REMOVED***
        return value;
    ***REMOVED***

    Promise.using = function () ***REMOVED***
        var len = arguments.length;
        if (len < 2) return apiRejection(
                        "you must pass at least 2 arguments to Promise.using");
        var fn = arguments[len - 1];
        if (typeof fn !== "function") return apiRejection("fn must be a function\u000a\u000a    See http://goo.gl/916lJJ\u000a");

        var input;
        var spreadArgs = true;
        if (len === 2 && Array.isArray(arguments[0])) ***REMOVED***
            input = arguments[0];
            len = input.length;
            spreadArgs = false;
        ***REMOVED*** else ***REMOVED***
            input = arguments;
            len--;
        ***REMOVED***
        var resources = new Array(len);
        for (var i = 0; i < len; ++i) ***REMOVED***
            var resource = input[i];
            if (Disposer.isDisposer(resource)) ***REMOVED***
                var disposer = resource;
                resource = resource.promise();
                resource._setDisposable(disposer);
            ***REMOVED*** else ***REMOVED***
                var maybePromise = tryConvertToPromise(resource);
                if (maybePromise instanceof Promise) ***REMOVED***
                    resource =
                        maybePromise._then(maybeUnwrapDisposer, null, null, ***REMOVED***
                            resources: resources,
                            index: i
                    ***REMOVED***, undefined);
                ***REMOVED***
            ***REMOVED***
            resources[i] = resource;
        ***REMOVED***

        var promise = Promise.settle(resources)
            .then(inspectionMapper)
            .then(function(vals) ***REMOVED***
                promise._pushContext();
                var ret;
                try ***REMOVED***
                    ret = spreadArgs
                        ? fn.apply(undefined, vals) : fn.call(undefined,  vals);
                ***REMOVED*** finally ***REMOVED***
                    promise._popContext();
                ***REMOVED***
                return ret;
            ***REMOVED***)
            ._then(
                disposerSuccess, disposerFail, undefined, resources, undefined);
        resources.promise = promise;
        return promise;
    ***REMOVED***;

    Promise.prototype._setDisposable = function (disposer) ***REMOVED***
        this._bitField = this._bitField | 262144;
        this._disposer = disposer;
    ***REMOVED***;

    Promise.prototype._isDisposable = function () ***REMOVED***
        return (this._bitField & 262144) > 0;
    ***REMOVED***;

    Promise.prototype._getDisposer = function () ***REMOVED***
        return this._disposer;
    ***REMOVED***;

    Promise.prototype._unsetDisposable = function () ***REMOVED***
        this._bitField = this._bitField & (~262144);
        this._disposer = undefined;
    ***REMOVED***;

    Promise.prototype.disposer = function (fn) ***REMOVED***
        if (typeof fn === "function") ***REMOVED***
            return new FunctionDisposer(fn, this, createContext());
        ***REMOVED***
        throw new TypeError();
    ***REMOVED***;

***REMOVED***;
