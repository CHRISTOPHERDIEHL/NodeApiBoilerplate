"use strict";
module.exports = function(Promise, NEXT_FILTER, tryConvertToPromise) ***REMOVED***
var util = require("./util.js");
var isPrimitive = util.isPrimitive;
var thrower = util.thrower;

function returnThis() ***REMOVED***
    return this;
***REMOVED***
function throwThis() ***REMOVED***
    throw this;
***REMOVED***
function return$(r) ***REMOVED***
    return function() ***REMOVED***
        return r;
    ***REMOVED***;
***REMOVED***
function throw$(r) ***REMOVED***
    return function() ***REMOVED***
        throw r;
    ***REMOVED***;
***REMOVED***
function promisedFinally(ret, reasonOrValue, isFulfilled) ***REMOVED***
    var then;
    if (isPrimitive(reasonOrValue)) ***REMOVED***
        then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue);
    ***REMOVED*** else ***REMOVED***
        then = isFulfilled ? returnThis : throwThis;
    ***REMOVED***
    return ret._then(then, thrower, undefined, reasonOrValue, undefined);
***REMOVED***

function finallyHandler(reasonOrValue) ***REMOVED***
    var promise = this.promise;
    var handler = this.handler;

    var ret = promise._isBound()
                    ? handler.call(promise._boundValue())
                    : handler();

    if (ret !== undefined) ***REMOVED***
        var maybePromise = tryConvertToPromise(ret, promise);
        if (maybePromise instanceof Promise) ***REMOVED***
            maybePromise = maybePromise._target();
            return promisedFinally(maybePromise, reasonOrValue,
                                    promise.isFulfilled());
        ***REMOVED***
    ***REMOVED***

    if (promise.isRejected()) ***REMOVED***
        NEXT_FILTER.e = reasonOrValue;
        return NEXT_FILTER;
    ***REMOVED*** else ***REMOVED***
        return reasonOrValue;
    ***REMOVED***
***REMOVED***

function tapHandler(value) ***REMOVED***
    var promise = this.promise;
    var handler = this.handler;

    var ret = promise._isBound()
                    ? handler.call(promise._boundValue(), value)
                    : handler(value);

    if (ret !== undefined) ***REMOVED***
        var maybePromise = tryConvertToPromise(ret, promise);
        if (maybePromise instanceof Promise) ***REMOVED***
            maybePromise = maybePromise._target();
            return promisedFinally(maybePromise, value, true);
        ***REMOVED***
    ***REMOVED***
    return value;
***REMOVED***

Promise.prototype._passThroughHandler = function (handler, isFinally) ***REMOVED***
    if (typeof handler !== "function") return this.then();

    var promiseAndHandler = ***REMOVED***
        promise: this,
        handler: handler
    ***REMOVED***;

    return this._then(
            isFinally ? finallyHandler : tapHandler,
            isFinally ? finallyHandler : undefined, undefined,
            promiseAndHandler, undefined);
***REMOVED***;

Promise.prototype.lastly =
Promise.prototype["finally"] = function (handler) ***REMOVED***
    return this._passThroughHandler(handler, true);
***REMOVED***;

Promise.prototype.tap = function (handler) ***REMOVED***
    return this._passThroughHandler(handler, false);
***REMOVED***;
***REMOVED***;
