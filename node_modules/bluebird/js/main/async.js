"use strict";
var firstLineError;
try ***REMOVED***throw new Error(); ***REMOVED*** catch (e) ***REMOVED***firstLineError = e;***REMOVED***
var schedule = require("./schedule.js");
var Queue = require("./queue.js");
var util = require("./util.js");

function Async() ***REMOVED***
    this._isTickUsed = false;
    this._lateQueue = new Queue(16);
    this._normalQueue = new Queue(16);
    this._trampolineEnabled = true;
    var self = this;
    this.drainQueues = function () ***REMOVED***
        self._drainQueues();
    ***REMOVED***;
    this._schedule =
        schedule.isStatic ? schedule(this.drainQueues) : schedule;
***REMOVED***

Async.prototype.disableTrampolineIfNecessary = function() ***REMOVED***
    if (util.hasDevTools) ***REMOVED***
        this._trampolineEnabled = false;
    ***REMOVED***
***REMOVED***;

Async.prototype.enableTrampoline = function() ***REMOVED***
    if (!this._trampolineEnabled) ***REMOVED***
        this._trampolineEnabled = true;
        this._schedule = function(fn) ***REMOVED***
            setTimeout(fn, 0);
        ***REMOVED***;
    ***REMOVED***
***REMOVED***;

Async.prototype.haveItemsQueued = function () ***REMOVED***
    return this._normalQueue.length() > 0;
***REMOVED***;

Async.prototype.throwLater = function(fn, arg) ***REMOVED***
    if (arguments.length === 1) ***REMOVED***
        arg = fn;
        fn = function () ***REMOVED*** throw arg; ***REMOVED***;
    ***REMOVED***
    if (typeof setTimeout !== "undefined") ***REMOVED***
        setTimeout(function() ***REMOVED***
            fn(arg);
        ***REMOVED***, 0);
    ***REMOVED*** else try ***REMOVED***
        this._schedule(function() ***REMOVED***
            fn(arg);
        ***REMOVED***);
    ***REMOVED*** catch (e) ***REMOVED***
        throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/m3OTXk\u000a");
    ***REMOVED***
***REMOVED***;

function AsyncInvokeLater(fn, receiver, arg) ***REMOVED***
    this._lateQueue.push(fn, receiver, arg);
    this._queueTick();
***REMOVED***

function AsyncInvoke(fn, receiver, arg) ***REMOVED***
    this._normalQueue.push(fn, receiver, arg);
    this._queueTick();
***REMOVED***

function AsyncSettlePromises(promise) ***REMOVED***
    this._normalQueue._pushOne(promise);
    this._queueTick();
***REMOVED***

if (!util.hasDevTools) ***REMOVED***
    Async.prototype.invokeLater = AsyncInvokeLater;
    Async.prototype.invoke = AsyncInvoke;
    Async.prototype.settlePromises = AsyncSettlePromises;
***REMOVED*** else ***REMOVED***
    if (schedule.isStatic) ***REMOVED***
        schedule = function(fn) ***REMOVED*** setTimeout(fn, 0); ***REMOVED***;
    ***REMOVED***
    Async.prototype.invokeLater = function (fn, receiver, arg) ***REMOVED***
        if (this._trampolineEnabled) ***REMOVED***
            AsyncInvokeLater.call(this, fn, receiver, arg);
        ***REMOVED*** else ***REMOVED***
            this._schedule(function() ***REMOVED***
                setTimeout(function() ***REMOVED***
                    fn.call(receiver, arg);
                ***REMOVED***, 100);
            ***REMOVED***);
        ***REMOVED***
    ***REMOVED***;

    Async.prototype.invoke = function (fn, receiver, arg) ***REMOVED***
        if (this._trampolineEnabled) ***REMOVED***
            AsyncInvoke.call(this, fn, receiver, arg);
        ***REMOVED*** else ***REMOVED***
            this._schedule(function() ***REMOVED***
                fn.call(receiver, arg);
            ***REMOVED***);
        ***REMOVED***
    ***REMOVED***;

    Async.prototype.settlePromises = function(promise) ***REMOVED***
        if (this._trampolineEnabled) ***REMOVED***
            AsyncSettlePromises.call(this, promise);
        ***REMOVED*** else ***REMOVED***
            this._schedule(function() ***REMOVED***
                promise._settlePromises();
            ***REMOVED***);
        ***REMOVED***
    ***REMOVED***;
***REMOVED***

Async.prototype.invokeFirst = function (fn, receiver, arg) ***REMOVED***
    this._normalQueue.unshift(fn, receiver, arg);
    this._queueTick();
***REMOVED***;

Async.prototype._drainQueue = function(queue) ***REMOVED***
    while (queue.length() > 0) ***REMOVED***
        var fn = queue.shift();
        if (typeof fn !== "function") ***REMOVED***
            fn._settlePromises();
            continue;
        ***REMOVED***
        var receiver = queue.shift();
        var arg = queue.shift();
        fn.call(receiver, arg);
    ***REMOVED***
***REMOVED***;

Async.prototype._drainQueues = function () ***REMOVED***
    this._drainQueue(this._normalQueue);
    this._reset();
    this._drainQueue(this._lateQueue);
***REMOVED***;

Async.prototype._queueTick = function () ***REMOVED***
    if (!this._isTickUsed) ***REMOVED***
        this._isTickUsed = true;
        this._schedule(this.drainQueues);
    ***REMOVED***
***REMOVED***;

Async.prototype._reset = function () ***REMOVED***
    this._isTickUsed = false;
***REMOVED***;

module.exports = new Async();
module.exports.firstLineError = firstLineError;
