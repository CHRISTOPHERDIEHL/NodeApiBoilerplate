"use strict";
module.exports = function(Promise, INTERNAL) ***REMOVED***
var util = require("./util.js");
var TimeoutError = Promise.TimeoutError;

var afterTimeout = function (promise, message) ***REMOVED***
    if (!promise.isPending()) return;
    
    var err;
    if(!util.isPrimitive(message) && (message instanceof Error)) ***REMOVED***
        err = message;
    ***REMOVED*** else ***REMOVED***
        if (typeof message !== "string") ***REMOVED***
            message = "operation timed out";
        ***REMOVED***
        err = new TimeoutError(message);
    ***REMOVED***
    util.markAsOriginatingFromRejection(err);
    promise._attachExtraTrace(err);
    promise._cancel(err);
***REMOVED***;

var afterValue = function(value) ***REMOVED*** return delay(+this).thenReturn(value); ***REMOVED***;
var delay = Promise.delay = function (value, ms) ***REMOVED***
    if (ms === undefined) ***REMOVED***
        ms = value;
        value = undefined;
        var ret = new Promise(INTERNAL);
        setTimeout(function() ***REMOVED*** ret._fulfill(); ***REMOVED***, ms);
        return ret;
    ***REMOVED***
    ms = +ms;
    return Promise.resolve(value)._then(afterValue, null, null, ms, undefined);
***REMOVED***;

Promise.prototype.delay = function (ms) ***REMOVED***
    return delay(this, ms);
***REMOVED***;

function successClear(value) ***REMOVED***
    var handle = this;
    if (handle instanceof Number) handle = +handle;
    clearTimeout(handle);
    return value;
***REMOVED***

function failureClear(reason) ***REMOVED***
    var handle = this;
    if (handle instanceof Number) handle = +handle;
    clearTimeout(handle);
    throw reason;
***REMOVED***

Promise.prototype.timeout = function (ms, message) ***REMOVED***
    ms = +ms;
    var ret = this.then().cancellable();
    ret._cancellationParent = this;
    var handle = setTimeout(function timeoutTimeout() ***REMOVED***
        afterTimeout(ret, message);
    ***REMOVED***, ms);
    return ret._then(successClear, failureClear, undefined, handle, undefined);
***REMOVED***;

***REMOVED***;
