"use strict";
module.exports = function(
    Promise, PromiseArray, tryConvertToPromise, apiRejection) ***REMOVED***
var util = require("./util.js");
var isObject = util.isObject;
var es5 = require("./es5.js");

function PropertiesPromiseArray(obj) ***REMOVED***
    var keys = es5.keys(obj);
    var len = keys.length;
    var values = new Array(len * 2);
    for (var i = 0; i < len; ++i) ***REMOVED***
        var key = keys[i];
        values[i] = obj[key];
        values[i + len] = key;
    ***REMOVED***
    this.constructor$(values);
***REMOVED***
util.inherits(PropertiesPromiseArray, PromiseArray);

PropertiesPromiseArray.prototype._init = function () ***REMOVED***
    this._init$(undefined, -3) ;
***REMOVED***;

PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) ***REMOVED***
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) ***REMOVED***
        var val = ***REMOVED******REMOVED***;
        var keyOffset = this.length();
        for (var i = 0, len = this.length(); i < len; ++i) ***REMOVED***
            val[this._values[i + keyOffset]] = this._values[i];
        ***REMOVED***
        this._resolve(val);
    ***REMOVED***
***REMOVED***;

PropertiesPromiseArray.prototype._promiseProgressed = function (value, index) ***REMOVED***
    this._promise._progress(***REMOVED***
        key: this._values[index + this.length()],
        value: value
    ***REMOVED***);
***REMOVED***;

PropertiesPromiseArray.prototype.shouldCopyValues = function () ***REMOVED***
    return false;
***REMOVED***;

PropertiesPromiseArray.prototype.getActualLength = function (len) ***REMOVED***
    return len >> 1;
***REMOVED***;

function props(promises) ***REMOVED***
    var ret;
    var castValue = tryConvertToPromise(promises);

    if (!isObject(castValue)) ***REMOVED***
        return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/OsFKC8\u000a");
    ***REMOVED*** else if (castValue instanceof Promise) ***REMOVED***
        ret = castValue._then(
            Promise.props, undefined, undefined, undefined, undefined);
    ***REMOVED*** else ***REMOVED***
        ret = new PropertiesPromiseArray(castValue).promise();
    ***REMOVED***

    if (castValue instanceof Promise) ***REMOVED***
        ret._propagateFrom(castValue, 4);
    ***REMOVED***
    return ret;
***REMOVED***

Promise.prototype.props = function () ***REMOVED***
    return props(this);
***REMOVED***;

Promise.props = function (promises) ***REMOVED***
    return props(promises);
***REMOVED***;
***REMOVED***;
