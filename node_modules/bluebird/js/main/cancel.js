"use strict";
module.exports = function(Promise) ***REMOVED***
var errors = require("./errors.js");
var async = require("./async.js");
var CancellationError = errors.CancellationError;

Promise.prototype._cancel = function (reason) ***REMOVED***
    if (!this.isCancellable()) return this;
    var parent;
    var promiseToReject = this;
    while ((parent = promiseToReject._cancellationParent) !== undefined &&
        parent.isCancellable()) ***REMOVED***
        promiseToReject = parent;
    ***REMOVED***
    this._unsetCancellable();
    promiseToReject._target()._rejectCallback(reason, false, true);
***REMOVED***;

Promise.prototype.cancel = function (reason) ***REMOVED***
    if (!this.isCancellable()) return this;
    if (reason === undefined) reason = new CancellationError();
    async.invokeLater(this._cancel, this, reason);
    return this;
***REMOVED***;

Promise.prototype.cancellable = function () ***REMOVED***
    if (this._cancellable()) return this;
    async.enableTrampoline();
    this._setCancellable();
    this._cancellationParent = undefined;
    return this;
***REMOVED***;

Promise.prototype.uncancellable = function () ***REMOVED***
    var ret = this.then();
    ret._unsetCancellable();
    return ret;
***REMOVED***;

Promise.prototype.fork = function (didFulfill, didReject, didProgress) ***REMOVED***
    var ret = this._then(didFulfill, didReject, didProgress,
                         undefined, undefined);

    ret._setCancellable();
    ret._cancellationParent = undefined;
    return ret;
***REMOVED***;
***REMOVED***;
