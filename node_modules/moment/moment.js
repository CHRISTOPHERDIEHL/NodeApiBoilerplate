//! moment.js
//! version : 2.17.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) ***REMOVED***
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
***REMOVED***(this, (function () ***REMOVED*** 'use strict';

var hookCallback;

function hooks () ***REMOVED***
    return hookCallback.apply(null, arguments);
***REMOVED***

// This is done to register the method called with moment()
// without creating circular dependencies.
function setHookCallback (callback) ***REMOVED***
    hookCallback = callback;
***REMOVED***

function isArray(input) ***REMOVED***
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
***REMOVED***

function isObject(input) ***REMOVED***
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
***REMOVED***

function isObjectEmpty(obj) ***REMOVED***
    var k;
    for (k in obj) ***REMOVED***
        // even if its not own property I'd still call it non-empty
        return false;
    ***REMOVED***
    return true;
***REMOVED***

function isNumber(input) ***REMOVED***
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
***REMOVED***

function isDate(input) ***REMOVED***
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
***REMOVED***

function map(arr, fn) ***REMOVED***
    var res = [], i;
    for (i = 0; i < arr.length; ++i) ***REMOVED***
        res.push(fn(arr[i], i));
    ***REMOVED***
    return res;
***REMOVED***

function hasOwnProp(a, b) ***REMOVED***
    return Object.prototype.hasOwnProperty.call(a, b);
***REMOVED***

function extend(a, b) ***REMOVED***
    for (var i in b) ***REMOVED***
        if (hasOwnProp(b, i)) ***REMOVED***
            a[i] = b[i];
        ***REMOVED***
    ***REMOVED***

    if (hasOwnProp(b, 'toString')) ***REMOVED***
        a.toString = b.toString;
    ***REMOVED***

    if (hasOwnProp(b, 'valueOf')) ***REMOVED***
        a.valueOf = b.valueOf;
    ***REMOVED***

    return a;
***REMOVED***

function createUTC (input, format, locale, strict) ***REMOVED***
    return createLocalOrUTC(input, format, locale, strict, true).utc();
***REMOVED***

function defaultParsingFlags() ***REMOVED***
    // We need to deep clone this object.
    return ***REMOVED***
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false,
        parsedDateParts : [],
        meridiem        : null
    ***REMOVED***;
***REMOVED***

function getParsingFlags(m) ***REMOVED***
    if (m._pf == null) ***REMOVED***
        m._pf = defaultParsingFlags();
    ***REMOVED***
    return m._pf;
***REMOVED***

var some;
if (Array.prototype.some) ***REMOVED***
    some = Array.prototype.some;
***REMOVED*** else ***REMOVED***
    some = function (fun) ***REMOVED***
        var t = Object(this);
        var len = t.length >>> 0;

        for (var i = 0; i < len; i++) ***REMOVED***
            if (i in t && fun.call(this, t[i], i, t)) ***REMOVED***
                return true;
            ***REMOVED***
        ***REMOVED***

        return false;
    ***REMOVED***;
***REMOVED***

var some$1 = some;

function isValid(m) ***REMOVED***
    if (m._isValid == null) ***REMOVED***
        var flags = getParsingFlags(m);
        var parsedParts = some$1.call(flags.parsedDateParts, function (i) ***REMOVED***
            return i != null;
        ***REMOVED***);
        var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

        if (m._strict) ***REMOVED***
            isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
        ***REMOVED***

        if (Object.isFrozen == null || !Object.isFrozen(m)) ***REMOVED***
            m._isValid = isNowValid;
        ***REMOVED***
        else ***REMOVED***
            return isNowValid;
        ***REMOVED***
    ***REMOVED***
    return m._isValid;
***REMOVED***

function createInvalid (flags) ***REMOVED***
    var m = createUTC(NaN);
    if (flags != null) ***REMOVED***
        extend(getParsingFlags(m), flags);
    ***REMOVED***
    else ***REMOVED***
        getParsingFlags(m).userInvalidated = true;
    ***REMOVED***

    return m;
***REMOVED***

function isUndefined(input) ***REMOVED***
    return input === void 0;
***REMOVED***

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

function copyConfig(to, from) ***REMOVED***
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) ***REMOVED***
        to._isAMomentObject = from._isAMomentObject;
    ***REMOVED***
    if (!isUndefined(from._i)) ***REMOVED***
        to._i = from._i;
    ***REMOVED***
    if (!isUndefined(from._f)) ***REMOVED***
        to._f = from._f;
    ***REMOVED***
    if (!isUndefined(from._l)) ***REMOVED***
        to._l = from._l;
    ***REMOVED***
    if (!isUndefined(from._strict)) ***REMOVED***
        to._strict = from._strict;
    ***REMOVED***
    if (!isUndefined(from._tzm)) ***REMOVED***
        to._tzm = from._tzm;
    ***REMOVED***
    if (!isUndefined(from._isUTC)) ***REMOVED***
        to._isUTC = from._isUTC;
    ***REMOVED***
    if (!isUndefined(from._offset)) ***REMOVED***
        to._offset = from._offset;
    ***REMOVED***
    if (!isUndefined(from._pf)) ***REMOVED***
        to._pf = getParsingFlags(from);
    ***REMOVED***
    if (!isUndefined(from._locale)) ***REMOVED***
        to._locale = from._locale;
    ***REMOVED***

    if (momentProperties.length > 0) ***REMOVED***
        for (i in momentProperties) ***REMOVED***
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) ***REMOVED***
                to[prop] = val;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***

    return to;
***REMOVED***

var updateInProgress = false;

// Moment prototype object
function Moment(config) ***REMOVED***
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) ***REMOVED***
        this._d = new Date(NaN);
    ***REMOVED***
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) ***REMOVED***
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    ***REMOVED***
***REMOVED***

function isMoment (obj) ***REMOVED***
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
***REMOVED***

function absFloor (number) ***REMOVED***
    if (number < 0) ***REMOVED***
        // -0 -> 0
        return Math.ceil(number) || 0;
    ***REMOVED*** else ***REMOVED***
        return Math.floor(number);
    ***REMOVED***
***REMOVED***

function toInt(argumentForCoercion) ***REMOVED***
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) ***REMOVED***
        value = absFloor(coercedNumber);
    ***REMOVED***

    return value;
***REMOVED***

// compare two arrays, return the number of differences
function compareArrays(array1, array2, dontConvert) ***REMOVED***
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) ***REMOVED***
        if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) ***REMOVED***
            diffs++;
        ***REMOVED***
    ***REMOVED***
    return diffs + lengthDiff;
***REMOVED***

function warn(msg) ***REMOVED***
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) ***REMOVED***
        console.warn('Deprecation warning: ' + msg);
    ***REMOVED***
***REMOVED***

function deprecate(msg, fn) ***REMOVED***
    var firstTime = true;

    return extend(function () ***REMOVED***
        if (hooks.deprecationHandler != null) ***REMOVED***
            hooks.deprecationHandler(null, msg);
        ***REMOVED***
        if (firstTime) ***REMOVED***
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) ***REMOVED***
                arg = '';
                if (typeof arguments[i] === 'object') ***REMOVED***
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) ***REMOVED***
                        arg += key + ': ' + arguments[0][key] + ', ';
                    ***REMOVED***
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                ***REMOVED*** else ***REMOVED***
                    arg = arguments[i];
                ***REMOVED***
                args.push(arg);
            ***REMOVED***
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        ***REMOVED***
        return fn.apply(this, arguments);
    ***REMOVED***, fn);
***REMOVED***

var deprecations = ***REMOVED******REMOVED***;

function deprecateSimple(name, msg) ***REMOVED***
    if (hooks.deprecationHandler != null) ***REMOVED***
        hooks.deprecationHandler(name, msg);
    ***REMOVED***
    if (!deprecations[name]) ***REMOVED***
        warn(msg);
        deprecations[name] = true;
    ***REMOVED***
***REMOVED***

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;

function isFunction(input) ***REMOVED***
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
***REMOVED***

function set (config) ***REMOVED***
    var prop, i;
    for (i in config) ***REMOVED***
        prop = config[i];
        if (isFunction(prop)) ***REMOVED***
            this[i] = prop;
        ***REMOVED*** else ***REMOVED***
            this['_' + i] = prop;
        ***REMOVED***
    ***REMOVED***
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _ordinalParseLenient.
    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d***REMOVED***1,2***REMOVED***/).source);
***REMOVED***

function mergeConfigs(parentConfig, childConfig) ***REMOVED***
    var res = extend(***REMOVED******REMOVED***, parentConfig), prop;
    for (prop in childConfig) ***REMOVED***
        if (hasOwnProp(childConfig, prop)) ***REMOVED***
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) ***REMOVED***
                res[prop] = ***REMOVED******REMOVED***;
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            ***REMOVED*** else if (childConfig[prop] != null) ***REMOVED***
                res[prop] = childConfig[prop];
            ***REMOVED*** else ***REMOVED***
                delete res[prop];
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    for (prop in parentConfig) ***REMOVED***
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) ***REMOVED***
            // make sure changes to properties don't modify parent config
            res[prop] = extend(***REMOVED******REMOVED***, res[prop]);
        ***REMOVED***
    ***REMOVED***
    return res;
***REMOVED***

function Locale(config) ***REMOVED***
    if (config != null) ***REMOVED***
        this.set(config);
    ***REMOVED***
***REMOVED***

var keys;

if (Object.keys) ***REMOVED***
    keys = Object.keys;
***REMOVED*** else ***REMOVED***
    keys = function (obj) ***REMOVED***
        var i, res = [];
        for (i in obj) ***REMOVED***
            if (hasOwnProp(obj, i)) ***REMOVED***
                res.push(i);
            ***REMOVED***
        ***REMOVED***
        return res;
    ***REMOVED***;
***REMOVED***

var keys$1 = keys;

var defaultCalendar = ***REMOVED***
    sameDay : '[Today at] LT',
    nextDay : '[Tomorrow at] LT',
    nextWeek : 'dddd [at] LT',
    lastDay : '[Yesterday at] LT',
    lastWeek : '[Last] dddd [at] LT',
    sameElse : 'L'
***REMOVED***;

function calendar (key, mom, now) ***REMOVED***
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
***REMOVED***

var defaultLongDateFormat = ***REMOVED***
    LTS  : 'h:mm:ss A',
    LT   : 'h:mm A',
    L    : 'MM/DD/YYYY',
    LL   : 'MMMM D, YYYY',
    LLL  : 'MMMM D, YYYY h:mm A',
    LLLL : 'dddd, MMMM D, YYYY h:mm A'
***REMOVED***;

function longDateFormat (key) ***REMOVED***
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) ***REMOVED***
        return format;
    ***REMOVED***

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) ***REMOVED***
        return val.slice(1);
    ***REMOVED***);

    return this._longDateFormat[key];
***REMOVED***

var defaultInvalidDate = 'Invalid date';

function invalidDate () ***REMOVED***
    return this._invalidDate;
***REMOVED***

var defaultOrdinal = '%d';
var defaultOrdinalParse = /\d***REMOVED***1,2***REMOVED***/;

function ordinal (number) ***REMOVED***
    return this._ordinal.replace('%d', number);
***REMOVED***

var defaultRelativeTime = ***REMOVED***
    future : 'in %s',
    past   : '%s ago',
    s  : 'a few seconds',
    m  : 'a minute',
    mm : '%d minutes',
    h  : 'an hour',
    hh : '%d hours',
    d  : 'a day',
    dd : '%d days',
    M  : 'a month',
    MM : '%d months',
    y  : 'a year',
    yy : '%d years'
***REMOVED***;

function relativeTime (number, withoutSuffix, string, isFuture) ***REMOVED***
    var output = this._relativeTime[string];
    return (isFunction(output)) ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
***REMOVED***

function pastFuture (diff, output) ***REMOVED***
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
***REMOVED***

var aliases = ***REMOVED******REMOVED***;

function addUnitAlias (unit, shorthand) ***REMOVED***
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
***REMOVED***

function normalizeUnits(units) ***REMOVED***
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
***REMOVED***

function normalizeObjectUnits(inputObject) ***REMOVED***
    var normalizedInput = ***REMOVED******REMOVED***,
        normalizedProp,
        prop;

    for (prop in inputObject) ***REMOVED***
        if (hasOwnProp(inputObject, prop)) ***REMOVED***
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) ***REMOVED***
                normalizedInput[normalizedProp] = inputObject[prop];
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***

    return normalizedInput;
***REMOVED***

var priorities = ***REMOVED******REMOVED***;

function addUnitPriority(unit, priority) ***REMOVED***
    priorities[unit] = priority;
***REMOVED***

function getPrioritizedUnits(unitsObj) ***REMOVED***
    var units = [];
    for (var u in unitsObj) ***REMOVED***
        units.push(***REMOVED***unit: u, priority: priorities[u]***REMOVED***);
    ***REMOVED***
    units.sort(function (a, b) ***REMOVED***
        return a.priority - b.priority;
    ***REMOVED***);
    return units;
***REMOVED***

function makeGetSet (unit, keepTime) ***REMOVED***
    return function (value) ***REMOVED***
        if (value != null) ***REMOVED***
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        ***REMOVED*** else ***REMOVED***
            return get(this, unit);
        ***REMOVED***
    ***REMOVED***;
***REMOVED***

function get (mom, unit) ***REMOVED***
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
***REMOVED***

function set$1 (mom, unit, value) ***REMOVED***
    if (mom.isValid()) ***REMOVED***
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    ***REMOVED***
***REMOVED***

// MOMENTS

function stringGet (units) ***REMOVED***
    units = normalizeUnits(units);
    if (isFunction(this[units])) ***REMOVED***
        return this[units]();
    ***REMOVED***
    return this;
***REMOVED***


function stringSet (units, value) ***REMOVED***
    if (typeof units === 'object') ***REMOVED***
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) ***REMOVED***
            this[prioritized[i].unit](units[prioritized[i].unit]);
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        units = normalizeUnits(units);
        if (isFunction(this[units])) ***REMOVED***
            return this[units](value);
        ***REMOVED***
    ***REMOVED***
    return this;
***REMOVED***

function zeroFill(number, targetLength, forceSign) ***REMOVED***
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
***REMOVED***

var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S***REMOVED***1,9***REMOVED***|x|X|zz?|ZZ?|.)/g;

var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l***REMOVED***1,4***REMOVED***)/g;

var formatFunctions = ***REMOVED******REMOVED***;

var formatTokenFunctions = ***REMOVED******REMOVED***;

// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () ***REMOVED*** this.month() + 1 ***REMOVED***
function addFormatToken (token, padded, ordinal, callback) ***REMOVED***
    var func = callback;
    if (typeof callback === 'string') ***REMOVED***
        func = function () ***REMOVED***
            return this[callback]();
        ***REMOVED***;
    ***REMOVED***
    if (token) ***REMOVED***
        formatTokenFunctions[token] = func;
    ***REMOVED***
    if (padded) ***REMOVED***
        formatTokenFunctions[padded[0]] = function () ***REMOVED***
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        ***REMOVED***;
    ***REMOVED***
    if (ordinal) ***REMOVED***
        formatTokenFunctions[ordinal] = function () ***REMOVED***
            return this.localeData().ordinal(func.apply(this, arguments), token);
        ***REMOVED***;
    ***REMOVED***
***REMOVED***

function removeFormattingTokens(input) ***REMOVED***
    if (input.match(/\[[\s\S]/)) ***REMOVED***
        return input.replace(/^\[|\]$/g, '');
    ***REMOVED***
    return input.replace(/\\/g, '');
***REMOVED***

function makeFormatFunction(format) ***REMOVED***
    var array = format.match(formattingTokens), i, length;

    for (i = 0, length = array.length; i < length; i++) ***REMOVED***
        if (formatTokenFunctions[array[i]]) ***REMOVED***
            array[i] = formatTokenFunctions[array[i]];
        ***REMOVED*** else ***REMOVED***
            array[i] = removeFormattingTokens(array[i]);
        ***REMOVED***
    ***REMOVED***

    return function (mom) ***REMOVED***
        var output = '', i;
        for (i = 0; i < length; i++) ***REMOVED***
            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
        ***REMOVED***
        return output;
    ***REMOVED***;
***REMOVED***

// format date using native date object
function formatMoment(m, format) ***REMOVED***
    if (!m.isValid()) ***REMOVED***
        return m.localeData().invalidDate();
    ***REMOVED***

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
***REMOVED***

function expandFormat(format, locale) ***REMOVED***
    var i = 5;

    function replaceLongDateFormatTokens(input) ***REMOVED***
        return locale.longDateFormat(input) || input;
    ***REMOVED***

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) ***REMOVED***
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
    ***REMOVED***

    return format;
***REMOVED***

var match1         = /\d/;            //       0 - 9
var match2         = /\d\d/;          //      00 - 99
var match3         = /\d***REMOVED***3***REMOVED***/;         //     000 - 999
var match4         = /\d***REMOVED***4***REMOVED***/;         //    0000 - 9999
var match6         = /[+-]?\d***REMOVED***6***REMOVED***/;    // -999999 - 999999
var match1to2      = /\d\d?/;         //       0 - 99
var match3to4      = /\d\d\d\d?/;     //     999 - 9999
var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
var match1to3      = /\d***REMOVED***1,3***REMOVED***/;       //       0 - 999
var match1to4      = /\d***REMOVED***1,4***REMOVED***/;       //       0 - 9999
var match1to6      = /[+-]?\d***REMOVED***1,6***REMOVED***/;  // -999999 - 999999

var matchUnsigned  = /\d+/;           //       0 - inf
var matchSigned    = /[+-]?\d+/;      //    -inf - inf

var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

var matchTimestamp = /[+-]?\d+(\.\d***REMOVED***1,3***REMOVED***)?/; // 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+)***REMOVED***1,2***REMOVED***/i;


var regexes = ***REMOVED******REMOVED***;

function addRegexToken (token, regex, strictRegex) ***REMOVED***
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) ***REMOVED***
        return (isStrict && strictRegex) ? strictRegex : regex;
    ***REMOVED***;
***REMOVED***

function getParseRegexForToken (token, config) ***REMOVED***
    if (!hasOwnProp(regexes, token)) ***REMOVED***
        return new RegExp(unescapeFormat(token));
    ***REMOVED***

    return regexes[token](config._strict, config._locale);
***REMOVED***

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) ***REMOVED***
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) ***REMOVED***
        return p1 || p2 || p3 || p4;
    ***REMOVED***));
***REMOVED***

function regexEscape(s) ***REMOVED***
    return s.replace(/[-\/\\^$*+?.()|[\]***REMOVED******REMOVED***]/g, '\\$&');
***REMOVED***

var tokens = ***REMOVED******REMOVED***;

function addParseToken (token, callback) ***REMOVED***
    var i, func = callback;
    if (typeof token === 'string') ***REMOVED***
        token = [token];
    ***REMOVED***
    if (isNumber(callback)) ***REMOVED***
        func = function (input, array) ***REMOVED***
            array[callback] = toInt(input);
        ***REMOVED***;
    ***REMOVED***
    for (i = 0; i < token.length; i++) ***REMOVED***
        tokens[token[i]] = func;
    ***REMOVED***
***REMOVED***

function addWeekParseToken (token, callback) ***REMOVED***
    addParseToken(token, function (input, array, config, token) ***REMOVED***
        config._w = config._w || ***REMOVED******REMOVED***;
        callback(input, config._w, config, token);
    ***REMOVED***);
***REMOVED***

function addTimeToArrayFromToken(token, input, config) ***REMOVED***
    if (input != null && hasOwnProp(tokens, token)) ***REMOVED***
        tokens[token](input, config._a, config, token);
    ***REMOVED***
***REMOVED***

var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;

var indexOf;

if (Array.prototype.indexOf) ***REMOVED***
    indexOf = Array.prototype.indexOf;
***REMOVED*** else ***REMOVED***
    indexOf = function (o) ***REMOVED***
        // I know
        var i;
        for (i = 0; i < this.length; ++i) ***REMOVED***
            if (this[i] === o) ***REMOVED***
                return i;
            ***REMOVED***
        ***REMOVED***
        return -1;
    ***REMOVED***;
***REMOVED***

var indexOf$1 = indexOf;

function daysInMonth(year, month) ***REMOVED***
    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
***REMOVED***

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () ***REMOVED***
    return this.month() + 1;
***REMOVED***);

addFormatToken('MMM', 0, 0, function (format) ***REMOVED***
    return this.localeData().monthsShort(this, format);
***REMOVED***);

addFormatToken('MMMM', 0, 0, function (format) ***REMOVED***
    return this.localeData().months(this, format);
***REMOVED***);

// ALIASES

addUnitAlias('month', 'M');

// PRIORITY

addUnitPriority('month', 8);

// PARSING

addRegexToken('M',    match1to2);
addRegexToken('MM',   match1to2, match2);
addRegexToken('MMM',  function (isStrict, locale) ***REMOVED***
    return locale.monthsShortRegex(isStrict);
***REMOVED***);
addRegexToken('MMMM', function (isStrict, locale) ***REMOVED***
    return locale.monthsRegex(isStrict);
***REMOVED***);

addParseToken(['M', 'MM'], function (input, array) ***REMOVED***
    array[MONTH] = toInt(input) - 1;
***REMOVED***);

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) ***REMOVED***
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) ***REMOVED***
        array[MONTH] = month;
    ***REMOVED*** else ***REMOVED***
        getParsingFlags(config).invalidMonth = input;
    ***REMOVED***
***REMOVED***);

// LOCALES

var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
function localeMonths (m, format) ***REMOVED***
    if (!m) ***REMOVED***
        return this._months;
    ***REMOVED***
    return isArray(this._months) ? this._months[m.month()] :
        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
***REMOVED***

var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
function localeMonthsShort (m, format) ***REMOVED***
    if (!m) ***REMOVED***
        return this._monthsShort;
    ***REMOVED***
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
***REMOVED***

function handleStrictParse(monthName, format, strict) ***REMOVED***
    var i, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) ***REMOVED***
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) ***REMOVED***
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        ***REMOVED***
    ***REMOVED***

    if (strict) ***REMOVED***
        if (format === 'MMM') ***REMOVED***
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED*** else ***REMOVED***
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        if (format === 'MMM') ***REMOVED***
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            if (ii !== -1) ***REMOVED***
                return ii;
            ***REMOVED***
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED*** else ***REMOVED***
            ii = indexOf$1.call(this._longMonthsParse, llc);
            if (ii !== -1) ***REMOVED***
                return ii;
            ***REMOVED***
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED***
    ***REMOVED***
***REMOVED***

function localeMonthsParse (monthName, format, strict) ***REMOVED***
    var i, mom, regex;

    if (this._monthsParseExact) ***REMOVED***
        return handleStrictParse.call(this, monthName, format, strict);
    ***REMOVED***

    if (!this._monthsParse) ***REMOVED***
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    ***REMOVED***

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) ***REMOVED***
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) ***REMOVED***
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        ***REMOVED***
        if (!strict && !this._monthsParse[i]) ***REMOVED***
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        ***REMOVED***
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) ***REMOVED***
            return i;
        ***REMOVED*** else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) ***REMOVED***
            return i;
        ***REMOVED*** else if (!strict && this._monthsParse[i].test(monthName)) ***REMOVED***
            return i;
        ***REMOVED***
    ***REMOVED***
***REMOVED***

// MOMENTS

function setMonth (mom, value) ***REMOVED***
    var dayOfMonth;

    if (!mom.isValid()) ***REMOVED***
        // No op
        return mom;
    ***REMOVED***

    if (typeof value === 'string') ***REMOVED***
        if (/^\d+$/.test(value)) ***REMOVED***
            value = toInt(value);
        ***REMOVED*** else ***REMOVED***
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) ***REMOVED***
                return mom;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
***REMOVED***

function getSetMonth (value) ***REMOVED***
    if (value != null) ***REMOVED***
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    ***REMOVED*** else ***REMOVED***
        return get(this, 'Month');
    ***REMOVED***
***REMOVED***

function getDaysInMonth () ***REMOVED***
    return daysInMonth(this.year(), this.month());
***REMOVED***

var defaultMonthsShortRegex = matchWord;
function monthsShortRegex (isStrict) ***REMOVED***
    if (this._monthsParseExact) ***REMOVED***
        if (!hasOwnProp(this, '_monthsRegex')) ***REMOVED***
            computeMonthsParse.call(this);
        ***REMOVED***
        if (isStrict) ***REMOVED***
            return this._monthsShortStrictRegex;
        ***REMOVED*** else ***REMOVED***
            return this._monthsShortRegex;
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        if (!hasOwnProp(this, '_monthsShortRegex')) ***REMOVED***
            this._monthsShortRegex = defaultMonthsShortRegex;
        ***REMOVED***
        return this._monthsShortStrictRegex && isStrict ?
            this._monthsShortStrictRegex : this._monthsShortRegex;
    ***REMOVED***
***REMOVED***

var defaultMonthsRegex = matchWord;
function monthsRegex (isStrict) ***REMOVED***
    if (this._monthsParseExact) ***REMOVED***
        if (!hasOwnProp(this, '_monthsRegex')) ***REMOVED***
            computeMonthsParse.call(this);
        ***REMOVED***
        if (isStrict) ***REMOVED***
            return this._monthsStrictRegex;
        ***REMOVED*** else ***REMOVED***
            return this._monthsRegex;
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        if (!hasOwnProp(this, '_monthsRegex')) ***REMOVED***
            this._monthsRegex = defaultMonthsRegex;
        ***REMOVED***
        return this._monthsStrictRegex && isStrict ?
            this._monthsStrictRegex : this._monthsRegex;
    ***REMOVED***
***REMOVED***

function computeMonthsParse () ***REMOVED***
    function cmpLenRev(a, b) ***REMOVED***
        return b.length - a.length;
    ***REMOVED***

    var shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom;
    for (i = 0; i < 12; i++) ***REMOVED***
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''));
    ***REMOVED***
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) ***REMOVED***
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
    ***REMOVED***
    for (i = 0; i < 24; i++) ***REMOVED***
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    ***REMOVED***

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
***REMOVED***

// FORMATTING

addFormatToken('Y', 0, 0, function () ***REMOVED***
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
***REMOVED***);

addFormatToken(0, ['YY', 2], 0, function () ***REMOVED***
    return this.year() % 100;
***REMOVED***);

addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) ***REMOVED***
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
***REMOVED***);
addParseToken('YY', function (input, array) ***REMOVED***
    array[YEAR] = hooks.parseTwoDigitYear(input);
***REMOVED***);
addParseToken('Y', function (input, array) ***REMOVED***
    array[YEAR] = parseInt(input, 10);
***REMOVED***);

// HELPERS

function daysInYear(year) ***REMOVED***
    return isLeapYear(year) ? 366 : 365;
***REMOVED***

function isLeapYear(year) ***REMOVED***
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
***REMOVED***

// HOOKS

hooks.parseTwoDigitYear = function (input) ***REMOVED***
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
***REMOVED***;

// MOMENTS

var getSetYear = makeGetSet('FullYear', true);

function getIsLeapYear () ***REMOVED***
    return isLeapYear(this.year());
***REMOVED***

function createDate (y, m, d, h, M, s, ms) ***REMOVED***
    //can't just apply() to create a date:
    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
    var date = new Date(y, m, d, h, M, s, ms);

    //the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) ***REMOVED***
        date.setFullYear(y);
    ***REMOVED***
    return date;
***REMOVED***

function createUTCDate (y) ***REMOVED***
    var date = new Date(Date.UTC.apply(null, arguments));

    //the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) ***REMOVED***
        date.setUTCFullYear(y);
    ***REMOVED***
    return date;
***REMOVED***

// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) ***REMOVED***
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
***REMOVED***

//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function dayOfYearFromWeeks(year, week, weekday, dow, doy) ***REMOVED***
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear, resDayOfYear;

    if (dayOfYear <= 0) ***REMOVED***
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
    ***REMOVED*** else if (dayOfYear > daysInYear(year)) ***REMOVED***
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
    ***REMOVED*** else ***REMOVED***
        resYear = year;
        resDayOfYear = dayOfYear;
    ***REMOVED***

    return ***REMOVED***
        year: resYear,
        dayOfYear: resDayOfYear
    ***REMOVED***;
***REMOVED***

function weekOfYear(mom, dow, doy) ***REMOVED***
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek, resYear;

    if (week < 1) ***REMOVED***
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
    ***REMOVED*** else if (week > weeksInYear(mom.year(), dow, doy)) ***REMOVED***
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
    ***REMOVED*** else ***REMOVED***
        resYear = mom.year();
        resWeek = week;
    ***REMOVED***

    return ***REMOVED***
        week: resWeek,
        year: resYear
    ***REMOVED***;
***REMOVED***

function weeksInYear(year, dow, doy) ***REMOVED***
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
***REMOVED***

// FORMATTING

addFormatToken('w', ['ww', 2], 'wo', 'week');
addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

// ALIASES

addUnitAlias('week', 'w');
addUnitAlias('isoWeek', 'W');

// PRIORITIES

addUnitPriority('week', 5);
addUnitPriority('isoWeek', 5);

// PARSING

addRegexToken('w',  match1to2);
addRegexToken('ww', match1to2, match2);
addRegexToken('W',  match1to2);
addRegexToken('WW', match1to2, match2);

addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) ***REMOVED***
    week[token.substr(0, 1)] = toInt(input);
***REMOVED***);

// HELPERS

// LOCALES

function localeWeek (mom) ***REMOVED***
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
***REMOVED***

var defaultLocaleWeek = ***REMOVED***
    dow : 0, // Sunday is the first day of the week.
    doy : 6  // The week that contains Jan 1st is the first week of the year.
***REMOVED***;

function localeFirstDayOfWeek () ***REMOVED***
    return this._week.dow;
***REMOVED***

function localeFirstDayOfYear () ***REMOVED***
    return this._week.doy;
***REMOVED***

// MOMENTS

function getSetWeek (input) ***REMOVED***
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
***REMOVED***

function getSetISOWeek (input) ***REMOVED***
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
***REMOVED***

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) ***REMOVED***
    return this.localeData().weekdaysMin(this, format);
***REMOVED***);

addFormatToken('ddd', 0, 0, function (format) ***REMOVED***
    return this.localeData().weekdaysShort(this, format);
***REMOVED***);

addFormatToken('dddd', 0, 0, function (format) ***REMOVED***
    return this.localeData().weekdays(this, format);
***REMOVED***);

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) ***REMOVED***
    return locale.weekdaysMinRegex(isStrict);
***REMOVED***);
addRegexToken('ddd',   function (isStrict, locale) ***REMOVED***
    return locale.weekdaysShortRegex(isStrict);
***REMOVED***);
addRegexToken('dddd',   function (isStrict, locale) ***REMOVED***
    return locale.weekdaysRegex(isStrict);
***REMOVED***);

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) ***REMOVED***
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) ***REMOVED***
        week.d = weekday;
    ***REMOVED*** else ***REMOVED***
        getParsingFlags(config).invalidWeekday = input;
    ***REMOVED***
***REMOVED***);

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) ***REMOVED***
    week[token] = toInt(input);
***REMOVED***);

// HELPERS

function parseWeekday(input, locale) ***REMOVED***
    if (typeof input !== 'string') ***REMOVED***
        return input;
    ***REMOVED***

    if (!isNaN(input)) ***REMOVED***
        return parseInt(input, 10);
    ***REMOVED***

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') ***REMOVED***
        return input;
    ***REMOVED***

    return null;
***REMOVED***

function parseIsoWeekday(input, locale) ***REMOVED***
    if (typeof input === 'string') ***REMOVED***
        return locale.weekdaysParse(input) % 7 || 7;
    ***REMOVED***
    return isNaN(input) ? null : input;
***REMOVED***

// LOCALES

var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
function localeWeekdays (m, format) ***REMOVED***
    if (!m) ***REMOVED***
        return this._weekdays;
    ***REMOVED***
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
***REMOVED***

var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
function localeWeekdaysShort (m) ***REMOVED***
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
***REMOVED***

var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
function localeWeekdaysMin (m) ***REMOVED***
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
***REMOVED***

function handleStrictParse$1(weekdayName, format, strict) ***REMOVED***
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) ***REMOVED***
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) ***REMOVED***
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        ***REMOVED***
    ***REMOVED***

    if (strict) ***REMOVED***
        if (format === 'dddd') ***REMOVED***
            ii = indexOf$1.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED*** else if (format === 'ddd') ***REMOVED***
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED*** else ***REMOVED***
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        if (format === 'dddd') ***REMOVED***
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) ***REMOVED***
                return ii;
            ***REMOVED***
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) ***REMOVED***
                return ii;
            ***REMOVED***
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED*** else if (format === 'ddd') ***REMOVED***
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) ***REMOVED***
                return ii;
            ***REMOVED***
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) ***REMOVED***
                return ii;
            ***REMOVED***
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED*** else ***REMOVED***
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            if (ii !== -1) ***REMOVED***
                return ii;
            ***REMOVED***
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) ***REMOVED***
                return ii;
            ***REMOVED***
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED***
    ***REMOVED***
***REMOVED***

function localeWeekdaysParse (weekdayName, format, strict) ***REMOVED***
    var i, mom, regex;

    if (this._weekdaysParseExact) ***REMOVED***
        return handleStrictParse$1.call(this, weekdayName, format, strict);
    ***REMOVED***

    if (!this._weekdaysParse) ***REMOVED***
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    ***REMOVED***

    for (i = 0; i < 7; i++) ***REMOVED***
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) ***REMOVED***
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        ***REMOVED***
        if (!this._weekdaysParse[i]) ***REMOVED***
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        ***REMOVED***
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) ***REMOVED***
            return i;
        ***REMOVED*** else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) ***REMOVED***
            return i;
        ***REMOVED*** else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) ***REMOVED***
            return i;
        ***REMOVED*** else if (!strict && this._weekdaysParse[i].test(weekdayName)) ***REMOVED***
            return i;
        ***REMOVED***
    ***REMOVED***
***REMOVED***

// MOMENTS

function getSetDayOfWeek (input) ***REMOVED***
    if (!this.isValid()) ***REMOVED***
        return input != null ? this : NaN;
    ***REMOVED***
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) ***REMOVED***
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    ***REMOVED*** else ***REMOVED***
        return day;
    ***REMOVED***
***REMOVED***

function getSetLocaleDayOfWeek (input) ***REMOVED***
    if (!this.isValid()) ***REMOVED***
        return input != null ? this : NaN;
    ***REMOVED***
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
***REMOVED***

function getSetISODayOfWeek (input) ***REMOVED***
    if (!this.isValid()) ***REMOVED***
        return input != null ? this : NaN;
    ***REMOVED***

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) ***REMOVED***
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    ***REMOVED*** else ***REMOVED***
        return this.day() || 7;
    ***REMOVED***
***REMOVED***

var defaultWeekdaysRegex = matchWord;
function weekdaysRegex (isStrict) ***REMOVED***
    if (this._weekdaysParseExact) ***REMOVED***
        if (!hasOwnProp(this, '_weekdaysRegex')) ***REMOVED***
            computeWeekdaysParse.call(this);
        ***REMOVED***
        if (isStrict) ***REMOVED***
            return this._weekdaysStrictRegex;
        ***REMOVED*** else ***REMOVED***
            return this._weekdaysRegex;
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        if (!hasOwnProp(this, '_weekdaysRegex')) ***REMOVED***
            this._weekdaysRegex = defaultWeekdaysRegex;
        ***REMOVED***
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    ***REMOVED***
***REMOVED***

var defaultWeekdaysShortRegex = matchWord;
function weekdaysShortRegex (isStrict) ***REMOVED***
    if (this._weekdaysParseExact) ***REMOVED***
        if (!hasOwnProp(this, '_weekdaysRegex')) ***REMOVED***
            computeWeekdaysParse.call(this);
        ***REMOVED***
        if (isStrict) ***REMOVED***
            return this._weekdaysShortStrictRegex;
        ***REMOVED*** else ***REMOVED***
            return this._weekdaysShortRegex;
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        if (!hasOwnProp(this, '_weekdaysShortRegex')) ***REMOVED***
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        ***REMOVED***
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    ***REMOVED***
***REMOVED***

var defaultWeekdaysMinRegex = matchWord;
function weekdaysMinRegex (isStrict) ***REMOVED***
    if (this._weekdaysParseExact) ***REMOVED***
        if (!hasOwnProp(this, '_weekdaysRegex')) ***REMOVED***
            computeWeekdaysParse.call(this);
        ***REMOVED***
        if (isStrict) ***REMOVED***
            return this._weekdaysMinStrictRegex;
        ***REMOVED*** else ***REMOVED***
            return this._weekdaysMinRegex;
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        if (!hasOwnProp(this, '_weekdaysMinRegex')) ***REMOVED***
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        ***REMOVED***
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    ***REMOVED***
***REMOVED***


function computeWeekdaysParse () ***REMOVED***
    function cmpLenRev(a, b) ***REMOVED***
        return b.length - a.length;
    ***REMOVED***

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) ***REMOVED***
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    ***REMOVED***
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) ***REMOVED***
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    ***REMOVED***

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
***REMOVED***

// FORMATTING

function hFormat() ***REMOVED***
    return this.hours() % 12 || 12;
***REMOVED***

function kFormat() ***REMOVED***
    return this.hours() || 24;
***REMOVED***

addFormatToken('H', ['HH', 2], 0, 'hour');
addFormatToken('h', ['hh', 2], 0, hFormat);
addFormatToken('k', ['kk', 2], 0, kFormat);

addFormatToken('hmm', 0, 0, function () ***REMOVED***
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
***REMOVED***);

addFormatToken('hmmss', 0, 0, function () ***REMOVED***
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
***REMOVED***);

addFormatToken('Hmm', 0, 0, function () ***REMOVED***
    return '' + this.hours() + zeroFill(this.minutes(), 2);
***REMOVED***);

addFormatToken('Hmmss', 0, 0, function () ***REMOVED***
    return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
***REMOVED***);

function meridiem (token, lowercase) ***REMOVED***
    addFormatToken(token, 0, 0, function () ***REMOVED***
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    ***REMOVED***);
***REMOVED***

meridiem('a', true);
meridiem('A', false);

// ALIASES

addUnitAlias('hour', 'h');

// PRIORITY
addUnitPriority('hour', 13);

// PARSING

function matchMeridiem (isStrict, locale) ***REMOVED***
    return locale._meridiemParse;
***REMOVED***

addRegexToken('a',  matchMeridiem);
addRegexToken('A',  matchMeridiem);
addRegexToken('H',  match1to2);
addRegexToken('h',  match1to2);
addRegexToken('HH', match1to2, match2);
addRegexToken('hh', match1to2, match2);

addRegexToken('hmm', match3to4);
addRegexToken('hmmss', match5to6);
addRegexToken('Hmm', match3to4);
addRegexToken('Hmmss', match5to6);

addParseToken(['H', 'HH'], HOUR);
addParseToken(['a', 'A'], function (input, array, config) ***REMOVED***
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
***REMOVED***);
addParseToken(['h', 'hh'], function (input, array, config) ***REMOVED***
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
***REMOVED***);
addParseToken('hmm', function (input, array, config) ***REMOVED***
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
***REMOVED***);
addParseToken('hmmss', function (input, array, config) ***REMOVED***
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
***REMOVED***);
addParseToken('Hmm', function (input, array, config) ***REMOVED***
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
***REMOVED***);
addParseToken('Hmmss', function (input, array, config) ***REMOVED***
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
***REMOVED***);

// LOCALES

function localeIsPM (input) ***REMOVED***
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
***REMOVED***

var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem (hours, minutes, isLower) ***REMOVED***
    if (hours > 11) ***REMOVED***
        return isLower ? 'pm' : 'PM';
    ***REMOVED*** else ***REMOVED***
        return isLower ? 'am' : 'AM';
    ***REMOVED***
***REMOVED***


// MOMENTS

// Setting the hour should keep the time, because the user explicitly
// specified which hour he wants. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
var getSetHour = makeGetSet('Hours', true);

// months
// week
// weekdays
// meridiem
var baseConfig = ***REMOVED***
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    ordinalParse: defaultOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse
***REMOVED***;

// internal storage for locale config files
var locales = ***REMOVED******REMOVED***;
var localeFamilies = ***REMOVED******REMOVED***;
var globalLocale;

function normalizeLocale(key) ***REMOVED***
    return key ? key.toLowerCase().replace('_', '-') : key;
***REMOVED***

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) ***REMOVED***
    var i = 0, j, next, locale, split;

    while (i < names.length) ***REMOVED***
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) ***REMOVED***
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) ***REMOVED***
                return locale;
            ***REMOVED***
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) ***REMOVED***
                //the next array item is better than a shallower substring of this one
                break;
            ***REMOVED***
            j--;
        ***REMOVED***
        i++;
    ***REMOVED***
    return null;
***REMOVED***

function loadLocale(name) ***REMOVED***
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) ***REMOVED***
        try ***REMOVED***
            oldLocale = globalLocale._abbr;
            require('./locale/' + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale);
        ***REMOVED*** catch (e) ***REMOVED*** ***REMOVED***
    ***REMOVED***
    return locales[name];
***REMOVED***

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function getSetGlobalLocale (key, values) ***REMOVED***
    var data;
    if (key) ***REMOVED***
        if (isUndefined(values)) ***REMOVED***
            data = getLocale(key);
        ***REMOVED***
        else ***REMOVED***
            data = defineLocale(key, values);
        ***REMOVED***

        if (data) ***REMOVED***
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        ***REMOVED***
    ***REMOVED***

    return globalLocale._abbr;
***REMOVED***

function defineLocale (name, config) ***REMOVED***
    if (config !== null) ***REMOVED***
        var parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) ***REMOVED***
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        ***REMOVED*** else if (config.parentLocale != null) ***REMOVED***
            if (locales[config.parentLocale] != null) ***REMOVED***
                parentConfig = locales[config.parentLocale]._config;
            ***REMOVED*** else ***REMOVED***
                if (!localeFamilies[config.parentLocale]) ***REMOVED***
                    localeFamilies[config.parentLocale] = [];
                ***REMOVED***
                localeFamilies[config.parentLocale].push(***REMOVED***
                    name: name,
                    config: config
                ***REMOVED***);
                return null;
            ***REMOVED***
        ***REMOVED***
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) ***REMOVED***
            localeFamilies[name].forEach(function (x) ***REMOVED***
                defineLocale(x.name, x.config);
            ***REMOVED***);
        ***REMOVED***

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    ***REMOVED*** else ***REMOVED***
        // useful for testing
        delete locales[name];
        return null;
    ***REMOVED***
***REMOVED***

function updateLocale(name, config) ***REMOVED***
    if (config != null) ***REMOVED***
        var locale, parentConfig = baseConfig;
        // MERGE
        if (locales[name] != null) ***REMOVED***
            parentConfig = locales[name]._config;
        ***REMOVED***
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    ***REMOVED*** else ***REMOVED***
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) ***REMOVED***
            if (locales[name].parentLocale != null) ***REMOVED***
                locales[name] = locales[name].parentLocale;
            ***REMOVED*** else if (locales[name] != null) ***REMOVED***
                delete locales[name];
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    return locales[name];
***REMOVED***

// returns locale data
function getLocale (key) ***REMOVED***
    var locale;

    if (key && key._locale && key._locale._abbr) ***REMOVED***
        key = key._locale._abbr;
    ***REMOVED***

    if (!key) ***REMOVED***
        return globalLocale;
    ***REMOVED***

    if (!isArray(key)) ***REMOVED***
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) ***REMOVED***
            return locale;
        ***REMOVED***
        key = [key];
    ***REMOVED***

    return chooseLocale(key);
***REMOVED***

function listLocales() ***REMOVED***
    return keys$1(locales);
***REMOVED***

function checkOverflow (m) ***REMOVED***
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) ***REMOVED***
        overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) ***REMOVED***
            overflow = DATE;
        ***REMOVED***
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) ***REMOVED***
            overflow = WEEK;
        ***REMOVED***
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) ***REMOVED***
            overflow = WEEKDAY;
        ***REMOVED***

        getParsingFlags(m).overflow = overflow;
    ***REMOVED***

    return m;
***REMOVED***

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d***REMOVED***6***REMOVED***|\d***REMOVED***4***REMOVED***)-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d***REMOVED***6***REMOVED***|\d***REMOVED***4***REMOVED***)(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d***REMOVED***6***REMOVED***-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d***REMOVED***4***REMOVED***-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d***REMOVED***4***REMOVED***-W\d\d-\d/],
    ['GGGG-[W]WW', /\d***REMOVED***4***REMOVED***-W\d\d/, false],
    ['YYYY-DDD', /\d***REMOVED***4***REMOVED***-\d***REMOVED***3***REMOVED***/],
    ['YYYY-MM', /\d***REMOVED***4***REMOVED***-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d***REMOVED***10***REMOVED***/],
    ['YYYYMMDD', /\d***REMOVED***8***REMOVED***/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d***REMOVED***4***REMOVED***W\d***REMOVED***3***REMOVED***/],
    ['GGGG[W]WW', /\d***REMOVED***4***REMOVED***W\d***REMOVED***2***REMOVED***/, false],
    ['YYYYDDD', /\d***REMOVED***7***REMOVED***/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
function configFromISO(config) ***REMOVED***
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) ***REMOVED***
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) ***REMOVED***
            if (isoDates[i][1].exec(match[1])) ***REMOVED***
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            ***REMOVED***
        ***REMOVED***
        if (dateFormat == null) ***REMOVED***
            config._isValid = false;
            return;
        ***REMOVED***
        if (match[3]) ***REMOVED***
            for (i = 0, l = isoTimes.length; i < l; i++) ***REMOVED***
                if (isoTimes[i][1].exec(match[3])) ***REMOVED***
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                ***REMOVED***
            ***REMOVED***
            if (timeFormat == null) ***REMOVED***
                config._isValid = false;
                return;
            ***REMOVED***
        ***REMOVED***
        if (!allowTime && timeFormat != null) ***REMOVED***
            config._isValid = false;
            return;
        ***REMOVED***
        if (match[4]) ***REMOVED***
            if (tzRegex.exec(match[4])) ***REMOVED***
                tzFormat = 'Z';
            ***REMOVED*** else ***REMOVED***
                config._isValid = false;
                return;
            ***REMOVED***
        ***REMOVED***
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    ***REMOVED*** else ***REMOVED***
        config._isValid = false;
    ***REMOVED***
***REMOVED***

// date from iso format or fallback
function configFromString(config) ***REMOVED***
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) ***REMOVED***
        config._d = new Date(+matched[1]);
        return;
    ***REMOVED***

    configFromISO(config);
    if (config._isValid === false) ***REMOVED***
        delete config._isValid;
        hooks.createFromInputFallback(config);
    ***REMOVED***
***REMOVED***

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) ***REMOVED***
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    ***REMOVED***
);

// Pick the first defined of two or three arguments.
function defaults(a, b, c) ***REMOVED***
    if (a != null) ***REMOVED***
        return a;
    ***REMOVED***
    if (b != null) ***REMOVED***
        return b;
    ***REMOVED***
    return c;
***REMOVED***

function currentDateArray(config) ***REMOVED***
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) ***REMOVED***
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    ***REMOVED***
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
***REMOVED***

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function configFromArray (config) ***REMOVED***
    var i, date, input = [], currentDate, yearToUse;

    if (config._d) ***REMOVED***
        return;
    ***REMOVED***

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) ***REMOVED***
        dayOfYearFromWeekInfo(config);
    ***REMOVED***

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear) ***REMOVED***
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse)) ***REMOVED***
            getParsingFlags(config)._overflowDayOfYear = true;
        ***REMOVED***

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    ***REMOVED***

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) ***REMOVED***
        config._a[i] = input[i] = currentDate[i];
    ***REMOVED***

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) ***REMOVED***
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    ***REMOVED***

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) ***REMOVED***
        config._nextDay = true;
        config._a[HOUR] = 0;
    ***REMOVED***

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) ***REMOVED***
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    ***REMOVED***

    if (config._nextDay) ***REMOVED***
        config._a[HOUR] = 24;
    ***REMOVED***
***REMOVED***

function dayOfYearFromWeekInfo(config) ***REMOVED***
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) ***REMOVED***
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) ***REMOVED***
            weekdayOverflow = true;
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) ***REMOVED***
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) ***REMOVED***
                weekdayOverflow = true;
            ***REMOVED***
        ***REMOVED*** else if (w.e != null) ***REMOVED***
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) ***REMOVED***
                weekdayOverflow = true;
            ***REMOVED***
        ***REMOVED*** else ***REMOVED***
            // default to begining of week
            weekday = dow;
        ***REMOVED***
    ***REMOVED***
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) ***REMOVED***
        getParsingFlags(config)._overflowWeeks = true;
    ***REMOVED*** else if (weekdayOverflow != null) ***REMOVED***
        getParsingFlags(config)._overflowWeekday = true;
    ***REMOVED*** else ***REMOVED***
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    ***REMOVED***
***REMOVED***

// constant that refers to the ISO standard
hooks.ISO_8601 = function () ***REMOVED******REMOVED***;

// date from string and format string
function configFromStringAndFormat(config) ***REMOVED***
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) ***REMOVED***
        configFromISO(config);
        return;
    ***REMOVED***

    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) ***REMOVED***
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) ***REMOVED***
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) ***REMOVED***
                getParsingFlags(config).unusedInput.push(skipped);
            ***REMOVED***
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
        ***REMOVED***
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) ***REMOVED***
            if (parsedInput) ***REMOVED***
                getParsingFlags(config).empty = false;
            ***REMOVED***
            else ***REMOVED***
                getParsingFlags(config).unusedTokens.push(token);
            ***REMOVED***
            addTimeToArrayFromToken(token, parsedInput, config);
        ***REMOVED***
        else if (config._strict && !parsedInput) ***REMOVED***
            getParsingFlags(config).unusedTokens.push(token);
        ***REMOVED***
    ***REMOVED***

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) ***REMOVED***
        getParsingFlags(config).unusedInput.push(string);
    ***REMOVED***

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) ***REMOVED***
        getParsingFlags(config).bigHour = undefined;
    ***REMOVED***

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
***REMOVED***


function meridiemFixWrap (locale, hour, meridiem) ***REMOVED***
    var isPm;

    if (meridiem == null) ***REMOVED***
        // nothing to do
        return hour;
    ***REMOVED***
    if (locale.meridiemHour != null) ***REMOVED***
        return locale.meridiemHour(hour, meridiem);
    ***REMOVED*** else if (locale.isPM != null) ***REMOVED***
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) ***REMOVED***
            hour += 12;
        ***REMOVED***
        if (!isPm && hour === 12) ***REMOVED***
            hour = 0;
        ***REMOVED***
        return hour;
    ***REMOVED*** else ***REMOVED***
        // this is not supposed to happen
        return hour;
    ***REMOVED***
***REMOVED***

// date from string and array of format strings
function configFromStringAndArray(config) ***REMOVED***
    var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

    if (config._f.length === 0) ***REMOVED***
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    ***REMOVED***

    for (i = 0; i < config._f.length; i++) ***REMOVED***
        currentScore = 0;
        tempConfig = copyConfig(***REMOVED******REMOVED***, config);
        if (config._useUTC != null) ***REMOVED***
            tempConfig._useUTC = config._useUTC;
        ***REMOVED***
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!isValid(tempConfig)) ***REMOVED***
            continue;
        ***REMOVED***

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) ***REMOVED***
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
        ***REMOVED***
    ***REMOVED***

    extend(config, bestMoment || tempConfig);
***REMOVED***

function configFromObject(config) ***REMOVED***
    if (config._d) ***REMOVED***
        return;
    ***REMOVED***

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) ***REMOVED***
        return obj && parseInt(obj, 10);
    ***REMOVED***);

    configFromArray(config);
***REMOVED***

function createFromConfig (config) ***REMOVED***
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) ***REMOVED***
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    ***REMOVED***

    return res;
***REMOVED***

function prepareConfig (config) ***REMOVED***
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) ***REMOVED***
        return createInvalid(***REMOVED***nullInput: true***REMOVED***);
    ***REMOVED***

    if (typeof input === 'string') ***REMOVED***
        config._i = input = config._locale.preparse(input);
    ***REMOVED***

    if (isMoment(input)) ***REMOVED***
        return new Moment(checkOverflow(input));
    ***REMOVED*** else if (isDate(input)) ***REMOVED***
        config._d = input;
    ***REMOVED*** else if (isArray(format)) ***REMOVED***
        configFromStringAndArray(config);
    ***REMOVED*** else if (format) ***REMOVED***
        configFromStringAndFormat(config);
    ***REMOVED***  else ***REMOVED***
        configFromInput(config);
    ***REMOVED***

    if (!isValid(config)) ***REMOVED***
        config._d = null;
    ***REMOVED***

    return config;
***REMOVED***

function configFromInput(config) ***REMOVED***
    var input = config._i;
    if (input === undefined) ***REMOVED***
        config._d = new Date(hooks.now());
    ***REMOVED*** else if (isDate(input)) ***REMOVED***
        config._d = new Date(input.valueOf());
    ***REMOVED*** else if (typeof input === 'string') ***REMOVED***
        configFromString(config);
    ***REMOVED*** else if (isArray(input)) ***REMOVED***
        config._a = map(input.slice(0), function (obj) ***REMOVED***
            return parseInt(obj, 10);
        ***REMOVED***);
        configFromArray(config);
    ***REMOVED*** else if (typeof(input) === 'object') ***REMOVED***
        configFromObject(config);
    ***REMOVED*** else if (isNumber(input)) ***REMOVED***
        // from milliseconds
        config._d = new Date(input);
    ***REMOVED*** else ***REMOVED***
        hooks.createFromInputFallback(config);
    ***REMOVED***
***REMOVED***

function createLocalOrUTC (input, format, locale, strict, isUTC) ***REMOVED***
    var c = ***REMOVED******REMOVED***;

    if (locale === true || locale === false) ***REMOVED***
        strict = locale;
        locale = undefined;
    ***REMOVED***

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) ***REMOVED***
        input = undefined;
    ***REMOVED***
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
***REMOVED***

function createLocal (input, format, locale, strict) ***REMOVED***
    return createLocalOrUTC(input, format, locale, strict, false);
***REMOVED***

var prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () ***REMOVED***
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) ***REMOVED***
            return other < this ? this : other;
        ***REMOVED*** else ***REMOVED***
            return createInvalid();
        ***REMOVED***
    ***REMOVED***
);

var prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () ***REMOVED***
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) ***REMOVED***
            return other > this ? this : other;
        ***REMOVED*** else ***REMOVED***
            return createInvalid();
        ***REMOVED***
    ***REMOVED***
);

// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function pickBy(fn, moments) ***REMOVED***
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) ***REMOVED***
        moments = moments[0];
    ***REMOVED***
    if (!moments.length) ***REMOVED***
        return createLocal();
    ***REMOVED***
    res = moments[0];
    for (i = 1; i < moments.length; ++i) ***REMOVED***
        if (!moments[i].isValid() || moments[i][fn](res)) ***REMOVED***
            res = moments[i];
        ***REMOVED***
    ***REMOVED***
    return res;
***REMOVED***

// TODO: Use [].sort instead?
function min () ***REMOVED***
    var args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
***REMOVED***

function max () ***REMOVED***
    var args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
***REMOVED***

var now = function () ***REMOVED***
    return Date.now ? Date.now() : +(new Date());
***REMOVED***;

function Duration (duration) ***REMOVED***
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

    // representation for dateAddRemove
    this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days +
        weeks * 7;
    // It is impossible translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months +
        quarters * 3 +
        years * 12;

    this._data = ***REMOVED******REMOVED***;

    this._locale = getLocale();

    this._bubble();
***REMOVED***

function isDuration (obj) ***REMOVED***
    return obj instanceof Duration;
***REMOVED***

function absRound (number) ***REMOVED***
    if (number < 0) ***REMOVED***
        return Math.round(-1 * number) * -1;
    ***REMOVED*** else ***REMOVED***
        return Math.round(number);
    ***REMOVED***
***REMOVED***

// FORMATTING

function offset (token, separator) ***REMOVED***
    addFormatToken(token, 0, 0, function () ***REMOVED***
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) ***REMOVED***
            offset = -offset;
            sign = '-';
        ***REMOVED***
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    ***REMOVED***);
***REMOVED***

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) ***REMOVED***
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
***REMOVED***);

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) ***REMOVED***
    var matches = (string || '').match(matcher);

    if (matches === null) ***REMOVED***
        return null;
    ***REMOVED***

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
***REMOVED***

// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) ***REMOVED***
    var res, diff;
    if (model._isUTC) ***REMOVED***
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    ***REMOVED*** else ***REMOVED***
        return createLocal(input).local();
    ***REMOVED***
***REMOVED***

function getDateOffset (m) ***REMOVED***
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
***REMOVED***

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () ***REMOVED******REMOVED***;

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset (input, keepLocalTime) ***REMOVED***
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) ***REMOVED***
        return input != null ? this : NaN;
    ***REMOVED***
    if (input != null) ***REMOVED***
        if (typeof input === 'string') ***REMOVED***
            input = offsetFromString(matchShortOffset, input);
            if (input === null) ***REMOVED***
                return this;
            ***REMOVED***
        ***REMOVED*** else if (Math.abs(input) < 16) ***REMOVED***
            input = input * 60;
        ***REMOVED***
        if (!this._isUTC && keepLocalTime) ***REMOVED***
            localAdjust = getDateOffset(this);
        ***REMOVED***
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) ***REMOVED***
            this.add(localAdjust, 'm');
        ***REMOVED***
        if (offset !== input) ***REMOVED***
            if (!keepLocalTime || this._changeInProgress) ***REMOVED***
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            ***REMOVED*** else if (!this._changeInProgress) ***REMOVED***
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            ***REMOVED***
        ***REMOVED***
        return this;
    ***REMOVED*** else ***REMOVED***
        return this._isUTC ? offset : getDateOffset(this);
    ***REMOVED***
***REMOVED***

function getSetZone (input, keepLocalTime) ***REMOVED***
    if (input != null) ***REMOVED***
        if (typeof input !== 'string') ***REMOVED***
            input = -input;
        ***REMOVED***

        this.utcOffset(input, keepLocalTime);

        return this;
    ***REMOVED*** else ***REMOVED***
        return -this.utcOffset();
    ***REMOVED***
***REMOVED***

function setOffsetToUTC (keepLocalTime) ***REMOVED***
    return this.utcOffset(0, keepLocalTime);
***REMOVED***

function setOffsetToLocal (keepLocalTime) ***REMOVED***
    if (this._isUTC) ***REMOVED***
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) ***REMOVED***
            this.subtract(getDateOffset(this), 'm');
        ***REMOVED***
    ***REMOVED***
    return this;
***REMOVED***

function setOffsetToParsedOffset () ***REMOVED***
    if (this._tzm != null) ***REMOVED***
        this.utcOffset(this._tzm);
    ***REMOVED*** else if (typeof this._i === 'string') ***REMOVED***
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) ***REMOVED***
            this.utcOffset(tZone);
        ***REMOVED***
        else ***REMOVED***
            this.utcOffset(0, true);
        ***REMOVED***
    ***REMOVED***
    return this;
***REMOVED***

function hasAlignedHourOffset (input) ***REMOVED***
    if (!this.isValid()) ***REMOVED***
        return false;
    ***REMOVED***
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
***REMOVED***

function isDaylightSavingTime () ***REMOVED***
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
***REMOVED***

function isDaylightSavingTimeShifted () ***REMOVED***
    if (!isUndefined(this._isDSTShifted)) ***REMOVED***
        return this._isDSTShifted;
    ***REMOVED***

    var c = ***REMOVED******REMOVED***;

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) ***REMOVED***
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    ***REMOVED*** else ***REMOVED***
        this._isDSTShifted = false;
    ***REMOVED***

    return this._isDSTShifted;
***REMOVED***

function isLocal () ***REMOVED***
    return this.isValid() ? !this._isUTC : false;
***REMOVED***

function isUtcOffset () ***REMOVED***
    return this.isValid() ? this._isUTC : false;
***REMOVED***

function isUtc () ***REMOVED***
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
***REMOVED***

// ASP.NET json date format regex
var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
// and further modified to allow for strings containing both week and day
var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

function createDuration (input, key) ***REMOVED***
    var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) ***REMOVED***
        duration = ***REMOVED***
            ms : input._milliseconds,
            d  : input._days,
            M  : input._months
        ***REMOVED***;
    ***REMOVED*** else if (isNumber(input)) ***REMOVED***
        duration = ***REMOVED******REMOVED***;
        if (key) ***REMOVED***
            duration[key] = input;
        ***REMOVED*** else ***REMOVED***
            duration.milliseconds = input;
        ***REMOVED***
    ***REMOVED*** else if (!!(match = aspNetRegex.exec(input))) ***REMOVED***
        sign = (match[1] === '-') ? -1 : 1;
        duration = ***REMOVED***
            y  : 0,
            d  : toInt(match[DATE])                         * sign,
            h  : toInt(match[HOUR])                         * sign,
            m  : toInt(match[MINUTE])                       * sign,
            s  : toInt(match[SECOND])                       * sign,
            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        ***REMOVED***;
    ***REMOVED*** else if (!!(match = isoRegex.exec(input))) ***REMOVED***
        sign = (match[1] === '-') ? -1 : 1;
        duration = ***REMOVED***
            y : parseIso(match[2], sign),
            M : parseIso(match[3], sign),
            w : parseIso(match[4], sign),
            d : parseIso(match[5], sign),
            h : parseIso(match[6], sign),
            m : parseIso(match[7], sign),
            s : parseIso(match[8], sign)
        ***REMOVED***;
    ***REMOVED*** else if (duration == null) ***REMOVED***// checks for null or undefined
        duration = ***REMOVED******REMOVED***;
    ***REMOVED*** else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) ***REMOVED***
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

        duration = ***REMOVED******REMOVED***;
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
    ***REMOVED***

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) ***REMOVED***
        ret._locale = input._locale;
    ***REMOVED***

    return ret;
***REMOVED***

createDuration.fn = Duration.prototype;

function parseIso (inp, sign) ***REMOVED***
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
***REMOVED***

function positiveMomentsDifference(base, other) ***REMOVED***
    var res = ***REMOVED***milliseconds: 0, months: 0***REMOVED***;

    res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) ***REMOVED***
        --res.months;
    ***REMOVED***

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
***REMOVED***

function momentsDifference(base, other) ***REMOVED***
    var res;
    if (!(base.isValid() && other.isValid())) ***REMOVED***
        return ***REMOVED***milliseconds: 0, months: 0***REMOVED***;
    ***REMOVED***

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) ***REMOVED***
        res = positiveMomentsDifference(base, other);
    ***REMOVED*** else ***REMOVED***
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
    ***REMOVED***

    return res;
***REMOVED***

// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) ***REMOVED***
    return function (val, period) ***REMOVED***
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) ***REMOVED***
            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val; val = period; period = tmp;
        ***REMOVED***

        val = typeof val === 'string' ? +val : val;
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    ***REMOVED***;
***REMOVED***

function addSubtract (mom, duration, isAdding, updateOffset) ***REMOVED***
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) ***REMOVED***
        // No op
        return;
    ***REMOVED***

    updateOffset = updateOffset == null ? true : updateOffset;

    if (milliseconds) ***REMOVED***
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    ***REMOVED***
    if (days) ***REMOVED***
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    ***REMOVED***
    if (months) ***REMOVED***
        setMonth(mom, get(mom, 'Month') + months * isAdding);
    ***REMOVED***
    if (updateOffset) ***REMOVED***
        hooks.updateOffset(mom, days || months);
    ***REMOVED***
***REMOVED***

var add      = createAdder(1, 'add');
var subtract = createAdder(-1, 'subtract');

function getCalendarFormat(myMoment, now) ***REMOVED***
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';
***REMOVED***

function calendar$1 (time, formats) ***REMOVED***
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';

    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
***REMOVED***

function clone () ***REMOVED***
    return new Moment(this);
***REMOVED***

function isAfter (input, units) ***REMOVED***
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) ***REMOVED***
        return false;
    ***REMOVED***
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') ***REMOVED***
        return this.valueOf() > localInput.valueOf();
    ***REMOVED*** else ***REMOVED***
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    ***REMOVED***
***REMOVED***

function isBefore (input, units) ***REMOVED***
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) ***REMOVED***
        return false;
    ***REMOVED***
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') ***REMOVED***
        return this.valueOf() < localInput.valueOf();
    ***REMOVED*** else ***REMOVED***
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    ***REMOVED***
***REMOVED***

function isBetween (from, to, units, inclusivity) ***REMOVED***
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
***REMOVED***

function isSame (input, units) ***REMOVED***
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) ***REMOVED***
        return false;
    ***REMOVED***
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') ***REMOVED***
        return this.valueOf() === localInput.valueOf();
    ***REMOVED*** else ***REMOVED***
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    ***REMOVED***
***REMOVED***

function isSameOrAfter (input, units) ***REMOVED***
    return this.isSame(input, units) || this.isAfter(input,units);
***REMOVED***

function isSameOrBefore (input, units) ***REMOVED***
    return this.isSame(input, units) || this.isBefore(input,units);
***REMOVED***

function diff (input, units, asFloat) ***REMOVED***
    var that,
        zoneDelta,
        delta, output;

    if (!this.isValid()) ***REMOVED***
        return NaN;
    ***REMOVED***

    that = cloneWithOffset(input, this);

    if (!that.isValid()) ***REMOVED***
        return NaN;
    ***REMOVED***

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    if (units === 'year' || units === 'month' || units === 'quarter') ***REMOVED***
        output = monthDiff(this, that);
        if (units === 'quarter') ***REMOVED***
            output = output / 3;
        ***REMOVED*** else if (units === 'year') ***REMOVED***
            output = output / 12;
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : // 1000
            units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
            delta;
    ***REMOVED***
    return asFloat ? output : absFloor(output);
***REMOVED***

function monthDiff (a, b) ***REMOVED***
    // difference in months
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

    if (b - anchor < 0) ***REMOVED***
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
    ***REMOVED*** else ***REMOVED***
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
    ***REMOVED***

    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
***REMOVED***

hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

function toString () ***REMOVED***
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
***REMOVED***

function toISOString () ***REMOVED***
    var m = this.clone().utc();
    if (0 < m.year() && m.year() <= 9999) ***REMOVED***
        if (isFunction(Date.prototype.toISOString)) ***REMOVED***
            // native implementation is ~50x faster, use it when we can
            return this.toDate().toISOString();
        ***REMOVED*** else ***REMOVED***
            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    ***REMOVED***
***REMOVED***

/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
function inspect () ***REMOVED***
    if (!this.isValid()) ***REMOVED***
        return 'moment.invalid(/* ' + this._i + ' */)';
    ***REMOVED***
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) ***REMOVED***
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
    ***REMOVED***
    var prefix = '[' + func + '("]';
    var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';

    return this.format(prefix + year + datetime + suffix);
***REMOVED***

function format (inputString) ***REMOVED***
    if (!inputString) ***REMOVED***
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    ***REMOVED***
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
***REMOVED***

function from (time, withoutSuffix) ***REMOVED***
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) ***REMOVED***
        return createDuration(***REMOVED***to: this, from: time***REMOVED***).locale(this.locale()).humanize(!withoutSuffix);
    ***REMOVED*** else ***REMOVED***
        return this.localeData().invalidDate();
    ***REMOVED***
***REMOVED***

function fromNow (withoutSuffix) ***REMOVED***
    return this.from(createLocal(), withoutSuffix);
***REMOVED***

function to (time, withoutSuffix) ***REMOVED***
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) ***REMOVED***
        return createDuration(***REMOVED***from: this, to: time***REMOVED***).locale(this.locale()).humanize(!withoutSuffix);
    ***REMOVED*** else ***REMOVED***
        return this.localeData().invalidDate();
    ***REMOVED***
***REMOVED***

function toNow (withoutSuffix) ***REMOVED***
    return this.to(createLocal(), withoutSuffix);
***REMOVED***

// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function locale (key) ***REMOVED***
    var newLocaleData;

    if (key === undefined) ***REMOVED***
        return this._locale._abbr;
    ***REMOVED*** else ***REMOVED***
        newLocaleData = getLocale(key);
        if (newLocaleData != null) ***REMOVED***
            this._locale = newLocaleData;
        ***REMOVED***
        return this;
    ***REMOVED***
***REMOVED***

var lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) ***REMOVED***
        if (key === undefined) ***REMOVED***
            return this.localeData();
        ***REMOVED*** else ***REMOVED***
            return this.locale(key);
        ***REMOVED***
    ***REMOVED***
);

function localeData () ***REMOVED***
    return this._locale;
***REMOVED***

function startOf (units) ***REMOVED***
    units = normalizeUnits(units);
    // the following switch intentionally omits break keywords
    // to utilize falling through the cases.
    switch (units) ***REMOVED***
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
    ***REMOVED***

    // weeks are a special case
    if (units === 'week') ***REMOVED***
        this.weekday(0);
    ***REMOVED***
    if (units === 'isoWeek') ***REMOVED***
        this.isoWeekday(1);
    ***REMOVED***

    // quarters are also special
    if (units === 'quarter') ***REMOVED***
        this.month(Math.floor(this.month() / 3) * 3);
    ***REMOVED***

    return this;
***REMOVED***

function endOf (units) ***REMOVED***
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') ***REMOVED***
        return this;
    ***REMOVED***

    // 'date' is an alias for 'day', so it should be considered as such.
    if (units === 'date') ***REMOVED***
        units = 'day';
    ***REMOVED***

    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
***REMOVED***

function valueOf () ***REMOVED***
    return this._d.valueOf() - ((this._offset || 0) * 60000);
***REMOVED***

function unix () ***REMOVED***
    return Math.floor(this.valueOf() / 1000);
***REMOVED***

function toDate () ***REMOVED***
    return new Date(this.valueOf());
***REMOVED***

function toArray () ***REMOVED***
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
***REMOVED***

function toObject () ***REMOVED***
    var m = this;
    return ***REMOVED***
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
    ***REMOVED***;
***REMOVED***

function toJSON () ***REMOVED***
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
***REMOVED***

function isValid$1 () ***REMOVED***
    return isValid(this);
***REMOVED***

function parsingFlags () ***REMOVED***
    return extend(***REMOVED******REMOVED***, getParsingFlags(this));
***REMOVED***

function invalidAt () ***REMOVED***
    return getParsingFlags(this).overflow;
***REMOVED***

function creationData() ***REMOVED***
    return ***REMOVED***
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
    ***REMOVED***;
***REMOVED***

// FORMATTING

addFormatToken(0, ['gg', 2], 0, function () ***REMOVED***
    return this.weekYear() % 100;
***REMOVED***);

addFormatToken(0, ['GG', 2], 0, function () ***REMOVED***
    return this.isoWeekYear() % 100;
***REMOVED***);

function addWeekYearFormatToken (token, getter) ***REMOVED***
    addFormatToken(0, [token, token.length], 0, getter);
***REMOVED***

addWeekYearFormatToken('gggg',     'weekYear');
addWeekYearFormatToken('ggggg',    'weekYear');
addWeekYearFormatToken('GGGG',  'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');

// ALIASES

addUnitAlias('weekYear', 'gg');
addUnitAlias('isoWeekYear', 'GG');

// PRIORITY

addUnitPriority('weekYear', 1);
addUnitPriority('isoWeekYear', 1);


// PARSING

addRegexToken('G',      matchSigned);
addRegexToken('g',      matchSigned);
addRegexToken('GG',     match1to2, match2);
addRegexToken('gg',     match1to2, match2);
addRegexToken('GGGG',   match1to4, match4);
addRegexToken('gggg',   match1to4, match4);
addRegexToken('GGGGG',  match1to6, match6);
addRegexToken('ggggg',  match1to6, match6);

addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) ***REMOVED***
    week[token.substr(0, 2)] = toInt(input);
***REMOVED***);

addWeekParseToken(['gg', 'GG'], function (input, week, config, token) ***REMOVED***
    week[token] = hooks.parseTwoDigitYear(input);
***REMOVED***);

// MOMENTS

function getSetWeekYear (input) ***REMOVED***
    return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
***REMOVED***

function getSetISOWeekYear (input) ***REMOVED***
    return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
***REMOVED***

function getISOWeeksInYear () ***REMOVED***
    return weeksInYear(this.year(), 1, 4);
***REMOVED***

function getWeeksInYear () ***REMOVED***
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
***REMOVED***

function getSetWeekYearHelper(input, week, weekday, dow, doy) ***REMOVED***
    var weeksTarget;
    if (input == null) ***REMOVED***
        return weekOfYear(this, dow, doy).year;
    ***REMOVED*** else ***REMOVED***
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) ***REMOVED***
            week = weeksTarget;
        ***REMOVED***
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    ***REMOVED***
***REMOVED***

function setWeekAll(weekYear, week, weekday, dow, doy) ***REMOVED***
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
***REMOVED***

// FORMATTING

addFormatToken('Q', 0, 'Qo', 'quarter');

// ALIASES

addUnitAlias('quarter', 'Q');

// PRIORITY

addUnitPriority('quarter', 7);

// PARSING

addRegexToken('Q', match1);
addParseToken('Q', function (input, array) ***REMOVED***
    array[MONTH] = (toInt(input) - 1) * 3;
***REMOVED***);

// MOMENTS

function getSetQuarter (input) ***REMOVED***
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
***REMOVED***

// FORMATTING

addFormatToken('D', ['DD', 2], 'Do', 'date');

// ALIASES

addUnitAlias('date', 'D');

// PRIOROITY
addUnitPriority('date', 9);

// PARSING

addRegexToken('D',  match1to2);
addRegexToken('DD', match1to2, match2);
addRegexToken('Do', function (isStrict, locale) ***REMOVED***
    return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
***REMOVED***);

addParseToken(['D', 'DD'], DATE);
addParseToken('Do', function (input, array) ***REMOVED***
    array[DATE] = toInt(input.match(match1to2)[0], 10);
***REMOVED***);

// MOMENTS

var getSetDayOfMonth = makeGetSet('Date', true);

// FORMATTING

addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

// ALIASES

addUnitAlias('dayOfYear', 'DDD');

// PRIORITY
addUnitPriority('dayOfYear', 4);

// PARSING

addRegexToken('DDD',  match1to3);
addRegexToken('DDDD', match3);
addParseToken(['DDD', 'DDDD'], function (input, array, config) ***REMOVED***
    config._dayOfYear = toInt(input);
***REMOVED***);

// HELPERS

// MOMENTS

function getSetDayOfYear (input) ***REMOVED***
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
***REMOVED***

// FORMATTING

addFormatToken('m', ['mm', 2], 0, 'minute');

// ALIASES

addUnitAlias('minute', 'm');

// PRIORITY

addUnitPriority('minute', 14);

// PARSING

addRegexToken('m',  match1to2);
addRegexToken('mm', match1to2, match2);
addParseToken(['m', 'mm'], MINUTE);

// MOMENTS

var getSetMinute = makeGetSet('Minutes', false);

// FORMATTING

addFormatToken('s', ['ss', 2], 0, 'second');

// ALIASES

addUnitAlias('second', 's');

// PRIORITY

addUnitPriority('second', 15);

// PARSING

addRegexToken('s',  match1to2);
addRegexToken('ss', match1to2, match2);
addParseToken(['s', 'ss'], SECOND);

// MOMENTS

var getSetSecond = makeGetSet('Seconds', false);

// FORMATTING

addFormatToken('S', 0, 0, function () ***REMOVED***
    return ~~(this.millisecond() / 100);
***REMOVED***);

addFormatToken(0, ['SS', 2], 0, function () ***REMOVED***
    return ~~(this.millisecond() / 10);
***REMOVED***);

addFormatToken(0, ['SSS', 3], 0, 'millisecond');
addFormatToken(0, ['SSSS', 4], 0, function () ***REMOVED***
    return this.millisecond() * 10;
***REMOVED***);
addFormatToken(0, ['SSSSS', 5], 0, function () ***REMOVED***
    return this.millisecond() * 100;
***REMOVED***);
addFormatToken(0, ['SSSSSS', 6], 0, function () ***REMOVED***
    return this.millisecond() * 1000;
***REMOVED***);
addFormatToken(0, ['SSSSSSS', 7], 0, function () ***REMOVED***
    return this.millisecond() * 10000;
***REMOVED***);
addFormatToken(0, ['SSSSSSSS', 8], 0, function () ***REMOVED***
    return this.millisecond() * 100000;
***REMOVED***);
addFormatToken(0, ['SSSSSSSSS', 9], 0, function () ***REMOVED***
    return this.millisecond() * 1000000;
***REMOVED***);


// ALIASES

addUnitAlias('millisecond', 'ms');

// PRIORITY

addUnitPriority('millisecond', 16);

// PARSING

addRegexToken('S',    match1to3, match1);
addRegexToken('SS',   match1to3, match2);
addRegexToken('SSS',  match1to3, match3);

var token;
for (token = 'SSSS'; token.length <= 9; token += 'S') ***REMOVED***
    addRegexToken(token, matchUnsigned);
***REMOVED***

function parseMs(input, array) ***REMOVED***
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
***REMOVED***

for (token = 'S'; token.length <= 9; token += 'S') ***REMOVED***
    addParseToken(token, parseMs);
***REMOVED***
// MOMENTS

var getSetMillisecond = makeGetSet('Milliseconds', false);

// FORMATTING

addFormatToken('z',  0, 0, 'zoneAbbr');
addFormatToken('zz', 0, 0, 'zoneName');

// MOMENTS

function getZoneAbbr () ***REMOVED***
    return this._isUTC ? 'UTC' : '';
***REMOVED***

function getZoneName () ***REMOVED***
    return this._isUTC ? 'Coordinated Universal Time' : '';
***REMOVED***

var proto = Moment.prototype;

proto.add               = add;
proto.calendar          = calendar$1;
proto.clone             = clone;
proto.diff              = diff;
proto.endOf             = endOf;
proto.format            = format;
proto.from              = from;
proto.fromNow           = fromNow;
proto.to                = to;
proto.toNow             = toNow;
proto.get               = stringGet;
proto.invalidAt         = invalidAt;
proto.isAfter           = isAfter;
proto.isBefore          = isBefore;
proto.isBetween         = isBetween;
proto.isSame            = isSame;
proto.isSameOrAfter     = isSameOrAfter;
proto.isSameOrBefore    = isSameOrBefore;
proto.isValid           = isValid$1;
proto.lang              = lang;
proto.locale            = locale;
proto.localeData        = localeData;
proto.max               = prototypeMax;
proto.min               = prototypeMin;
proto.parsingFlags      = parsingFlags;
proto.set               = stringSet;
proto.startOf           = startOf;
proto.subtract          = subtract;
proto.toArray           = toArray;
proto.toObject          = toObject;
proto.toDate            = toDate;
proto.toISOString       = toISOString;
proto.inspect           = inspect;
proto.toJSON            = toJSON;
proto.toString          = toString;
proto.unix              = unix;
proto.valueOf           = valueOf;
proto.creationData      = creationData;

// Year
proto.year       = getSetYear;
proto.isLeapYear = getIsLeapYear;

// Week Year
proto.weekYear    = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;

// Quarter
proto.quarter = proto.quarters = getSetQuarter;

// Month
proto.month       = getSetMonth;
proto.daysInMonth = getDaysInMonth;

// Week
proto.week           = proto.weeks        = getSetWeek;
proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
proto.weeksInYear    = getWeeksInYear;
proto.isoWeeksInYear = getISOWeeksInYear;

// Day
proto.date       = getSetDayOfMonth;
proto.day        = proto.days             = getSetDayOfWeek;
proto.weekday    = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear  = getSetDayOfYear;

// Hour
proto.hour = proto.hours = getSetHour;

// Minute
proto.minute = proto.minutes = getSetMinute;

// Second
proto.second = proto.seconds = getSetSecond;

// Millisecond
proto.millisecond = proto.milliseconds = getSetMillisecond;

// Offset
proto.utcOffset            = getSetOffset;
proto.utc                  = setOffsetToUTC;
proto.local                = setOffsetToLocal;
proto.parseZone            = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST                = isDaylightSavingTime;
proto.isLocal              = isLocal;
proto.isUtcOffset          = isUtcOffset;
proto.isUtc                = isUtc;
proto.isUTC                = isUtc;

// Timezone
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;

// Deprecations
proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

function createUnix (input) ***REMOVED***
    return createLocal(input * 1000);
***REMOVED***

function createInZone () ***REMOVED***
    return createLocal.apply(null, arguments).parseZone();
***REMOVED***

function preParsePostFormat (string) ***REMOVED***
    return string;
***REMOVED***

var proto$1 = Locale.prototype;

proto$1.calendar        = calendar;
proto$1.longDateFormat  = longDateFormat;
proto$1.invalidDate     = invalidDate;
proto$1.ordinal         = ordinal;
proto$1.preparse        = preParsePostFormat;
proto$1.postformat      = preParsePostFormat;
proto$1.relativeTime    = relativeTime;
proto$1.pastFuture      = pastFuture;
proto$1.set             = set;

// Month
proto$1.months            =        localeMonths;
proto$1.monthsShort       =        localeMonthsShort;
proto$1.monthsParse       =        localeMonthsParse;
proto$1.monthsRegex       = monthsRegex;
proto$1.monthsShortRegex  = monthsShortRegex;

// Week
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;

// Day of Week
proto$1.weekdays       =        localeWeekdays;
proto$1.weekdaysMin    =        localeWeekdaysMin;
proto$1.weekdaysShort  =        localeWeekdaysShort;
proto$1.weekdaysParse  =        localeWeekdaysParse;

proto$1.weekdaysRegex       =        weekdaysRegex;
proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

// Hours
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;

function get$1 (format, index, field, setter) ***REMOVED***
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
***REMOVED***

function listMonthsImpl (format, index, field) ***REMOVED***
    if (isNumber(format)) ***REMOVED***
        index = format;
        format = undefined;
    ***REMOVED***

    format = format || '';

    if (index != null) ***REMOVED***
        return get$1(format, index, field, 'month');
    ***REMOVED***

    var i;
    var out = [];
    for (i = 0; i < 12; i++) ***REMOVED***
        out[i] = get$1(format, i, field, 'month');
    ***REMOVED***
    return out;
***REMOVED***

// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function listWeekdaysImpl (localeSorted, format, index, field) ***REMOVED***
    if (typeof localeSorted === 'boolean') ***REMOVED***
        if (isNumber(format)) ***REMOVED***
            index = format;
            format = undefined;
        ***REMOVED***

        format = format || '';
    ***REMOVED*** else ***REMOVED***
        format = localeSorted;
        index = format;
        localeSorted = false;

        if (isNumber(format)) ***REMOVED***
            index = format;
            format = undefined;
        ***REMOVED***

        format = format || '';
    ***REMOVED***

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) ***REMOVED***
        return get$1(format, (index + shift) % 7, field, 'day');
    ***REMOVED***

    var i;
    var out = [];
    for (i = 0; i < 7; i++) ***REMOVED***
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
    ***REMOVED***
    return out;
***REMOVED***

function listMonths (format, index) ***REMOVED***
    return listMonthsImpl(format, index, 'months');
***REMOVED***

function listMonthsShort (format, index) ***REMOVED***
    return listMonthsImpl(format, index, 'monthsShort');
***REMOVED***

function listWeekdays (localeSorted, format, index) ***REMOVED***
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
***REMOVED***

function listWeekdaysShort (localeSorted, format, index) ***REMOVED***
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
***REMOVED***

function listWeekdaysMin (localeSorted, format, index) ***REMOVED***
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
***REMOVED***

getSetGlobalLocale('en', ***REMOVED***
    ordinalParse: /\d***REMOVED***1,2***REMOVED***(th|st|nd|rd)/,
    ordinal : function (number) ***REMOVED***
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    ***REMOVED***
***REMOVED***);

// Side effect imports
hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

var mathAbs = Math.abs;

function abs () ***REMOVED***
    var data           = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days         = mathAbs(this._days);
    this._months       = mathAbs(this._months);

    data.milliseconds  = mathAbs(data.milliseconds);
    data.seconds       = mathAbs(data.seconds);
    data.minutes       = mathAbs(data.minutes);
    data.hours         = mathAbs(data.hours);
    data.months        = mathAbs(data.months);
    data.years         = mathAbs(data.years);

    return this;
***REMOVED***

function addSubtract$1 (duration, input, value, direction) ***REMOVED***
    var other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days         += direction * other._days;
    duration._months       += direction * other._months;

    return duration._bubble();
***REMOVED***

// supports only 2.0-style add(1, 's') or add(duration)
function add$1 (input, value) ***REMOVED***
    return addSubtract$1(this, input, value, 1);
***REMOVED***

// supports only 2.0-style subtract(1, 's') or subtract(duration)
function subtract$1 (input, value) ***REMOVED***
    return addSubtract$1(this, input, value, -1);
***REMOVED***

function absCeil (number) ***REMOVED***
    if (number < 0) ***REMOVED***
        return Math.floor(number);
    ***REMOVED*** else ***REMOVED***
        return Math.ceil(number);
    ***REMOVED***
***REMOVED***

function bubble () ***REMOVED***
    var milliseconds = this._milliseconds;
    var days         = this._days;
    var months       = this._months;
    var data         = this._data;
    var seconds, minutes, hours, years, monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) ***REMOVED***
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    ***REMOVED***

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds           = absFloor(milliseconds / 1000);
    data.seconds      = seconds % 60;

    minutes           = absFloor(seconds / 60);
    data.minutes      = minutes % 60;

    hours             = absFloor(minutes / 60);
    data.hours        = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days   = days;
    data.months = months;
    data.years  = years;

    return this;
***REMOVED***

function daysToMonths (days) ***REMOVED***
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
***REMOVED***

function monthsToDays (months) ***REMOVED***
    // the reverse of daysToMonths
    return months * 146097 / 4800;
***REMOVED***

function as (units) ***REMOVED***
    var days;
    var months;
    var milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') ***REMOVED***
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
    ***REMOVED*** else ***REMOVED***
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) ***REMOVED***
            case 'week'   : return days / 7     + milliseconds / 6048e5;
            case 'day'    : return days         + milliseconds / 864e5;
            case 'hour'   : return days * 24    + milliseconds / 36e5;
            case 'minute' : return days * 1440  + milliseconds / 6e4;
            case 'second' : return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
            default: throw new Error('Unknown unit ' + units);
        ***REMOVED***
    ***REMOVED***
***REMOVED***

// TODO: Use this.as('ms')?
function valueOf$1 () ***REMOVED***
    return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
    );
***REMOVED***

function makeAs (alias) ***REMOVED***
    return function () ***REMOVED***
        return this.as(alias);
    ***REMOVED***;
***REMOVED***

var asMilliseconds = makeAs('ms');
var asSeconds      = makeAs('s');
var asMinutes      = makeAs('m');
var asHours        = makeAs('h');
var asDays         = makeAs('d');
var asWeeks        = makeAs('w');
var asMonths       = makeAs('M');
var asYears        = makeAs('y');

function get$2 (units) ***REMOVED***
    units = normalizeUnits(units);
    return this[units + 's']();
***REMOVED***

function makeGetter(name) ***REMOVED***
    return function () ***REMOVED***
        return this._data[name];
    ***REMOVED***;
***REMOVED***

var milliseconds = makeGetter('milliseconds');
var seconds      = makeGetter('seconds');
var minutes      = makeGetter('minutes');
var hours        = makeGetter('hours');
var days         = makeGetter('days');
var months       = makeGetter('months');
var years        = makeGetter('years');

function weeks () ***REMOVED***
    return absFloor(this.days() / 7);
***REMOVED***

var round = Math.round;
var thresholds = ***REMOVED***
    s: 45,  // seconds to minute
    m: 45,  // minutes to hour
    h: 22,  // hours to day
    d: 26,  // days to month
    M: 11   // months to year
***REMOVED***;

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) ***REMOVED***
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
***REMOVED***

function relativeTime$1 (posNegDuration, withoutSuffix, locale) ***REMOVED***
    var duration = createDuration(posNegDuration).abs();
    var seconds  = round(duration.as('s'));
    var minutes  = round(duration.as('m'));
    var hours    = round(duration.as('h'));
    var days     = round(duration.as('d'));
    var months   = round(duration.as('M'));
    var years    = round(duration.as('y'));

    var a = seconds < thresholds.s && ['s', seconds]  ||
            minutes <= 1           && ['m']           ||
            minutes < thresholds.m && ['mm', minutes] ||
            hours   <= 1           && ['h']           ||
            hours   < thresholds.h && ['hh', hours]   ||
            days    <= 1           && ['d']           ||
            days    < thresholds.d && ['dd', days]    ||
            months  <= 1           && ['M']           ||
            months  < thresholds.M && ['MM', months]  ||
            years   <= 1           && ['y']           || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
***REMOVED***

// This function allows you to set the rounding function for relative time strings
function getSetRelativeTimeRounding (roundingFunction) ***REMOVED***
    if (roundingFunction === undefined) ***REMOVED***
        return round;
    ***REMOVED***
    if (typeof(roundingFunction) === 'function') ***REMOVED***
        round = roundingFunction;
        return true;
    ***REMOVED***
    return false;
***REMOVED***

// This function allows you to set a threshold for relative time strings
function getSetRelativeTimeThreshold (threshold, limit) ***REMOVED***
    if (thresholds[threshold] === undefined) ***REMOVED***
        return false;
    ***REMOVED***
    if (limit === undefined) ***REMOVED***
        return thresholds[threshold];
    ***REMOVED***
    thresholds[threshold] = limit;
    return true;
***REMOVED***

function humanize (withSuffix) ***REMOVED***
    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) ***REMOVED***
        output = locale.pastFuture(+this, output);
    ***REMOVED***

    return locale.postformat(output);
***REMOVED***

var abs$1 = Math.abs;

function toISOString$1() ***REMOVED***
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    var seconds = abs$1(this._milliseconds) / 1000;
    var days         = abs$1(this._days);
    var months       = abs$1(this._months);
    var minutes, hours, years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes           = absFloor(seconds / 60);
    hours             = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years  = absFloor(months / 12);
    months %= 12;


    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds;
    var total = this.asSeconds();

    if (!total) ***REMOVED***
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
    ***REMOVED***

    return (total < 0 ? '-' : '') +
        'P' +
        (Y ? Y + 'Y' : '') +
        (M ? M + 'M' : '') +
        (D ? D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? h + 'H' : '') +
        (m ? m + 'M' : '') +
        (s ? s + 'S' : '');
***REMOVED***

var proto$2 = Duration.prototype;

proto$2.abs            = abs;
proto$2.add            = add$1;
proto$2.subtract       = subtract$1;
proto$2.as             = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds      = asSeconds;
proto$2.asMinutes      = asMinutes;
proto$2.asHours        = asHours;
proto$2.asDays         = asDays;
proto$2.asWeeks        = asWeeks;
proto$2.asMonths       = asMonths;
proto$2.asYears        = asYears;
proto$2.valueOf        = valueOf$1;
proto$2._bubble        = bubble;
proto$2.get            = get$2;
proto$2.milliseconds   = milliseconds;
proto$2.seconds        = seconds;
proto$2.minutes        = minutes;
proto$2.hours          = hours;
proto$2.days           = days;
proto$2.weeks          = weeks;
proto$2.months         = months;
proto$2.years          = years;
proto$2.humanize       = humanize;
proto$2.toISOString    = toISOString$1;
proto$2.toString       = toISOString$1;
proto$2.toJSON         = toISOString$1;
proto$2.locale         = locale;
proto$2.localeData     = localeData;

// Deprecations
proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
proto$2.lang = lang;

// Side effect imports

// FORMATTING

addFormatToken('X', 0, 0, 'unix');
addFormatToken('x', 0, 0, 'valueOf');

// PARSING

addRegexToken('x', matchSigned);
addRegexToken('X', matchTimestamp);
addParseToken('X', function (input, array, config) ***REMOVED***
    config._d = new Date(parseFloat(input, 10) * 1000);
***REMOVED***);
addParseToken('x', function (input, array, config) ***REMOVED***
    config._d = new Date(toInt(input));
***REMOVED***);

// Side effect imports


hooks.version = '2.17.1';

setHookCallback(createLocal);

hooks.fn                    = proto;
hooks.min                   = min;
hooks.max                   = max;
hooks.now                   = now;
hooks.utc                   = createUTC;
hooks.unix                  = createUnix;
hooks.months                = listMonths;
hooks.isDate                = isDate;
hooks.locale                = getSetGlobalLocale;
hooks.invalid               = createInvalid;
hooks.duration              = createDuration;
hooks.isMoment              = isMoment;
hooks.weekdays              = listWeekdays;
hooks.parseZone             = createInZone;
hooks.localeData            = getLocale;
hooks.isDuration            = isDuration;
hooks.monthsShort           = listMonthsShort;
hooks.weekdaysMin           = listWeekdaysMin;
hooks.defineLocale          = defineLocale;
hooks.updateLocale          = updateLocale;
hooks.locales               = listLocales;
hooks.weekdaysShort         = listWeekdaysShort;
hooks.normalizeUnits        = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat        = getCalendarFormat;
hooks.prototype             = proto;

return hooks;

***REMOVED***)));
