import ***REMOVED*** hooks ***REMOVED*** from '../utils/hooks';
import ***REMOVED*** createDate, createUTCDate ***REMOVED*** from './date-from-array';
import ***REMOVED*** daysInYear ***REMOVED*** from '../units/year';
import ***REMOVED*** weekOfYear, weeksInYear, dayOfYearFromWeeks ***REMOVED*** from '../units/week-calendar-utils';
import ***REMOVED*** YEAR, MONTH, DATE, HOUR, MINUTE, SECOND, MILLISECOND ***REMOVED*** from '../units/constants';
import ***REMOVED*** createLocal ***REMOVED*** from './local';
import defaults from '../utils/defaults';
import getParsingFlags from './parsing-flags';

function currentDateArray(config) ***REMOVED***
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) ***REMOVED***
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    ***REMOVED***
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
***REMOVED***

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
export function configFromArray (config) ***REMOVED***
    var i, date, input = [], currentDate, yearToUse;

    if (config._d) ***REMOVED***
        return;
    ***REMOVED***

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) ***REMOVED***
        dayOfYearFromWeekInfo(config);
    ***REMOVED***

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear) ***REMOVED***
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse)) ***REMOVED***
            getParsingFlags(config)._overflowDayOfYear = true;
        ***REMOVED***

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    ***REMOVED***

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) ***REMOVED***
        config._a[i] = input[i] = currentDate[i];
    ***REMOVED***

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) ***REMOVED***
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    ***REMOVED***

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) ***REMOVED***
        config._nextDay = true;
        config._a[HOUR] = 0;
    ***REMOVED***

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) ***REMOVED***
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    ***REMOVED***

    if (config._nextDay) ***REMOVED***
        config._a[HOUR] = 24;
    ***REMOVED***
***REMOVED***

function dayOfYearFromWeekInfo(config) ***REMOVED***
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) ***REMOVED***
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) ***REMOVED***
            weekdayOverflow = true;
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) ***REMOVED***
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) ***REMOVED***
                weekdayOverflow = true;
            ***REMOVED***
        ***REMOVED*** else if (w.e != null) ***REMOVED***
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) ***REMOVED***
                weekdayOverflow = true;
            ***REMOVED***
        ***REMOVED*** else ***REMOVED***
            // default to begining of week
            weekday = dow;
        ***REMOVED***
    ***REMOVED***
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) ***REMOVED***
        getParsingFlags(config)._overflowWeeks = true;
    ***REMOVED*** else if (weekdayOverflow != null) ***REMOVED***
        getParsingFlags(config)._overflowWeekday = true;
    ***REMOVED*** else ***REMOVED***
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    ***REMOVED***
***REMOVED***
