import ***REMOVED*** configFromStringAndFormat ***REMOVED*** from './from-string-and-format';
import ***REMOVED*** hooks ***REMOVED*** from '../utils/hooks';
import ***REMOVED*** deprecate ***REMOVED*** from '../utils/deprecate';
import getParsingFlags from './parsing-flags';

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d***REMOVED***6***REMOVED***|\d***REMOVED***4***REMOVED***)-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d***REMOVED***6***REMOVED***|\d***REMOVED***4***REMOVED***)(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d***REMOVED***6***REMOVED***-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d***REMOVED***4***REMOVED***-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d***REMOVED***4***REMOVED***-W\d\d-\d/],
    ['GGGG-[W]WW', /\d***REMOVED***4***REMOVED***-W\d\d/, false],
    ['YYYY-DDD', /\d***REMOVED***4***REMOVED***-\d***REMOVED***3***REMOVED***/],
    ['YYYY-MM', /\d***REMOVED***4***REMOVED***-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d***REMOVED***10***REMOVED***/],
    ['YYYYMMDD', /\d***REMOVED***8***REMOVED***/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d***REMOVED***4***REMOVED***W\d***REMOVED***3***REMOVED***/],
    ['GGGG[W]WW', /\d***REMOVED***4***REMOVED***W\d***REMOVED***2***REMOVED***/, false],
    ['YYYYDDD', /\d***REMOVED***7***REMOVED***/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
export function configFromISO(config) ***REMOVED***
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) ***REMOVED***
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) ***REMOVED***
            if (isoDates[i][1].exec(match[1])) ***REMOVED***
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            ***REMOVED***
        ***REMOVED***
        if (dateFormat == null) ***REMOVED***
            config._isValid = false;
            return;
        ***REMOVED***
        if (match[3]) ***REMOVED***
            for (i = 0, l = isoTimes.length; i < l; i++) ***REMOVED***
                if (isoTimes[i][1].exec(match[3])) ***REMOVED***
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                ***REMOVED***
            ***REMOVED***
            if (timeFormat == null) ***REMOVED***
                config._isValid = false;
                return;
            ***REMOVED***
        ***REMOVED***
        if (!allowTime && timeFormat != null) ***REMOVED***
            config._isValid = false;
            return;
        ***REMOVED***
        if (match[4]) ***REMOVED***
            if (tzRegex.exec(match[4])) ***REMOVED***
                tzFormat = 'Z';
            ***REMOVED*** else ***REMOVED***
                config._isValid = false;
                return;
            ***REMOVED***
        ***REMOVED***
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    ***REMOVED*** else ***REMOVED***
        config._isValid = false;
    ***REMOVED***
***REMOVED***

// date from iso format or fallback
export function configFromString(config) ***REMOVED***
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) ***REMOVED***
        config._d = new Date(+matched[1]);
        return;
    ***REMOVED***

    configFromISO(config);
    if (config._isValid === false) ***REMOVED***
        delete config._isValid;
        hooks.createFromInputFallback(config);
    ***REMOVED***
***REMOVED***

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) ***REMOVED***
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    ***REMOVED***
);
