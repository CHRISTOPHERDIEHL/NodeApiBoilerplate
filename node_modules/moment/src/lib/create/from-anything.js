import isArray from '../utils/is-array';
import isObject from '../utils/is-object';
import isObjectEmpty from '../utils/is-object-empty';
import isNumber from '../utils/is-number';
import isDate from '../utils/is-date';
import map from '../utils/map';
import ***REMOVED*** createInvalid ***REMOVED*** from './valid';
import ***REMOVED*** Moment, isMoment ***REMOVED*** from '../moment/constructor';
import ***REMOVED*** getLocale ***REMOVED*** from '../locale/locales';
import ***REMOVED*** hooks ***REMOVED*** from '../utils/hooks';
import checkOverflow from './check-overflow';
import ***REMOVED*** isValid ***REMOVED*** from './valid';

import ***REMOVED*** configFromStringAndArray ***REMOVED***  from './from-string-and-array';
import ***REMOVED*** configFromStringAndFormat ***REMOVED*** from './from-string-and-format';
import ***REMOVED*** configFromString ***REMOVED***          from './from-string';
import ***REMOVED*** configFromArray ***REMOVED***           from './from-array';
import ***REMOVED*** configFromObject ***REMOVED***          from './from-object';

function createFromConfig (config) ***REMOVED***
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) ***REMOVED***
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    ***REMOVED***

    return res;
***REMOVED***

export function prepareConfig (config) ***REMOVED***
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) ***REMOVED***
        return createInvalid(***REMOVED***nullInput: true***REMOVED***);
    ***REMOVED***

    if (typeof input === 'string') ***REMOVED***
        config._i = input = config._locale.preparse(input);
    ***REMOVED***

    if (isMoment(input)) ***REMOVED***
        return new Moment(checkOverflow(input));
    ***REMOVED*** else if (isDate(input)) ***REMOVED***
        config._d = input;
    ***REMOVED*** else if (isArray(format)) ***REMOVED***
        configFromStringAndArray(config);
    ***REMOVED*** else if (format) ***REMOVED***
        configFromStringAndFormat(config);
    ***REMOVED***  else ***REMOVED***
        configFromInput(config);
    ***REMOVED***

    if (!isValid(config)) ***REMOVED***
        config._d = null;
    ***REMOVED***

    return config;
***REMOVED***

function configFromInput(config) ***REMOVED***
    var input = config._i;
    if (input === undefined) ***REMOVED***
        config._d = new Date(hooks.now());
    ***REMOVED*** else if (isDate(input)) ***REMOVED***
        config._d = new Date(input.valueOf());
    ***REMOVED*** else if (typeof input === 'string') ***REMOVED***
        configFromString(config);
    ***REMOVED*** else if (isArray(input)) ***REMOVED***
        config._a = map(input.slice(0), function (obj) ***REMOVED***
            return parseInt(obj, 10);
        ***REMOVED***);
        configFromArray(config);
    ***REMOVED*** else if (typeof(input) === 'object') ***REMOVED***
        configFromObject(config);
    ***REMOVED*** else if (isNumber(input)) ***REMOVED***
        // from milliseconds
        config._d = new Date(input);
    ***REMOVED*** else ***REMOVED***
        hooks.createFromInputFallback(config);
    ***REMOVED***
***REMOVED***

export function createLocalOrUTC (input, format, locale, strict, isUTC) ***REMOVED***
    var c = ***REMOVED******REMOVED***;

    if (locale === true || locale === false) ***REMOVED***
        strict = locale;
        locale = undefined;
    ***REMOVED***

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) ***REMOVED***
        input = undefined;
    ***REMOVED***
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
***REMOVED***
