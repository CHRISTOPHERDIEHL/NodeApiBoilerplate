import extend from './extend';
import ***REMOVED*** hooks ***REMOVED*** from './hooks';
import isUndefined from './is-undefined';

function warn(msg) ***REMOVED***
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) ***REMOVED***
        console.warn('Deprecation warning: ' + msg);
    ***REMOVED***
***REMOVED***

export function deprecate(msg, fn) ***REMOVED***
    var firstTime = true;

    return extend(function () ***REMOVED***
        if (hooks.deprecationHandler != null) ***REMOVED***
            hooks.deprecationHandler(null, msg);
        ***REMOVED***
        if (firstTime) ***REMOVED***
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) ***REMOVED***
                arg = '';
                if (typeof arguments[i] === 'object') ***REMOVED***
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) ***REMOVED***
                        arg += key + ': ' + arguments[0][key] + ', ';
                    ***REMOVED***
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                ***REMOVED*** else ***REMOVED***
                    arg = arguments[i];
                ***REMOVED***
                args.push(arg);
            ***REMOVED***
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        ***REMOVED***
        return fn.apply(this, arguments);
    ***REMOVED***, fn);
***REMOVED***

var deprecations = ***REMOVED******REMOVED***;

export function deprecateSimple(name, msg) ***REMOVED***
    if (hooks.deprecationHandler != null) ***REMOVED***
        hooks.deprecationHandler(name, msg);
    ***REMOVED***
    if (!deprecations[name]) ***REMOVED***
        warn(msg);
        deprecations[name] = true;
    ***REMOVED***
***REMOVED***

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;
