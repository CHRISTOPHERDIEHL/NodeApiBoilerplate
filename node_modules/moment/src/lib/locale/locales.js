import isArray from '../utils/is-array';
import hasOwnProp from '../utils/has-own-prop';
import isUndefined from '../utils/is-undefined';
import compareArrays from '../utils/compare-arrays';
import ***REMOVED*** deprecateSimple ***REMOVED*** from '../utils/deprecate';
import ***REMOVED*** mergeConfigs ***REMOVED*** from './set';
import ***REMOVED*** Locale ***REMOVED*** from './constructor';
import keys from '../utils/keys';

import ***REMOVED*** baseConfig ***REMOVED*** from './base-config';

// internal storage for locale config files
var locales = ***REMOVED******REMOVED***;
var localeFamilies = ***REMOVED******REMOVED***;
var globalLocale;

function normalizeLocale(key) ***REMOVED***
    return key ? key.toLowerCase().replace('_', '-') : key;
***REMOVED***

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) ***REMOVED***
    var i = 0, j, next, locale, split;

    while (i < names.length) ***REMOVED***
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) ***REMOVED***
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) ***REMOVED***
                return locale;
            ***REMOVED***
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) ***REMOVED***
                //the next array item is better than a shallower substring of this one
                break;
            ***REMOVED***
            j--;
        ***REMOVED***
        i++;
    ***REMOVED***
    return null;
***REMOVED***

function loadLocale(name) ***REMOVED***
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) ***REMOVED***
        try ***REMOVED***
            oldLocale = globalLocale._abbr;
            require('./locale/' + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale);
        ***REMOVED*** catch (e) ***REMOVED*** ***REMOVED***
    ***REMOVED***
    return locales[name];
***REMOVED***

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
export function getSetGlobalLocale (key, values) ***REMOVED***
    var data;
    if (key) ***REMOVED***
        if (isUndefined(values)) ***REMOVED***
            data = getLocale(key);
        ***REMOVED***
        else ***REMOVED***
            data = defineLocale(key, values);
        ***REMOVED***

        if (data) ***REMOVED***
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        ***REMOVED***
    ***REMOVED***

    return globalLocale._abbr;
***REMOVED***

export function defineLocale (name, config) ***REMOVED***
    if (config !== null) ***REMOVED***
        var parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) ***REMOVED***
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        ***REMOVED*** else if (config.parentLocale != null) ***REMOVED***
            if (locales[config.parentLocale] != null) ***REMOVED***
                parentConfig = locales[config.parentLocale]._config;
            ***REMOVED*** else ***REMOVED***
                if (!localeFamilies[config.parentLocale]) ***REMOVED***
                    localeFamilies[config.parentLocale] = [];
                ***REMOVED***
                localeFamilies[config.parentLocale].push(***REMOVED***
                    name: name,
                    config: config
                ***REMOVED***);
                return null;
            ***REMOVED***
        ***REMOVED***
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) ***REMOVED***
            localeFamilies[name].forEach(function (x) ***REMOVED***
                defineLocale(x.name, x.config);
            ***REMOVED***);
        ***REMOVED***

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    ***REMOVED*** else ***REMOVED***
        // useful for testing
        delete locales[name];
        return null;
    ***REMOVED***
***REMOVED***

export function updateLocale(name, config) ***REMOVED***
    if (config != null) ***REMOVED***
        var locale, parentConfig = baseConfig;
        // MERGE
        if (locales[name] != null) ***REMOVED***
            parentConfig = locales[name]._config;
        ***REMOVED***
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    ***REMOVED*** else ***REMOVED***
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) ***REMOVED***
            if (locales[name].parentLocale != null) ***REMOVED***
                locales[name] = locales[name].parentLocale;
            ***REMOVED*** else if (locales[name] != null) ***REMOVED***
                delete locales[name];
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    return locales[name];
***REMOVED***

// returns locale data
export function getLocale (key) ***REMOVED***
    var locale;

    if (key && key._locale && key._locale._abbr) ***REMOVED***
        key = key._locale._abbr;
    ***REMOVED***

    if (!key) ***REMOVED***
        return globalLocale;
    ***REMOVED***

    if (!isArray(key)) ***REMOVED***
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) ***REMOVED***
            return locale;
        ***REMOVED***
        key = [key];
    ***REMOVED***

    return chooseLocale(key);
***REMOVED***

export function listLocales() ***REMOVED***
    return keys(locales);
***REMOVED***
