import isFunction from '../utils/is-function';
import extend from '../utils/extend';
import isObject from '../utils/is-object';
import hasOwnProp from '../utils/has-own-prop';

export function set (config) ***REMOVED***
    var prop, i;
    for (i in config) ***REMOVED***
        prop = config[i];
        if (isFunction(prop)) ***REMOVED***
            this[i] = prop;
        ***REMOVED*** else ***REMOVED***
            this['_' + i] = prop;
        ***REMOVED***
    ***REMOVED***
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _ordinalParseLenient.
    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d***REMOVED***1,2***REMOVED***/).source);
***REMOVED***

export function mergeConfigs(parentConfig, childConfig) ***REMOVED***
    var res = extend(***REMOVED******REMOVED***, parentConfig), prop;
    for (prop in childConfig) ***REMOVED***
        if (hasOwnProp(childConfig, prop)) ***REMOVED***
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) ***REMOVED***
                res[prop] = ***REMOVED******REMOVED***;
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            ***REMOVED*** else if (childConfig[prop] != null) ***REMOVED***
                res[prop] = childConfig[prop];
            ***REMOVED*** else ***REMOVED***
                delete res[prop];
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    for (prop in parentConfig) ***REMOVED***
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) ***REMOVED***
            // make sure changes to properties don't modify parent config
            res[prop] = extend(***REMOVED******REMOVED***, res[prop]);
        ***REMOVED***
    ***REMOVED***
    return res;
***REMOVED***
