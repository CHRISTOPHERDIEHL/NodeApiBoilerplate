import ***REMOVED*** isMoment ***REMOVED*** from './constructor';
import ***REMOVED*** normalizeUnits ***REMOVED*** from '../units/aliases';
import ***REMOVED*** createLocal ***REMOVED*** from '../create/local';
import isUndefined from '../utils/is-undefined';

export function isAfter (input, units) ***REMOVED***
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) ***REMOVED***
        return false;
    ***REMOVED***
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') ***REMOVED***
        return this.valueOf() > localInput.valueOf();
    ***REMOVED*** else ***REMOVED***
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    ***REMOVED***
***REMOVED***

export function isBefore (input, units) ***REMOVED***
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) ***REMOVED***
        return false;
    ***REMOVED***
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') ***REMOVED***
        return this.valueOf() < localInput.valueOf();
    ***REMOVED*** else ***REMOVED***
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    ***REMOVED***
***REMOVED***

export function isBetween (from, to, units, inclusivity) ***REMOVED***
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
***REMOVED***

export function isSame (input, units) ***REMOVED***
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) ***REMOVED***
        return false;
    ***REMOVED***
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') ***REMOVED***
        return this.valueOf() === localInput.valueOf();
    ***REMOVED*** else ***REMOVED***
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    ***REMOVED***
***REMOVED***

export function isSameOrAfter (input, units) ***REMOVED***
    return this.isSame(input, units) || this.isAfter(input,units);
***REMOVED***

export function isSameOrBefore (input, units) ***REMOVED***
    return this.isSame(input, units) || this.isBefore(input,units);
***REMOVED***
