import ***REMOVED*** normalizeUnits, normalizeObjectUnits ***REMOVED*** from '../units/aliases';
import ***REMOVED*** getPrioritizedUnits ***REMOVED*** from '../units/priorities';
import ***REMOVED*** hooks ***REMOVED*** from '../utils/hooks';
import isFunction from '../utils/is-function';


export function makeGetSet (unit, keepTime) ***REMOVED***
    return function (value) ***REMOVED***
        if (value != null) ***REMOVED***
            set(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        ***REMOVED*** else ***REMOVED***
            return get(this, unit);
        ***REMOVED***
    ***REMOVED***;
***REMOVED***

export function get (mom, unit) ***REMOVED***
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
***REMOVED***

export function set (mom, unit, value) ***REMOVED***
    if (mom.isValid()) ***REMOVED***
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    ***REMOVED***
***REMOVED***

// MOMENTS

export function stringGet (units) ***REMOVED***
    units = normalizeUnits(units);
    if (isFunction(this[units])) ***REMOVED***
        return this[units]();
    ***REMOVED***
    return this;
***REMOVED***


export function stringSet (units, value) ***REMOVED***
    if (typeof units === 'object') ***REMOVED***
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) ***REMOVED***
            this[prioritized[i].unit](units[prioritized[i].unit]);
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        units = normalizeUnits(units);
        if (isFunction(this[units])) ***REMOVED***
            return this[units](value);
        ***REMOVED***
    ***REMOVED***
    return this;
***REMOVED***
