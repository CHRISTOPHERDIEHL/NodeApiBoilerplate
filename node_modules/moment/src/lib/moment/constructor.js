import ***REMOVED*** hooks ***REMOVED*** from '../utils/hooks';
import hasOwnProp from '../utils/has-own-prop';
import isUndefined from '../utils/is-undefined';
import getParsingFlags from '../create/parsing-flags';

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

export function copyConfig(to, from) ***REMOVED***
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) ***REMOVED***
        to._isAMomentObject = from._isAMomentObject;
    ***REMOVED***
    if (!isUndefined(from._i)) ***REMOVED***
        to._i = from._i;
    ***REMOVED***
    if (!isUndefined(from._f)) ***REMOVED***
        to._f = from._f;
    ***REMOVED***
    if (!isUndefined(from._l)) ***REMOVED***
        to._l = from._l;
    ***REMOVED***
    if (!isUndefined(from._strict)) ***REMOVED***
        to._strict = from._strict;
    ***REMOVED***
    if (!isUndefined(from._tzm)) ***REMOVED***
        to._tzm = from._tzm;
    ***REMOVED***
    if (!isUndefined(from._isUTC)) ***REMOVED***
        to._isUTC = from._isUTC;
    ***REMOVED***
    if (!isUndefined(from._offset)) ***REMOVED***
        to._offset = from._offset;
    ***REMOVED***
    if (!isUndefined(from._pf)) ***REMOVED***
        to._pf = getParsingFlags(from);
    ***REMOVED***
    if (!isUndefined(from._locale)) ***REMOVED***
        to._locale = from._locale;
    ***REMOVED***

    if (momentProperties.length > 0) ***REMOVED***
        for (i in momentProperties) ***REMOVED***
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) ***REMOVED***
                to[prop] = val;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***

    return to;
***REMOVED***

var updateInProgress = false;

// Moment prototype object
export function Moment(config) ***REMOVED***
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) ***REMOVED***
        this._d = new Date(NaN);
    ***REMOVED***
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) ***REMOVED***
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    ***REMOVED***
***REMOVED***

export function isMoment (obj) ***REMOVED***
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
***REMOVED***
