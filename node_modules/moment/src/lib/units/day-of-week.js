import ***REMOVED*** addFormatToken ***REMOVED*** from '../format/format';
import ***REMOVED*** addUnitAlias ***REMOVED*** from './aliases';
import ***REMOVED*** addUnitPriority ***REMOVED*** from './priorities';
import ***REMOVED*** addRegexToken, match1to2, matchWord, regexEscape ***REMOVED*** from '../parse/regex';
import ***REMOVED*** addWeekParseToken ***REMOVED*** from '../parse/token';
import toInt from '../utils/to-int';
import isArray from '../utils/is-array';
import indexOf from '../utils/index-of';
import hasOwnProp from '../utils/has-own-prop';
import ***REMOVED*** createUTC ***REMOVED*** from '../create/utc';
import getParsingFlags from '../create/parsing-flags';

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) ***REMOVED***
    return this.localeData().weekdaysMin(this, format);
***REMOVED***);

addFormatToken('ddd', 0, 0, function (format) ***REMOVED***
    return this.localeData().weekdaysShort(this, format);
***REMOVED***);

addFormatToken('dddd', 0, 0, function (format) ***REMOVED***
    return this.localeData().weekdays(this, format);
***REMOVED***);

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) ***REMOVED***
    return locale.weekdaysMinRegex(isStrict);
***REMOVED***);
addRegexToken('ddd',   function (isStrict, locale) ***REMOVED***
    return locale.weekdaysShortRegex(isStrict);
***REMOVED***);
addRegexToken('dddd',   function (isStrict, locale) ***REMOVED***
    return locale.weekdaysRegex(isStrict);
***REMOVED***);

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) ***REMOVED***
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) ***REMOVED***
        week.d = weekday;
    ***REMOVED*** else ***REMOVED***
        getParsingFlags(config).invalidWeekday = input;
    ***REMOVED***
***REMOVED***);

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) ***REMOVED***
    week[token] = toInt(input);
***REMOVED***);

// HELPERS

function parseWeekday(input, locale) ***REMOVED***
    if (typeof input !== 'string') ***REMOVED***
        return input;
    ***REMOVED***

    if (!isNaN(input)) ***REMOVED***
        return parseInt(input, 10);
    ***REMOVED***

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') ***REMOVED***
        return input;
    ***REMOVED***

    return null;
***REMOVED***

function parseIsoWeekday(input, locale) ***REMOVED***
    if (typeof input === 'string') ***REMOVED***
        return locale.weekdaysParse(input) % 7 || 7;
    ***REMOVED***
    return isNaN(input) ? null : input;
***REMOVED***

// LOCALES

export var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
export function localeWeekdays (m, format) ***REMOVED***
    if (!m) ***REMOVED***
        return this._weekdays;
    ***REMOVED***
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
***REMOVED***

export var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
export function localeWeekdaysShort (m) ***REMOVED***
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
***REMOVED***

export var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
export function localeWeekdaysMin (m) ***REMOVED***
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
***REMOVED***

function handleStrictParse(weekdayName, format, strict) ***REMOVED***
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) ***REMOVED***
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) ***REMOVED***
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        ***REMOVED***
    ***REMOVED***

    if (strict) ***REMOVED***
        if (format === 'dddd') ***REMOVED***
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED*** else if (format === 'ddd') ***REMOVED***
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED*** else ***REMOVED***
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        if (format === 'dddd') ***REMOVED***
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) ***REMOVED***
                return ii;
            ***REMOVED***
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) ***REMOVED***
                return ii;
            ***REMOVED***
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED*** else if (format === 'ddd') ***REMOVED***
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) ***REMOVED***
                return ii;
            ***REMOVED***
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) ***REMOVED***
                return ii;
            ***REMOVED***
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED*** else ***REMOVED***
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) ***REMOVED***
                return ii;
            ***REMOVED***
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) ***REMOVED***
                return ii;
            ***REMOVED***
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        ***REMOVED***
    ***REMOVED***
***REMOVED***

export function localeWeekdaysParse (weekdayName, format, strict) ***REMOVED***
    var i, mom, regex;

    if (this._weekdaysParseExact) ***REMOVED***
        return handleStrictParse.call(this, weekdayName, format, strict);
    ***REMOVED***

    if (!this._weekdaysParse) ***REMOVED***
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    ***REMOVED***

    for (i = 0; i < 7; i++) ***REMOVED***
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) ***REMOVED***
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        ***REMOVED***
        if (!this._weekdaysParse[i]) ***REMOVED***
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        ***REMOVED***
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) ***REMOVED***
            return i;
        ***REMOVED*** else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) ***REMOVED***
            return i;
        ***REMOVED*** else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) ***REMOVED***
            return i;
        ***REMOVED*** else if (!strict && this._weekdaysParse[i].test(weekdayName)) ***REMOVED***
            return i;
        ***REMOVED***
    ***REMOVED***
***REMOVED***

// MOMENTS

export function getSetDayOfWeek (input) ***REMOVED***
    if (!this.isValid()) ***REMOVED***
        return input != null ? this : NaN;
    ***REMOVED***
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) ***REMOVED***
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    ***REMOVED*** else ***REMOVED***
        return day;
    ***REMOVED***
***REMOVED***

export function getSetLocaleDayOfWeek (input) ***REMOVED***
    if (!this.isValid()) ***REMOVED***
        return input != null ? this : NaN;
    ***REMOVED***
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
***REMOVED***

export function getSetISODayOfWeek (input) ***REMOVED***
    if (!this.isValid()) ***REMOVED***
        return input != null ? this : NaN;
    ***REMOVED***

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) ***REMOVED***
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    ***REMOVED*** else ***REMOVED***
        return this.day() || 7;
    ***REMOVED***
***REMOVED***

var defaultWeekdaysRegex = matchWord;
export function weekdaysRegex (isStrict) ***REMOVED***
    if (this._weekdaysParseExact) ***REMOVED***
        if (!hasOwnProp(this, '_weekdaysRegex')) ***REMOVED***
            computeWeekdaysParse.call(this);
        ***REMOVED***
        if (isStrict) ***REMOVED***
            return this._weekdaysStrictRegex;
        ***REMOVED*** else ***REMOVED***
            return this._weekdaysRegex;
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        if (!hasOwnProp(this, '_weekdaysRegex')) ***REMOVED***
            this._weekdaysRegex = defaultWeekdaysRegex;
        ***REMOVED***
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    ***REMOVED***
***REMOVED***

var defaultWeekdaysShortRegex = matchWord;
export function weekdaysShortRegex (isStrict) ***REMOVED***
    if (this._weekdaysParseExact) ***REMOVED***
        if (!hasOwnProp(this, '_weekdaysRegex')) ***REMOVED***
            computeWeekdaysParse.call(this);
        ***REMOVED***
        if (isStrict) ***REMOVED***
            return this._weekdaysShortStrictRegex;
        ***REMOVED*** else ***REMOVED***
            return this._weekdaysShortRegex;
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        if (!hasOwnProp(this, '_weekdaysShortRegex')) ***REMOVED***
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        ***REMOVED***
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    ***REMOVED***
***REMOVED***

var defaultWeekdaysMinRegex = matchWord;
export function weekdaysMinRegex (isStrict) ***REMOVED***
    if (this._weekdaysParseExact) ***REMOVED***
        if (!hasOwnProp(this, '_weekdaysRegex')) ***REMOVED***
            computeWeekdaysParse.call(this);
        ***REMOVED***
        if (isStrict) ***REMOVED***
            return this._weekdaysMinStrictRegex;
        ***REMOVED*** else ***REMOVED***
            return this._weekdaysMinRegex;
        ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        if (!hasOwnProp(this, '_weekdaysMinRegex')) ***REMOVED***
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        ***REMOVED***
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    ***REMOVED***
***REMOVED***


function computeWeekdaysParse () ***REMOVED***
    function cmpLenRev(a, b) ***REMOVED***
        return b.length - a.length;
    ***REMOVED***

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) ***REMOVED***
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    ***REMOVED***
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) ***REMOVED***
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    ***REMOVED***

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
***REMOVED***
