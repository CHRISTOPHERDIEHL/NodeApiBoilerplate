import zeroFill from '../utils/zero-fill';
import ***REMOVED*** createDuration ***REMOVED*** from '../duration/create';
import ***REMOVED*** addSubtract ***REMOVED*** from '../moment/add-subtract';
import ***REMOVED*** isMoment, copyConfig ***REMOVED*** from '../moment/constructor';
import ***REMOVED*** addFormatToken ***REMOVED*** from '../format/format';
import ***REMOVED*** addRegexToken, matchOffset, matchShortOffset ***REMOVED*** from '../parse/regex';
import ***REMOVED*** addParseToken ***REMOVED*** from '../parse/token';
import ***REMOVED*** createLocal ***REMOVED*** from '../create/local';
import ***REMOVED*** prepareConfig ***REMOVED*** from '../create/from-anything';
import ***REMOVED*** createUTC ***REMOVED*** from '../create/utc';
import isDate from '../utils/is-date';
import toInt from '../utils/to-int';
import isUndefined from '../utils/is-undefined';
import compareArrays from '../utils/compare-arrays';
import ***REMOVED*** hooks ***REMOVED*** from '../utils/hooks';

// FORMATTING

function offset (token, separator) ***REMOVED***
    addFormatToken(token, 0, 0, function () ***REMOVED***
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) ***REMOVED***
            offset = -offset;
            sign = '-';
        ***REMOVED***
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    ***REMOVED***);
***REMOVED***

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) ***REMOVED***
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
***REMOVED***);

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) ***REMOVED***
    var matches = (string || '').match(matcher);

    if (matches === null) ***REMOVED***
        return null;
    ***REMOVED***

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
***REMOVED***

// Return a moment from input, that is local/utc/zone equivalent to model.
export function cloneWithOffset(input, model) ***REMOVED***
    var res, diff;
    if (model._isUTC) ***REMOVED***
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    ***REMOVED*** else ***REMOVED***
        return createLocal(input).local();
    ***REMOVED***
***REMOVED***

function getDateOffset (m) ***REMOVED***
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
***REMOVED***

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () ***REMOVED******REMOVED***;

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
export function getSetOffset (input, keepLocalTime) ***REMOVED***
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) ***REMOVED***
        return input != null ? this : NaN;
    ***REMOVED***
    if (input != null) ***REMOVED***
        if (typeof input === 'string') ***REMOVED***
            input = offsetFromString(matchShortOffset, input);
            if (input === null) ***REMOVED***
                return this;
            ***REMOVED***
        ***REMOVED*** else if (Math.abs(input) < 16) ***REMOVED***
            input = input * 60;
        ***REMOVED***
        if (!this._isUTC && keepLocalTime) ***REMOVED***
            localAdjust = getDateOffset(this);
        ***REMOVED***
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) ***REMOVED***
            this.add(localAdjust, 'm');
        ***REMOVED***
        if (offset !== input) ***REMOVED***
            if (!keepLocalTime || this._changeInProgress) ***REMOVED***
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            ***REMOVED*** else if (!this._changeInProgress) ***REMOVED***
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            ***REMOVED***
        ***REMOVED***
        return this;
    ***REMOVED*** else ***REMOVED***
        return this._isUTC ? offset : getDateOffset(this);
    ***REMOVED***
***REMOVED***

export function getSetZone (input, keepLocalTime) ***REMOVED***
    if (input != null) ***REMOVED***
        if (typeof input !== 'string') ***REMOVED***
            input = -input;
        ***REMOVED***

        this.utcOffset(input, keepLocalTime);

        return this;
    ***REMOVED*** else ***REMOVED***
        return -this.utcOffset();
    ***REMOVED***
***REMOVED***

export function setOffsetToUTC (keepLocalTime) ***REMOVED***
    return this.utcOffset(0, keepLocalTime);
***REMOVED***

export function setOffsetToLocal (keepLocalTime) ***REMOVED***
    if (this._isUTC) ***REMOVED***
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) ***REMOVED***
            this.subtract(getDateOffset(this), 'm');
        ***REMOVED***
    ***REMOVED***
    return this;
***REMOVED***

export function setOffsetToParsedOffset () ***REMOVED***
    if (this._tzm != null) ***REMOVED***
        this.utcOffset(this._tzm);
    ***REMOVED*** else if (typeof this._i === 'string') ***REMOVED***
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) ***REMOVED***
            this.utcOffset(tZone);
        ***REMOVED***
        else ***REMOVED***
            this.utcOffset(0, true);
        ***REMOVED***
    ***REMOVED***
    return this;
***REMOVED***

export function hasAlignedHourOffset (input) ***REMOVED***
    if (!this.isValid()) ***REMOVED***
        return false;
    ***REMOVED***
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
***REMOVED***

export function isDaylightSavingTime () ***REMOVED***
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
***REMOVED***

export function isDaylightSavingTimeShifted () ***REMOVED***
    if (!isUndefined(this._isDSTShifted)) ***REMOVED***
        return this._isDSTShifted;
    ***REMOVED***

    var c = ***REMOVED******REMOVED***;

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) ***REMOVED***
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    ***REMOVED*** else ***REMOVED***
        this._isDSTShifted = false;
    ***REMOVED***

    return this._isDSTShifted;
***REMOVED***

export function isLocal () ***REMOVED***
    return this.isValid() ? !this._isUTC : false;
***REMOVED***

export function isUtcOffset () ***REMOVED***
    return this.isValid() ? this._isUTC : false;
***REMOVED***

export function isUtc () ***REMOVED***
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
***REMOVED***
