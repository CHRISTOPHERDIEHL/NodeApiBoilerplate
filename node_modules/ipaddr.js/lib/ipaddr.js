(function() ***REMOVED***
  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root;

  ipaddr = ***REMOVED******REMOVED***;

  root = this;

  if ((typeof module !== "undefined" && module !== null) && module.exports) ***REMOVED***
    module.exports = ipaddr;
  ***REMOVED*** else ***REMOVED***
    root['ipaddr'] = ipaddr;
  ***REMOVED***

  matchCIDR = function(first, second, partSize, cidrBits) ***REMOVED***
    var part, shift;
    if (first.length !== second.length) ***REMOVED***
      throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
    ***REMOVED***
    part = 0;
    while (cidrBits > 0) ***REMOVED***
      shift = partSize - cidrBits;
      if (shift < 0) ***REMOVED***
        shift = 0;
      ***REMOVED***
      if (first[part] >> shift !== second[part] >> shift) ***REMOVED***
        return false;
      ***REMOVED***
      cidrBits -= partSize;
      part += 1;
    ***REMOVED***
    return true;
  ***REMOVED***;

  ipaddr.subnetMatch = function(address, rangeList, defaultName) ***REMOVED***
    var rangeName, rangeSubnets, subnet, _i, _len;
    if (defaultName == null) ***REMOVED***
      defaultName = 'unicast';
    ***REMOVED***
    for (rangeName in rangeList) ***REMOVED***
      rangeSubnets = rangeList[rangeName];
      if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) ***REMOVED***
        rangeSubnets = [rangeSubnets];
      ***REMOVED***
      for (_i = 0, _len = rangeSubnets.length; _i < _len; _i++) ***REMOVED***
        subnet = rangeSubnets[_i];
        if (address.match.apply(address, subnet)) ***REMOVED***
          return rangeName;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
    return defaultName;
  ***REMOVED***;

  ipaddr.IPv4 = (function() ***REMOVED***
    function IPv4(octets) ***REMOVED***
      var octet, _i, _len;
      if (octets.length !== 4) ***REMOVED***
        throw new Error("ipaddr: ipv4 octet count should be 4");
      ***REMOVED***
      for (_i = 0, _len = octets.length; _i < _len; _i++) ***REMOVED***
        octet = octets[_i];
        if (!((0 <= octet && octet <= 255))) ***REMOVED***
          throw new Error("ipaddr: ipv4 octet should fit in 8 bits");
        ***REMOVED***
      ***REMOVED***
      this.octets = octets;
    ***REMOVED***

    IPv4.prototype.kind = function() ***REMOVED***
      return 'ipv4';
    ***REMOVED***;

    IPv4.prototype.toString = function() ***REMOVED***
      return this.octets.join(".");
    ***REMOVED***;

    IPv4.prototype.toByteArray = function() ***REMOVED***
      return this.octets.slice(0);
    ***REMOVED***;

    IPv4.prototype.match = function(other, cidrRange) ***REMOVED***
      var _ref;
      if (cidrRange === void 0) ***REMOVED***
        _ref = other, other = _ref[0], cidrRange = _ref[1];
      ***REMOVED***
      if (other.kind() !== 'ipv4') ***REMOVED***
        throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
      ***REMOVED***
      return matchCIDR(this.octets, other.octets, 8, cidrRange);
    ***REMOVED***;

    IPv4.prototype.SpecialRanges = ***REMOVED***
      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
      multicast: [[new IPv4([224, 0, 0, 0]), 4]],
      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
      loopback: [[new IPv4([127, 0, 0, 0]), 8]],
      "private": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
    ***REMOVED***;

    IPv4.prototype.range = function() ***REMOVED***
      return ipaddr.subnetMatch(this, this.SpecialRanges);
    ***REMOVED***;

    IPv4.prototype.toIPv4MappedAddress = function() ***REMOVED***
      return ipaddr.IPv6.parse("::ffff:" + (this.toString()));
    ***REMOVED***;

    IPv4.prototype.prefixLengthFromSubnetMask = function() ***REMOVED***
      var cidr, i, octet, stop, zeros, zerotable, _i;
      zerotable = ***REMOVED***
        0: 8,
        128: 7,
        192: 6,
        224: 5,
        240: 4,
        248: 3,
        252: 2,
        254: 1,
        255: 0
      ***REMOVED***;
      cidr = 0;
      stop = false;
      for (i = _i = 3; _i >= 0; i = _i += -1) ***REMOVED***
        octet = this.octets[i];
        if (octet in zerotable) ***REMOVED***
          zeros = zerotable[octet];
          if (stop && zeros !== 0) ***REMOVED***
            return null;
          ***REMOVED***
          if (zeros !== 8) ***REMOVED***
            stop = true;
          ***REMOVED***
          cidr += zeros;
        ***REMOVED*** else ***REMOVED***
          return null;
        ***REMOVED***
      ***REMOVED***
      return 32 - cidr;
    ***REMOVED***;

    return IPv4;

  ***REMOVED***)();

  ipv4Part = "(0?\\d+|0x[a-f0-9]+)";

  ipv4Regexes = ***REMOVED***
    fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", 'i'),
    longValue: new RegExp("^" + ipv4Part + "$", 'i')
  ***REMOVED***;

  ipaddr.IPv4.parser = function(string) ***REMOVED***
    var match, parseIntAuto, part, shift, value;
    parseIntAuto = function(string) ***REMOVED***
      if (string[0] === "0" && string[1] !== "x") ***REMOVED***
        return parseInt(string, 8);
      ***REMOVED*** else ***REMOVED***
        return parseInt(string);
      ***REMOVED***
    ***REMOVED***;
    if (match = string.match(ipv4Regexes.fourOctet)) ***REMOVED***
      return (function() ***REMOVED***
        var _i, _len, _ref, _results;
        _ref = match.slice(1, 6);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) ***REMOVED***
          part = _ref[_i];
          _results.push(parseIntAuto(part));
        ***REMOVED***
        return _results;
      ***REMOVED***)();
    ***REMOVED*** else if (match = string.match(ipv4Regexes.longValue)) ***REMOVED***
      value = parseIntAuto(match[1]);
      if (value > 0xffffffff || value < 0) ***REMOVED***
        throw new Error("ipaddr: address outside defined range");
      ***REMOVED***
      return ((function() ***REMOVED***
        var _i, _results;
        _results = [];
        for (shift = _i = 0; _i <= 24; shift = _i += 8) ***REMOVED***
          _results.push((value >> shift) & 0xff);
        ***REMOVED***
        return _results;
      ***REMOVED***)()).reverse();
    ***REMOVED*** else ***REMOVED***
      return null;
    ***REMOVED***
  ***REMOVED***;

  ipaddr.IPv6 = (function() ***REMOVED***
    function IPv6(parts) ***REMOVED***
      var i, part, _i, _j, _len, _ref;
      if (parts.length === 16) ***REMOVED***
        this.parts = [];
        for (i = _i = 0; _i <= 14; i = _i += 2) ***REMOVED***
          this.parts.push((parts[i] << 8) | parts[i + 1]);
        ***REMOVED***
      ***REMOVED*** else if (parts.length === 8) ***REMOVED***
        this.parts = parts;
      ***REMOVED*** else ***REMOVED***
        throw new Error("ipaddr: ipv6 part count should be 8 or 16");
      ***REMOVED***
      _ref = this.parts;
      for (_j = 0, _len = _ref.length; _j < _len; _j++) ***REMOVED***
        part = _ref[_j];
        if (!((0 <= part && part <= 0xffff))) ***REMOVED***
          throw new Error("ipaddr: ipv6 part should fit in 16 bits");
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    IPv6.prototype.kind = function() ***REMOVED***
      return 'ipv6';
    ***REMOVED***;

    IPv6.prototype.toString = function() ***REMOVED***
      var compactStringParts, part, pushPart, state, stringParts, _i, _len;
      stringParts = (function() ***REMOVED***
        var _i, _len, _ref, _results;
        _ref = this.parts;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) ***REMOVED***
          part = _ref[_i];
          _results.push(part.toString(16));
        ***REMOVED***
        return _results;
      ***REMOVED***).call(this);
      compactStringParts = [];
      pushPart = function(part) ***REMOVED***
        return compactStringParts.push(part);
      ***REMOVED***;
      state = 0;
      for (_i = 0, _len = stringParts.length; _i < _len; _i++) ***REMOVED***
        part = stringParts[_i];
        switch (state) ***REMOVED***
          case 0:
            if (part === '0') ***REMOVED***
              pushPart('');
            ***REMOVED*** else ***REMOVED***
              pushPart(part);
            ***REMOVED***
            state = 1;
            break;
          case 1:
            if (part === '0') ***REMOVED***
              state = 2;
            ***REMOVED*** else ***REMOVED***
              pushPart(part);
            ***REMOVED***
            break;
          case 2:
            if (part !== '0') ***REMOVED***
              pushPart('');
              pushPart(part);
              state = 3;
            ***REMOVED***
            break;
          case 3:
            pushPart(part);
        ***REMOVED***
      ***REMOVED***
      if (state === 2) ***REMOVED***
        pushPart('');
        pushPart('');
      ***REMOVED***
      return compactStringParts.join(":");
    ***REMOVED***;

    IPv6.prototype.toByteArray = function() ***REMOVED***
      var bytes, part, _i, _len, _ref;
      bytes = [];
      _ref = this.parts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) ***REMOVED***
        part = _ref[_i];
        bytes.push(part >> 8);
        bytes.push(part & 0xff);
      ***REMOVED***
      return bytes;
    ***REMOVED***;

    IPv6.prototype.toNormalizedString = function() ***REMOVED***
      var part;
      return ((function() ***REMOVED***
        var _i, _len, _ref, _results;
        _ref = this.parts;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) ***REMOVED***
          part = _ref[_i];
          _results.push(part.toString(16));
        ***REMOVED***
        return _results;
      ***REMOVED***).call(this)).join(":");
    ***REMOVED***;

    IPv6.prototype.match = function(other, cidrRange) ***REMOVED***
      var _ref;
      if (cidrRange === void 0) ***REMOVED***
        _ref = other, other = _ref[0], cidrRange = _ref[1];
      ***REMOVED***
      if (other.kind() !== 'ipv6') ***REMOVED***
        throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
      ***REMOVED***
      return matchCIDR(this.parts, other.parts, 16, cidrRange);
    ***REMOVED***;

    IPv6.prototype.SpecialRanges = ***REMOVED***
      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],
      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],
      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],
      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],
      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],
      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],
      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],
      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],
      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]
    ***REMOVED***;

    IPv6.prototype.range = function() ***REMOVED***
      return ipaddr.subnetMatch(this, this.SpecialRanges);
    ***REMOVED***;

    IPv6.prototype.isIPv4MappedAddress = function() ***REMOVED***
      return this.range() === 'ipv4Mapped';
    ***REMOVED***;

    IPv6.prototype.toIPv4Address = function() ***REMOVED***
      var high, low, _ref;
      if (!this.isIPv4MappedAddress()) ***REMOVED***
        throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
      ***REMOVED***
      _ref = this.parts.slice(-2), high = _ref[0], low = _ref[1];
      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);
    ***REMOVED***;

    return IPv6;

  ***REMOVED***)();

  ipv6Part = "(?:[0-9a-f]+::?)+";

  ipv6Regexes = ***REMOVED***
    "native": new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?$", 'i'),
    transitional: new RegExp(("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)") + ("" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$"), 'i')
  ***REMOVED***;

  expandIPv6 = function(string, parts) ***REMOVED***
    var colonCount, lastColon, part, replacement, replacementCount;
    if (string.indexOf('::') !== string.lastIndexOf('::')) ***REMOVED***
      return null;
    ***REMOVED***
    colonCount = 0;
    lastColon = -1;
    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) ***REMOVED***
      colonCount++;
    ***REMOVED***
    if (string.substr(0, 2) === '::') ***REMOVED***
      colonCount--;
    ***REMOVED***
    if (string.substr(-2, 2) === '::') ***REMOVED***
      colonCount--;
    ***REMOVED***
    if (colonCount > parts) ***REMOVED***
      return null;
    ***REMOVED***
    replacementCount = parts - colonCount;
    replacement = ':';
    while (replacementCount--) ***REMOVED***
      replacement += '0:';
    ***REMOVED***
    string = string.replace('::', replacement);
    if (string[0] === ':') ***REMOVED***
      string = string.slice(1);
    ***REMOVED***
    if (string[string.length - 1] === ':') ***REMOVED***
      string = string.slice(0, -1);
    ***REMOVED***
    return (function() ***REMOVED***
      var _i, _len, _ref, _results;
      _ref = string.split(":");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) ***REMOVED***
        part = _ref[_i];
        _results.push(parseInt(part, 16));
      ***REMOVED***
      return _results;
    ***REMOVED***)();
  ***REMOVED***;

  ipaddr.IPv6.parser = function(string) ***REMOVED***
    var match, octet, octets, parts, _i, _len;
    if (string.match(ipv6Regexes['native'])) ***REMOVED***
      return expandIPv6(string, 8);
    ***REMOVED*** else if (match = string.match(ipv6Regexes['transitional'])) ***REMOVED***
      parts = expandIPv6(match[1].slice(0, -1), 6);
      if (parts) ***REMOVED***
        octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];
        for (_i = 0, _len = octets.length; _i < _len; _i++) ***REMOVED***
          octet = octets[_i];
          if (!((0 <= octet && octet <= 255))) ***REMOVED***
            return null;
          ***REMOVED***
        ***REMOVED***
        parts.push(octets[0] << 8 | octets[1]);
        parts.push(octets[2] << 8 | octets[3]);
        return parts;
      ***REMOVED***
    ***REMOVED***
    return null;
  ***REMOVED***;

  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) ***REMOVED***
    return this.parser(string) !== null;
  ***REMOVED***;

  ipaddr.IPv4.isValid = function(string) ***REMOVED***
    var e;
    try ***REMOVED***
      new this(this.parser(string));
      return true;
    ***REMOVED*** catch (_error) ***REMOVED***
      e = _error;
      return false;
    ***REMOVED***
  ***REMOVED***;

  ipaddr.IPv6.isValid = function(string) ***REMOVED***
    var e;
    if (typeof string === "string" && string.indexOf(":") === -1) ***REMOVED***
      return false;
    ***REMOVED***
    try ***REMOVED***
      new this(this.parser(string));
      return true;
    ***REMOVED*** catch (_error) ***REMOVED***
      e = _error;
      return false;
    ***REMOVED***
  ***REMOVED***;

  ipaddr.IPv4.parse = ipaddr.IPv6.parse = function(string) ***REMOVED***
    var parts;
    parts = this.parser(string);
    if (parts === null) ***REMOVED***
      throw new Error("ipaddr: string is not formatted like ip address");
    ***REMOVED***
    return new this(parts);
  ***REMOVED***;

  ipaddr.IPv4.parseCIDR = function(string) ***REMOVED***
    var maskLength, match;
    if (match = string.match(/^(.+)\/(\d+)$/)) ***REMOVED***
      maskLength = parseInt(match[2]);
      if (maskLength >= 0 && maskLength <= 32) ***REMOVED***
        return [this.parse(match[1]), maskLength];
      ***REMOVED***
    ***REMOVED***
    throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
  ***REMOVED***;

  ipaddr.IPv6.parseCIDR = function(string) ***REMOVED***
    var maskLength, match;
    if (match = string.match(/^(.+)\/(\d+)$/)) ***REMOVED***
      maskLength = parseInt(match[2]);
      if (maskLength >= 0 && maskLength <= 128) ***REMOVED***
        return [this.parse(match[1]), maskLength];
      ***REMOVED***
    ***REMOVED***
    throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
  ***REMOVED***;

  ipaddr.isValid = function(string) ***REMOVED***
    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
  ***REMOVED***;

  ipaddr.parse = function(string) ***REMOVED***
    if (ipaddr.IPv6.isValid(string)) ***REMOVED***
      return ipaddr.IPv6.parse(string);
    ***REMOVED*** else if (ipaddr.IPv4.isValid(string)) ***REMOVED***
      return ipaddr.IPv4.parse(string);
    ***REMOVED*** else ***REMOVED***
      throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
    ***REMOVED***
  ***REMOVED***;

  ipaddr.parseCIDR = function(string) ***REMOVED***
    var e;
    try ***REMOVED***
      return ipaddr.IPv6.parseCIDR(string);
    ***REMOVED*** catch (_error) ***REMOVED***
      e = _error;
      try ***REMOVED***
        return ipaddr.IPv4.parseCIDR(string);
      ***REMOVED*** catch (_error) ***REMOVED***
        e = _error;
        throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;

  ipaddr.fromByteArray = function(bytes) ***REMOVED***
    var length;
    length = bytes.length;
    if (length === 4) ***REMOVED***
      return new ipaddr.IPv4(bytes);
    ***REMOVED*** else if (length === 16) ***REMOVED***
      return new ipaddr.IPv6(bytes);
    ***REMOVED*** else ***REMOVED***
      throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address");
    ***REMOVED***
  ***REMOVED***;

  ipaddr.process = function(string) ***REMOVED***
    var addr;
    addr = this.parse(string);
    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) ***REMOVED***
      return addr.toIPv4Address();
    ***REMOVED*** else ***REMOVED***
      return addr;
    ***REMOVED***
  ***REMOVED***;

***REMOVED***).call(this);
