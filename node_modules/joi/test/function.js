// Load modules

var Code = require('code');
var Lab = require('lab');
var Joi = require('../lib');
var Helper = require('./helper');


// Declare internals

var internals = ***REMOVED******REMOVED***;


// Test shortcuts

var lab = exports.lab = Lab.script();
var describe = lab.describe;
var it = lab.it;
var expect = Code.expect;


describe('func', function () ***REMOVED***

    it('validates a function', function (done) ***REMOVED***

        Helper.validate(Joi.func().required(), [
            [function () ***REMOVED*** ***REMOVED***, true],
            ['', false]
        ], done);
    ***REMOVED***);

    it('validates a function with keys', function (done) ***REMOVED***

        var a = function () ***REMOVED*** ***REMOVED***;
        a.a = 'abc';

        var b = function () ***REMOVED*** ***REMOVED***;
        b.a = 123;

        Helper.validate(Joi.func().keys(***REMOVED*** a: Joi.string().required() ***REMOVED***).required(), [
            [function () ***REMOVED*** ***REMOVED***, false],
            [a, true],
            [b, false],
            ['', false]
        ], done);
    ***REMOVED***);

    it('keeps validated value as a function', function (done) ***REMOVED***

        var schema = Joi.func().keys(***REMOVED*** a: Joi.number() ***REMOVED***);

        var b = 'abc';
        var value = function () ***REMOVED***

            return b;
        ***REMOVED***;

        value.a = '123';

        schema.validate(value, function (err, validated) ***REMOVED***

            expect(validated).to.be.a.function();
            expect(validated()).to.equal('abc');
            expect(validated).to.not.equal(value);
            done();
        ***REMOVED***);
    ***REMOVED***);

    it('retains validated value prototype', function (done) ***REMOVED***

        var schema = Joi.func().keys(***REMOVED*** a: Joi.number() ***REMOVED***);

        var value = function () ***REMOVED***

            this.x = 'o';
        ***REMOVED***;

        value.prototype.get = function () ***REMOVED***

            return this.x;
        ***REMOVED***;

        schema.validate(value, function (err, validated) ***REMOVED***

            expect(validated).to.be.a.function();
            var p = new validated();
            expect(p.get()).to.equal('o');
            expect(validated).to.not.equal(value);
            done();
        ***REMOVED***);
    ***REMOVED***);

    it('keeps validated value as a function (no clone)', function (done) ***REMOVED***

        var schema = Joi.func();

        var b = 'abc';
        var value = function () ***REMOVED***

            return b;
        ***REMOVED***;

        value.a = '123';

        schema.validate(value, function (err, validated) ***REMOVED***

            expect(validated).to.be.a.function();
            expect(validated()).to.equal('abc');
            expect(validated).to.equal(value);
            done();
        ***REMOVED***);
    ***REMOVED***);
***REMOVED***);
