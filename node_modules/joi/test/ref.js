// Load modules

var Lab = require('lab');
var Code = require('code');
var Joi = require('../lib');
var Helper = require('./helper');


// Declare internals

var internals = ***REMOVED******REMOVED***;


// Test shortcuts

var lab = exports.lab = Lab.script();
var describe = lab.describe;
var it = lab.it;
var expect = Code.expect;


describe('ref', function () ***REMOVED***

    it('uses ref as a valid value', function (done) ***REMOVED***

        var schema = Joi.object(***REMOVED***
            a: Joi.ref('b'),
            b: Joi.any()
        ***REMOVED***);

        schema.validate(***REMOVED*** a: 5, b: 6 ***REMOVED***, function (err, value) ***REMOVED***

            expect(err).to.exist();
            expect(err.message).to.equal('child "a" fails because ["a" must be one of [ref:b]]');

            Helper.validate(schema, [
                [***REMOVED*** a: 5 ***REMOVED***, false],
                [***REMOVED*** b: 5 ***REMOVED***, true],
                [***REMOVED*** a: 5, b: 5 ***REMOVED***, true],
                [***REMOVED*** a: '5', b: '5' ***REMOVED***, true]
            ], done);
        ***REMOVED***);
    ***REMOVED***);

    it('uses ref as a valid value (empty key)', function (done) ***REMOVED***

        var schema = Joi.object(***REMOVED***
            a: Joi.ref(''),
            '': Joi.any()
        ***REMOVED***);

        schema.validate(***REMOVED*** a: 5, '': 6 ***REMOVED***, function (err, value) ***REMOVED***

            expect(err).to.exist();
            expect(err.message).to.equal('child "a" fails because ["a" must be one of [ref:]]');

            Helper.validate(schema, [
                [***REMOVED*** a: 5 ***REMOVED***, false],
                [***REMOVED*** '': 5 ***REMOVED***, true],
                [***REMOVED*** a: 5, '': 5 ***REMOVED***, true],
                [***REMOVED*** a: '5', '': '5' ***REMOVED***, true]
            ], done);
        ***REMOVED***);
    ***REMOVED***);

    it('uses ref with nested keys as a valid value', function (done) ***REMOVED***

        var schema = Joi.object(***REMOVED***
            a: Joi.ref('b.c'),
            b: ***REMOVED***
                c: Joi.any()
            ***REMOVED***
        ***REMOVED***);

        schema.validate(***REMOVED*** a: 5, b: ***REMOVED*** c: 6 ***REMOVED*** ***REMOVED***, function (err, value) ***REMOVED***

            expect(err).to.exist();
            expect(err.message).to.equal('child "a" fails because ["a" must be one of [ref:b.c]]');

            Helper.validate(schema, [
                [***REMOVED*** a: 5 ***REMOVED***, false],
                [***REMOVED*** b: ***REMOVED*** c: 5 ***REMOVED*** ***REMOVED***, true],
                [***REMOVED*** a: 5, b: 5 ***REMOVED***, false],
                [***REMOVED*** a: '5', b: ***REMOVED*** c: '5' ***REMOVED*** ***REMOVED***, true]
            ], done);
        ***REMOVED***);
    ***REMOVED***);

    it('uses ref with combined nested keys in sub child', function (done) ***REMOVED***

        var ref = Joi.ref('b.c');
        expect(ref.root).to.equal('b');

        var schema = Joi.object(***REMOVED***
            a: ref,
            b: ***REMOVED***
                c: Joi.any()
            ***REMOVED***
        ***REMOVED***);

        var input = ***REMOVED*** a: 5, b: ***REMOVED*** c: 5 ***REMOVED*** ***REMOVED***;
        schema.validate(input, function (err, value) ***REMOVED***

            expect(err).to.not.exist();

            var parent = Joi.object(***REMOVED***
                e: schema
            ***REMOVED***);

            parent.validate(***REMOVED*** e: input ***REMOVED***, function (err2, value2) ***REMOVED***

                expect(err2).to.not.exist();
                done();
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***);

    it('uses ref reach options', function (done) ***REMOVED***

        var ref = Joi.ref('b/c', ***REMOVED*** separator: '/' ***REMOVED***);
        expect(ref.root).to.equal('b');

        var schema = Joi.object(***REMOVED***
            a: ref,
            b: ***REMOVED***
                c: Joi.any()
            ***REMOVED***
        ***REMOVED***);

        schema.validate(***REMOVED*** a: 5, b: ***REMOVED*** c: 5 ***REMOVED*** ***REMOVED***, function (err, value) ***REMOVED***

            expect(err).to.not.exist();
            done();
        ***REMOVED***);
    ***REMOVED***);

    it('ignores the order in which keys are defined', function (done) ***REMOVED***

        var ab = Joi.object(***REMOVED***
            a: ***REMOVED***
                c: Joi.number()
            ***REMOVED***,
            b: Joi.ref('a.c')
        ***REMOVED***);

        ab.validate(***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 5 ***REMOVED***, function (err, value) ***REMOVED***

            expect(err).to.not.exist();

            var ba = Joi.object(***REMOVED***
                b: Joi.ref('a.c'),
                a: ***REMOVED***
                    c: Joi.number()
                ***REMOVED***
            ***REMOVED***);

            ba.validate(***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 5 ***REMOVED***, function (err2, value2) ***REMOVED***

                expect(err2).to.not.exist();
                done();
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***);

    it('uses ref as default value', function (done) ***REMOVED***

        var schema = Joi.object(***REMOVED***
            a: Joi.default(Joi.ref('b')),
            b: Joi.any()
        ***REMOVED***);

        schema.validate(***REMOVED*** b: 6 ***REMOVED***, function (err, value) ***REMOVED***

            expect(err).to.not.exist();
            expect(value).to.deep.equal(***REMOVED*** a: 6, b: 6 ***REMOVED***);
            done();
        ***REMOVED***);
    ***REMOVED***);

    it('uses ref as default value regardless of order', function (done) ***REMOVED***

        var ab = Joi.object(***REMOVED***
            a: Joi.default(Joi.ref('b')),
            b: Joi.number()
        ***REMOVED***);

        ab.validate(***REMOVED*** b: '6' ***REMOVED***, function (err, value) ***REMOVED***

            expect(err).to.not.exist();
            expect(value).to.deep.equal(***REMOVED*** a: 6, b: 6 ***REMOVED***);

            var ba = Joi.object(***REMOVED***
                b: Joi.number(),
                a: Joi.default(Joi.ref('b'))
            ***REMOVED***);

            ba.validate(***REMOVED*** b: '6' ***REMOVED***, function (err2, value2) ***REMOVED***

                expect(err2).to.not.exist();
                expect(value2).to.deep.equal(***REMOVED*** a: 6, b: 6 ***REMOVED***);
                done();
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***);

    it('ignores the order in which keys are defined with alternatives', function (done) ***REMOVED***

        var a = ***REMOVED*** c: Joi.number() ***REMOVED***;
        var b = [Joi.ref('a.c'), Joi.ref('c')];
        var c = Joi.number();

        Helper.validate(***REMOVED*** a: a, b: b, c: c ***REMOVED***, [
            [***REMOVED*** a: ***REMOVED******REMOVED*** ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 5 ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 6, c: '6' ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 7, c: '6' ***REMOVED***, false]
        ]);

        Helper.validate(***REMOVED*** b: b, a: a, c: c ***REMOVED***, [
            [***REMOVED*** a: ***REMOVED******REMOVED*** ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 5 ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 6, c: '6' ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 7, c: '6' ***REMOVED***, false]
        ]);

        Helper.validate(***REMOVED*** b: b, c: c, a: a ***REMOVED***, [
            [***REMOVED*** a: ***REMOVED******REMOVED*** ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 5 ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 6, c: '6' ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 7, c: '6' ***REMOVED***, false]
        ]);

        Helper.validate(***REMOVED*** a: a, c: c, b: b ***REMOVED***, [
            [***REMOVED*** a: ***REMOVED******REMOVED*** ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 5 ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 6, c: '6' ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 7, c: '6' ***REMOVED***, false]
        ]);

        Helper.validate(***REMOVED*** c: c, a: a, b: b ***REMOVED***, [
            [***REMOVED*** a: ***REMOVED******REMOVED*** ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 5 ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 6, c: '6' ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 7, c: '6' ***REMOVED***, false]
        ]);

        Helper.validate(***REMOVED*** c: c, b: b, a: a ***REMOVED***, [
            [***REMOVED*** a: ***REMOVED******REMOVED*** ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 5 ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 6, c: '6' ***REMOVED***, true],
            [***REMOVED*** a: ***REMOVED*** c: '5' ***REMOVED***, b: 7, c: '6' ***REMOVED***, false]
        ], done);
    ***REMOVED***);

    it('uses context as default value', function (done) ***REMOVED***

        var schema = Joi.object(***REMOVED***
            a: Joi.default(Joi.ref('$x')),
            b: Joi.any()
        ***REMOVED***);

        Joi.validate(***REMOVED*** b: 6 ***REMOVED***, schema, ***REMOVED*** context: ***REMOVED*** x: 22 ***REMOVED*** ***REMOVED***, function (err, value) ***REMOVED***

            expect(err).to.not.exist();
            expect(value).to.deep.equal(***REMOVED*** a: 22, b: 6 ***REMOVED***);
            done();
        ***REMOVED***);
    ***REMOVED***);

    it('uses context as default value with custom prefix', function (done) ***REMOVED***

        var schema = Joi.object(***REMOVED***
            a: Joi.default(Joi.ref('%x', ***REMOVED*** contextPrefix: '%' ***REMOVED***)),
            b: Joi.any()
        ***REMOVED***);

        Joi.validate(***REMOVED*** b: 6 ***REMOVED***, schema, ***REMOVED*** context: ***REMOVED*** x: 22 ***REMOVED*** ***REMOVED***, function (err, value) ***REMOVED***

            expect(err).to.not.exist();
            expect(value).to.deep.equal(***REMOVED*** a: 22, b: 6 ***REMOVED***);
            done();
        ***REMOVED***);
    ***REMOVED***);

    it('uses context as a valid value', function (done) ***REMOVED***

        var schema = Joi.object(***REMOVED***
            a: Joi.ref('$x'),
            b: Joi.any()
        ***REMOVED***);

        Joi.validate(***REMOVED*** a: 5, b: 6 ***REMOVED***, schema, ***REMOVED*** context: ***REMOVED*** x: 22 ***REMOVED*** ***REMOVED***, function (err, value) ***REMOVED***

            expect(err).to.exist();
            expect(err.message).to.equal('child "a" fails because ["a" must be one of [context:x]]');

            Helper.validateOptions(schema, [
                [***REMOVED*** a: 5 ***REMOVED***, false],
                [***REMOVED*** a: 22 ***REMOVED***, true],
                [***REMOVED*** b: 5 ***REMOVED***, true],
                [***REMOVED*** a: 22, b: 5 ***REMOVED***, true],
                [***REMOVED*** a: '22', b: '5' ***REMOVED***, false]
            ], ***REMOVED*** context: ***REMOVED*** x: 22 ***REMOVED*** ***REMOVED***, done);
        ***REMOVED***);
    ***REMOVED***);

    it('uses context in when condition', function (done) ***REMOVED***

        var schema = ***REMOVED***
            a: Joi.boolean().when('$x', ***REMOVED*** is: Joi.exist(), otherwise: Joi.forbidden() ***REMOVED***)
        ***REMOVED***;

        Helper.validate(schema, [
            [***REMOVED******REMOVED***, true],
            [***REMOVED*** a: 'x' ***REMOVED***, false],
            [***REMOVED*** a: true ***REMOVED***, false],
            [***REMOVED******REMOVED***, true, ***REMOVED*** context: ***REMOVED******REMOVED*** ***REMOVED***],
            [***REMOVED*** a: 'x' ***REMOVED***, false, ***REMOVED*** context: ***REMOVED******REMOVED*** ***REMOVED***],
            [***REMOVED*** a: true ***REMOVED***, false, ***REMOVED*** context: ***REMOVED******REMOVED*** ***REMOVED***],
            [***REMOVED******REMOVED***, true, ***REMOVED*** context: ***REMOVED*** x: 1 ***REMOVED*** ***REMOVED***],
            [***REMOVED*** a: 'x' ***REMOVED***, false, ***REMOVED*** context: ***REMOVED*** x: 1 ***REMOVED*** ***REMOVED***],
            [***REMOVED*** a: true ***REMOVED***, true, ***REMOVED*** context: ***REMOVED*** x: 1 ***REMOVED*** ***REMOVED***]
        ], done);
    ***REMOVED***);

    it('uses nested context in when condition', function (done) ***REMOVED***

        var schema = ***REMOVED***
            a: Joi.boolean().when('$x.y', ***REMOVED*** is: Joi.exist(), otherwise: Joi.forbidden() ***REMOVED***)
        ***REMOVED***;

        Helper.validate(schema, [
            [***REMOVED******REMOVED***, true],
            [***REMOVED*** a: 'x' ***REMOVED***, false],
            [***REMOVED*** a: true ***REMOVED***, false],
            [***REMOVED******REMOVED***, true, ***REMOVED*** context: ***REMOVED******REMOVED*** ***REMOVED***],
            [***REMOVED*** a: 'x' ***REMOVED***, false, ***REMOVED*** context: ***REMOVED******REMOVED*** ***REMOVED***],
            [***REMOVED*** a: true ***REMOVED***, false, ***REMOVED*** context: ***REMOVED******REMOVED*** ***REMOVED***],
            [***REMOVED******REMOVED***, true, ***REMOVED*** context: ***REMOVED*** x: 1 ***REMOVED*** ***REMOVED***],
            [***REMOVED*** a: 'x' ***REMOVED***, false, ***REMOVED*** context: ***REMOVED*** x: 1 ***REMOVED*** ***REMOVED***],
            [***REMOVED*** a: true ***REMOVED***, false, ***REMOVED*** context: ***REMOVED*** x: 1 ***REMOVED*** ***REMOVED***],
            [***REMOVED******REMOVED***, true, ***REMOVED*** context: ***REMOVED*** x: ***REMOVED******REMOVED*** ***REMOVED*** ***REMOVED***],
            [***REMOVED*** a: 'x' ***REMOVED***, false, ***REMOVED*** context: ***REMOVED*** x: ***REMOVED******REMOVED*** ***REMOVED*** ***REMOVED***],
            [***REMOVED*** a: true ***REMOVED***, false, ***REMOVED*** context: ***REMOVED*** x: ***REMOVED******REMOVED*** ***REMOVED*** ***REMOVED***],
            [***REMOVED******REMOVED***, true, ***REMOVED*** context: ***REMOVED*** x: ***REMOVED*** y: 1 ***REMOVED*** ***REMOVED*** ***REMOVED***],
            [***REMOVED*** a: 'x' ***REMOVED***, false, ***REMOVED*** context: ***REMOVED*** x: ***REMOVED*** y: 1 ***REMOVED*** ***REMOVED*** ***REMOVED***],
            [***REMOVED*** a: true ***REMOVED***, true, ***REMOVED*** context: ***REMOVED*** x: ***REMOVED*** y: 1 ***REMOVED*** ***REMOVED*** ***REMOVED***]
        ], done);
    ***REMOVED***);

    it('describes schema with ref', function (done) ***REMOVED***

        var desc = Joi.compile(Joi.ref('a.b')).describe();
        expect(Joi.isRef(desc.valids[0])).to.be.true();
        done();
    ***REMOVED***);

    describe('#create', function () ***REMOVED***

        it('throws when key is missing', function (done) ***REMOVED***

            expect(function () ***REMOVED***

                Joi.ref(5);
            ***REMOVED***).to.throw('Invalid reference key: 5');
            done();
        ***REMOVED***);

        it('finds root with default separator', function (done) ***REMOVED***

            expect(Joi.ref('a.b.c').root).to.equal('a');
            done();
        ***REMOVED***);

        it('finds root with default separator and options', function (done) ***REMOVED***

            expect(Joi.ref('a.b.c', ***REMOVED******REMOVED***).root).to.equal('a');
            done();
        ***REMOVED***);

        it('finds root with custom separator', function (done) ***REMOVED***

            expect(Joi.ref('a+b+c', ***REMOVED*** separator: '+' ***REMOVED***).root).to.equal('a');
            done();
        ***REMOVED***);
    ***REMOVED***);
***REMOVED***);
