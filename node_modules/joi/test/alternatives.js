// Load modules

var Lab = require('lab');
var Code = require('code');
var Joi = require('..');
var Helper = require('./helper');


// Declare internals

var internals = ***REMOVED******REMOVED***;


// Test shortcuts

var lab = exports.lab = Lab.script();
var describe = lab.describe;
var it = lab.it;
var expect = Code.expect;


describe('alternatives', function () ***REMOVED***

    it('fails when no alternatives are provided', function (done) ***REMOVED***

        Joi.alternatives().validate('a', function (err, value) ***REMOVED***

            expect(err).to.exist();
            expect(err.message).to.equal('"value" not matching any of the allowed alternatives');
            done();
        ***REMOVED***);
    ***REMOVED***);

    it('allows undefined when no alternatives are provided', function (done) ***REMOVED***

        Joi.alternatives().validate(undefined, function (err, value) ***REMOVED***

            expect(err).to.not.exist();
            done();
        ***REMOVED***);
    ***REMOVED***);

    it('applies modifiers when higher priority converts', function (done) ***REMOVED***

        var schema = Joi.object(***REMOVED***
            a: [
                Joi.number(),
                Joi.string()
            ]
        ***REMOVED***);

        schema.validate(***REMOVED*** a: '5' ***REMOVED***, function (err, value) ***REMOVED***

            expect(err).to.not.exist();
            expect(value.a).to.equal(5);
            done();
        ***REMOVED***);
    ***REMOVED***);

    it('applies modifiers when lower priority valid is a match', function (done) ***REMOVED***

        var schema = Joi.object(***REMOVED***
            a: [
                Joi.number(),
                Joi.valid('5')
            ]
        ***REMOVED***);

        schema.validate(***REMOVED*** a: '5' ***REMOVED***, function (err, value) ***REMOVED***

            expect(err).to.not.exist();
            expect(value.a).to.equal(5);
            done();
        ***REMOVED***);
    ***REMOVED***);

    it('does not apply modifier if alternative fails', function (done) ***REMOVED***

        var schema = Joi.object(***REMOVED***
            a: [
                Joi.object(***REMOVED*** c: Joi.any(), d: Joi.number() ***REMOVED***).rename('b', 'c'),
                ***REMOVED*** b: Joi.any(), d: Joi.string() ***REMOVED***
            ]
        ***REMOVED***);

        var input = ***REMOVED*** a: ***REMOVED*** b: 'any', d: 'string' ***REMOVED*** ***REMOVED***;
        schema.validate(input, function (err, value) ***REMOVED***

            expect(err).to.not.exist();
            expect(value.a.b).to.equal('any');
            done();
        ***REMOVED***);
    ***REMOVED***);

    describe('#try', function () ***REMOVED***

        it('throws when missing alternatives', function (done) ***REMOVED***

            expect(function () ***REMOVED***

                Joi.alternatives().try();
            ***REMOVED***).to.throw('Cannot add other alternatives without at least one schema');
            done();
        ***REMOVED***);
    ***REMOVED***);

    describe('#when', function () ***REMOVED***

        it('throws on invalid ref (not string)', function (done) ***REMOVED***

            expect(function () ***REMOVED***

                Joi.alternatives().when(5, ***REMOVED*** is: 6, then: Joi.number() ***REMOVED***);
            ***REMOVED***).to.throw('Invalid reference: 5');
            done();
        ***REMOVED***);

        it('validates conditional alternatives', function (done) ***REMOVED***

            var schema = ***REMOVED***
                a: Joi.alternatives().when('b', ***REMOVED*** is: 5, then: 'x', otherwise: 'y' ***REMOVED***)
                                     .try('z'),
                b: Joi.any()
            ***REMOVED***;

            Helper.validate(schema, [
                [***REMOVED*** a: 'x', b: 5 ***REMOVED***, true],
                [***REMOVED*** a: 'x', b: 6 ***REMOVED***, false],
                [***REMOVED*** a: 'y', b: 5 ***REMOVED***, false],
                [***REMOVED*** a: 'y', b: 6 ***REMOVED***, true],
                [***REMOVED*** a: 'z', b: 5 ***REMOVED***, true],
                [***REMOVED*** a: 'z', b: 6 ***REMOVED***, true]
            ], done);
        ***REMOVED***);

        it('validates conditional alternatives (empty key)', function (done) ***REMOVED***

            var schema = ***REMOVED***
                a: Joi.alternatives().when('', ***REMOVED*** is: 5, then: 'x', otherwise: 'y' ***REMOVED***)
                                     .try('z'),
                '': Joi.any()
            ***REMOVED***;

            Helper.validate(schema, [
                [***REMOVED*** a: 'x', '': 5 ***REMOVED***, true],
                [***REMOVED*** a: 'x', '': 6 ***REMOVED***, false],
                [***REMOVED*** a: 'y', '': 5 ***REMOVED***, false],
                [***REMOVED*** a: 'y', '': 6 ***REMOVED***, true],
                [***REMOVED*** a: 'z', '': 5 ***REMOVED***, true],
                [***REMOVED*** a: 'z', '': 6 ***REMOVED***, true]
            ], done);
        ***REMOVED***);

        it('validates only then', function (done) ***REMOVED***

            var schema = ***REMOVED***
                a: Joi.alternatives().when(Joi.ref('b'), ***REMOVED*** is: 5, then: 'x' ***REMOVED***)
                                     .try('z'),
                b: Joi.any()
            ***REMOVED***;

            Helper.validate(schema, [
                [***REMOVED*** a: 'x', b: 5 ***REMOVED***, true],
                [***REMOVED*** a: 'x', b: 6 ***REMOVED***, false],
                [***REMOVED*** a: 'y', b: 5 ***REMOVED***, false],
                [***REMOVED*** a: 'y', b: 6 ***REMOVED***, false],
                [***REMOVED*** a: 'z', b: 5 ***REMOVED***, true],
                [***REMOVED*** a: 'z', b: 6 ***REMOVED***, true]
            ], done);
        ***REMOVED***);

        it('validates only otherwise', function (done) ***REMOVED***

            var schema = ***REMOVED***
                a: Joi.alternatives().when('b', ***REMOVED*** is: 5, otherwise: 'y' ***REMOVED***)
                                     .try('z'),
                b: Joi.any()
            ***REMOVED***;

            Helper.validate(schema, [
                [***REMOVED*** a: 'x', b: 5 ***REMOVED***, false],
                [***REMOVED*** a: 'x', b: 6 ***REMOVED***, false],
                [***REMOVED*** a: 'y', b: 5 ***REMOVED***, false],
                [***REMOVED*** a: 'y', b: 6 ***REMOVED***, true],
                [***REMOVED*** a: 'z', b: 5 ***REMOVED***, true],
                [***REMOVED*** a: 'z', b: 6 ***REMOVED***, true]
            ], done);
        ***REMOVED***);

        it('validates when is is null', function (done) ***REMOVED***

            var schema = ***REMOVED***
                a: Joi.alternatives().when('b', ***REMOVED*** is: null, then: 'x', otherwise: Joi.number() ***REMOVED***),
                b: Joi.any()
            ***REMOVED***;

            Helper.validate(schema, [
                [***REMOVED*** a: 1 ***REMOVED***, true],
                [***REMOVED*** a: 'y' ***REMOVED***, false],
                [***REMOVED*** a: 'x', b: null ***REMOVED***, true],
                [***REMOVED*** a: 'y', b: null ***REMOVED***, false],
                [***REMOVED*** a: 1, b: null ***REMOVED***, false]
            ], done);
        ***REMOVED***);

        it('validates when is has ref', function (done) ***REMOVED***

            var schema = ***REMOVED***
                a: Joi.alternatives().when('b', ***REMOVED*** is: Joi.ref('c'), then: 'x' ***REMOVED***),
                b: Joi.any(),
                c: Joi.number()
            ***REMOVED***;

            Helper.validate(schema, [
                [***REMOVED*** a: 'x', b: 5, c: '5' ***REMOVED***, true],
                [***REMOVED*** a: 'x', b: 5, c: '1' ***REMOVED***, false],
                [***REMOVED*** a: 'x', b: '5', c: '5' ***REMOVED***, false],
                [***REMOVED*** a: 'y', b: 5, c: 5 ***REMOVED***, false],
                [***REMOVED*** a: 'y' ***REMOVED***, false]
            ], done);
        ***REMOVED***);

        it('validates when then has ref', function (done) ***REMOVED***

            var schema = ***REMOVED***
                a: Joi.alternatives().when('b', ***REMOVED*** is: 5, then: Joi.ref('c') ***REMOVED***),
                b: Joi.any(),
                c: Joi.number()
            ***REMOVED***;

            Helper.validate(schema, [
                [***REMOVED*** a: 'x', b: 5, c: '1' ***REMOVED***, false],
                [***REMOVED*** a: 1, b: 5, c: '1' ***REMOVED***, true],
                [***REMOVED*** a: '1', b: 5, c: '1' ***REMOVED***, false]
            ], done);
        ***REMOVED***);

        it('validates when otherwise has ref', function (done) ***REMOVED***

            var schema = ***REMOVED***
                a: Joi.alternatives().when('b', ***REMOVED*** is: 6, otherwise: Joi.ref('c') ***REMOVED***),
                b: Joi.any(),
                c: Joi.number()
            ***REMOVED***;

            Helper.validate(schema, [
                [***REMOVED*** a: 'x', b: 5, c: '1' ***REMOVED***, false],
                [***REMOVED*** a: 1, b: 5, c: '1' ***REMOVED***, true],
                [***REMOVED*** a: '1', b: 5, c: '1' ***REMOVED***, false]
            ], done);
        ***REMOVED***);

        it('validates when empty value', function (done) ***REMOVED***

            var schema = ***REMOVED***
                a: Joi.alternatives().when('b', ***REMOVED*** is: true, then: Joi.required() ***REMOVED***),
                b: Joi.boolean().default(false)
            ***REMOVED***;

            Helper.validate(schema, [
                [***REMOVED*** b: false ***REMOVED***, true],
                [***REMOVED*** b: true ***REMOVED***, true]           // true because required() only applies to the one alternative
            ], done);
        ***REMOVED***);

        it('validates when missing value', function (done) ***REMOVED***

            var schema = Joi.object(***REMOVED***
                a: Joi.alternatives().when('b', ***REMOVED*** is: 5, then: Joi.optional(), otherwise: Joi.required() ***REMOVED***).required(),
                b: Joi.number()
            ***REMOVED***);

            Helper.validate(schema, [
                [***REMOVED*** a: 1 ***REMOVED***, true],
                [***REMOVED******REMOVED***, false],
                [***REMOVED*** b: 1 ***REMOVED***, false],
                [***REMOVED*** a: 1, b: 1 ***REMOVED***, true],
                [***REMOVED*** a: 1, b: 5 ***REMOVED***, true],
                [***REMOVED*** b: 5 ***REMOVED***, false]
            ], done);
        ***REMOVED***);
    ***REMOVED***);

    describe('#describe', function () ***REMOVED***

        it('describes when', function (done) ***REMOVED***

            var schema = ***REMOVED***
                a: Joi.alternatives().when('b', ***REMOVED*** is: 5, then: 'x', otherwise: 'y' ***REMOVED***)
                                     .try('z'),
                b: Joi.any()
            ***REMOVED***;

            var outcome = ***REMOVED***
                type: 'object',
                children: ***REMOVED***
                    b: ***REMOVED***
                        type: 'any'
                    ***REMOVED***,
                    a: ***REMOVED***
                        type: 'alternatives',
                        alternatives: [
                            ***REMOVED***
                                ref: 'ref:b',
                                is: ***REMOVED***
                                    type: 'number',
                                    flags: ***REMOVED***
                                        allowOnly: true,
                                        presence: 'required'
                                    ***REMOVED***,
                                    valids: [5],
                                    invalids: [Infinity, -Infinity]
                                ***REMOVED***,
                                then: ***REMOVED***
                                    type: 'string',
                                    flags: ***REMOVED***
                                        allowOnly: true
                                    ***REMOVED***,
                                    valids: ['x'],
                                    invalids: ['']
                                ***REMOVED***,
                                otherwise: ***REMOVED***
                                    type: 'string',
                                    flags: ***REMOVED***
                                        allowOnly: true
                                    ***REMOVED***,
                                    valids: ['y'],
                                    invalids: ['']
                                ***REMOVED***
                            ***REMOVED***,
                            ***REMOVED***
                                type: 'string',
                                flags: ***REMOVED***
                                    allowOnly: true
                                ***REMOVED***,
                                valids: ['z'],
                                invalids: ['']
                            ***REMOVED***
                        ]
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***;

            expect(Joi.describe(schema)).to.deep.equal(outcome);
            done();
        ***REMOVED***);

        it('describes when (only then)', function (done) ***REMOVED***

            var schema = ***REMOVED***
                a: Joi.alternatives().when('b', ***REMOVED*** is: 5, then: 'x' ***REMOVED***)
                                     .try('z'),
                b: Joi.any()
            ***REMOVED***;

            var outcome = ***REMOVED***
                type: 'object',
                children: ***REMOVED***
                    b: ***REMOVED***
                        type: 'any'
                    ***REMOVED***,
                    a: ***REMOVED***
                        type: 'alternatives',
                        alternatives: [
                            ***REMOVED***
                                ref: 'ref:b',
                                is: ***REMOVED***
                                    type: 'number',
                                    flags: ***REMOVED***
                                        allowOnly: true,
                                        presence: 'required'
                                    ***REMOVED***,
                                    valids: [5],
                                    invalids: [Infinity, -Infinity]
                                ***REMOVED***,
                                then: ***REMOVED***
                                    type: 'string',
                                    flags: ***REMOVED***
                                        allowOnly: true
                                    ***REMOVED***,
                                    valids: ['x'],
                                    invalids: ['']
                                ***REMOVED***
                            ***REMOVED***,
                            ***REMOVED***
                                type: 'string',
                                flags: ***REMOVED***
                                    allowOnly: true
                                ***REMOVED***,
                                valids: ['z'],
                                invalids: ['']
                            ***REMOVED***
                        ]
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***;

            expect(Joi.describe(schema)).to.deep.equal(outcome);
            done();
        ***REMOVED***);

        it('describes when (only otherwise)', function (done) ***REMOVED***

            var schema = ***REMOVED***
                a: Joi.alternatives().when('b', ***REMOVED*** is: 5, otherwise: 'y' ***REMOVED***)
                                     .try('z'),
                b: Joi.any()
            ***REMOVED***;

            var outcome = ***REMOVED***
                type: 'object',
                children: ***REMOVED***
                    b: ***REMOVED***
                        type: 'any'
                    ***REMOVED***,
                    a: ***REMOVED***
                        type: 'alternatives',
                        alternatives: [
                            ***REMOVED***
                                ref: 'ref:b',
                                is: ***REMOVED***
                                    type: 'number',
                                    flags: ***REMOVED***
                                        allowOnly: true,
                                        presence: 'required'
                                    ***REMOVED***,
                                    valids: [5],
                                    invalids: [Infinity, -Infinity]
                                ***REMOVED***,
                                otherwise: ***REMOVED***
                                    type: 'string',
                                    flags: ***REMOVED***
                                        allowOnly: true
                                    ***REMOVED***,
                                    valids: ['y'],
                                    invalids: ['']
                                ***REMOVED***
                            ***REMOVED***,
                            ***REMOVED***
                                type: 'string',
                                flags: ***REMOVED***
                                    allowOnly: true
                                ***REMOVED***,
                                valids: ['z'],
                                invalids: ['']
                            ***REMOVED***
                        ]
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***;

            expect(Joi.describe(schema)).to.deep.equal(outcome);
            done();
        ***REMOVED***);

        it('describes inherited fields (from any)', function (done) ***REMOVED***

            var schema = Joi.alternatives()
                .try('a')
                .description('d')
                .example('a')
                .meta('b')
                .meta('c')
                .notes('f')
                .tags('g');

            var outcome = ***REMOVED***
                type: 'alternatives',
                description: 'd',
                notes: ['f'],
                tags: ['g'],
                meta: ['b', 'c'],
                examples: ['a'],
                alternatives: [***REMOVED***
                    type: 'string',
                    flags: ***REMOVED***
                        allowOnly: true
                    ***REMOVED***,
                    valids: ['a'],
                    invalids: ['']
                ***REMOVED***]
            ***REMOVED***;

            expect(Joi.describe(schema)).to.deep.equal(outcome);
            done();
        ***REMOVED***);
    ***REMOVED***);
***REMOVED***);
