// Load modules


// Declare internals

var internals = ***REMOVED******REMOVED***;


exports.errors = ***REMOVED***
    root: 'value',
    key: '"***REMOVED******REMOVED***!key***REMOVED******REMOVED***" ',
    messages: ***REMOVED***
        wrapArrays: true
    ***REMOVED***,
    any: ***REMOVED***
        unknown: 'is not allowed',
        invalid: 'contains an invalid value',
        empty: 'is not allowed to be empty',
        required: 'is required',
        allowOnly: 'must be one of ***REMOVED******REMOVED***valids***REMOVED******REMOVED***',
        default: 'threw an error when running default method'
    ***REMOVED***,
    alternatives: ***REMOVED***
        base: 'not matching any of the allowed alternatives'
    ***REMOVED***,
    array: ***REMOVED***
        base: 'must be an array',
        includes: 'at position ***REMOVED******REMOVED***pos***REMOVED******REMOVED*** does not match any of the allowed types',
        includesSingle: 'single value of "***REMOVED******REMOVED***!key***REMOVED******REMOVED***" does not match any of the allowed types',
        includesOne: 'at position ***REMOVED******REMOVED***pos***REMOVED******REMOVED*** fails because ***REMOVED******REMOVED***reason***REMOVED******REMOVED***',
        includesOneSingle: 'single value of "***REMOVED******REMOVED***!key***REMOVED******REMOVED***" fails because ***REMOVED******REMOVED***reason***REMOVED******REMOVED***',
        includesRequiredUnknowns: 'does not contain ***REMOVED******REMOVED***unknownMisses***REMOVED******REMOVED*** required value(s)',
        includesRequiredKnowns: 'does not contain ***REMOVED******REMOVED***knownMisses***REMOVED******REMOVED***',
        includesRequiredBoth: 'does not contain ***REMOVED******REMOVED***knownMisses***REMOVED******REMOVED*** and ***REMOVED******REMOVED***unknownMisses***REMOVED******REMOVED*** other required value(s)',
        excludes: 'at position ***REMOVED******REMOVED***pos***REMOVED******REMOVED*** contains an excluded value',
        excludesSingle: 'single value of "***REMOVED******REMOVED***!key***REMOVED******REMOVED***" contains an excluded value',
        min: 'must contain at least ***REMOVED******REMOVED***limit***REMOVED******REMOVED*** items',
        max: 'must contain less than or equal to ***REMOVED******REMOVED***limit***REMOVED******REMOVED*** items',
        length: 'must contain ***REMOVED******REMOVED***limit***REMOVED******REMOVED*** items',
        ordered: 'at position ***REMOVED******REMOVED***pos***REMOVED******REMOVED*** fails because ***REMOVED******REMOVED***reason***REMOVED******REMOVED***',
        orderedLength: 'at position ***REMOVED******REMOVED***pos***REMOVED******REMOVED*** fails because array must contain at most ***REMOVED******REMOVED***limit***REMOVED******REMOVED*** items',
        sparse: 'must not be a sparse array',
        unique: 'position ***REMOVED******REMOVED***pos***REMOVED******REMOVED*** contains a duplicate value'
    ***REMOVED***,
    boolean: ***REMOVED***
        base: 'must be a boolean'
    ***REMOVED***,
    binary: ***REMOVED***
        base: 'must be a buffer or a string',
        min: 'must be at least ***REMOVED******REMOVED***limit***REMOVED******REMOVED*** bytes',
        max: 'must be less than or equal to ***REMOVED******REMOVED***limit***REMOVED******REMOVED*** bytes',
        length: 'must be ***REMOVED******REMOVED***limit***REMOVED******REMOVED*** bytes'
    ***REMOVED***,
    date: ***REMOVED***
        base: 'must be a number of milliseconds or valid date string',
        min: 'must be larger than or equal to "***REMOVED******REMOVED***limit***REMOVED******REMOVED***"',
        max: 'must be less than or equal to "***REMOVED******REMOVED***limit***REMOVED******REMOVED***"',
        isoDate: 'must be a valid ISO 8601 date',
        ref: 'references "***REMOVED******REMOVED***ref***REMOVED******REMOVED***" which is not a date'
    ***REMOVED***,
    function: ***REMOVED***
        base: 'must be a Function'
    ***REMOVED***,
    object: ***REMOVED***
        base: 'must be an object',
        child: 'child "***REMOVED******REMOVED***!key***REMOVED******REMOVED***" fails because ***REMOVED******REMOVED***reason***REMOVED******REMOVED***',
        min: 'must have at least ***REMOVED******REMOVED***limit***REMOVED******REMOVED*** children',
        max: 'must have less than or equal to ***REMOVED******REMOVED***limit***REMOVED******REMOVED*** children',
        length: 'must have ***REMOVED******REMOVED***limit***REMOVED******REMOVED*** children',
        allowUnknown: 'is not allowed',
        with: 'missing required peer "***REMOVED******REMOVED***peer***REMOVED******REMOVED***"',
        without: 'conflict with forbidden peer "***REMOVED******REMOVED***peer***REMOVED******REMOVED***"',
        missing: 'must contain at least one of ***REMOVED******REMOVED***peers***REMOVED******REMOVED***',
        xor: 'contains a conflict between exclusive peers ***REMOVED******REMOVED***peers***REMOVED******REMOVED***',
        or: 'must contain at least one of ***REMOVED******REMOVED***peers***REMOVED******REMOVED***',
        and: 'contains ***REMOVED******REMOVED***present***REMOVED******REMOVED*** without its required peers ***REMOVED******REMOVED***missing***REMOVED******REMOVED***',
        nand: '!!"***REMOVED******REMOVED***main***REMOVED******REMOVED***" must not exist simultaneously with ***REMOVED******REMOVED***peers***REMOVED******REMOVED***',
        assert: '!!"***REMOVED******REMOVED***ref***REMOVED******REMOVED***" validation failed because "***REMOVED******REMOVED***ref***REMOVED******REMOVED***" failed to ***REMOVED******REMOVED***message***REMOVED******REMOVED***',
        rename: ***REMOVED***
            multiple: 'cannot rename child "***REMOVED******REMOVED***from***REMOVED******REMOVED***" because multiple renames are disabled and another key was already renamed to "***REMOVED******REMOVED***to***REMOVED******REMOVED***"',
            override: 'cannot rename child "***REMOVED******REMOVED***from***REMOVED******REMOVED***" because override is disabled and target "***REMOVED******REMOVED***to***REMOVED******REMOVED***" exists'
        ***REMOVED***,
        type: 'must be an instance of "***REMOVED******REMOVED***type***REMOVED******REMOVED***"'
    ***REMOVED***,
    number: ***REMOVED***
        base: 'must be a number',
        min: 'must be larger than or equal to ***REMOVED******REMOVED***limit***REMOVED******REMOVED***',
        max: 'must be less than or equal to ***REMOVED******REMOVED***limit***REMOVED******REMOVED***',
        less: 'must be less than ***REMOVED******REMOVED***limit***REMOVED******REMOVED***',
        greater: 'must be greater than ***REMOVED******REMOVED***limit***REMOVED******REMOVED***',
        float: 'must be a float or double',
        integer: 'must be an integer',
        negative: 'must be a negative number',
        positive: 'must be a positive number',
        precision: 'must have no more than ***REMOVED******REMOVED***limit***REMOVED******REMOVED*** decimal places',
        ref: 'references "***REMOVED******REMOVED***ref***REMOVED******REMOVED***" which is not a number',
        multiple: 'must be a multiple of ***REMOVED******REMOVED***multiple***REMOVED******REMOVED***'
    ***REMOVED***,
    string: ***REMOVED***
        base: 'must be a string',
        min: 'length must be at least ***REMOVED******REMOVED***limit***REMOVED******REMOVED*** characters long',
        max: 'length must be less than or equal to ***REMOVED******REMOVED***limit***REMOVED******REMOVED*** characters long',
        length: 'length must be ***REMOVED******REMOVED***limit***REMOVED******REMOVED*** characters long',
        alphanum: 'must only contain alpha-numeric characters',
        token: 'must only contain alpha-numeric and underscore characters',
        regex: ***REMOVED***
            base: 'with value "***REMOVED******REMOVED***!value***REMOVED******REMOVED***" fails to match the required pattern: ***REMOVED******REMOVED***pattern***REMOVED******REMOVED***',
            name: 'with value "***REMOVED******REMOVED***!value***REMOVED******REMOVED***" fails to match the ***REMOVED******REMOVED***name***REMOVED******REMOVED*** pattern'
        ***REMOVED***,
        email: 'must be a valid email',
        uri: 'must be a valid uri',
        uriCustomScheme: 'must be a valid uri with a scheme matching the ***REMOVED******REMOVED***scheme***REMOVED******REMOVED*** pattern',
        isoDate: 'must be a valid ISO 8601 date',
        guid: 'must be a valid GUID',
        hex: 'must only contain hexadecimal characters',
        hostname: 'must be a valid hostname',
        lowercase: 'must only contain lowercase characters',
        uppercase: 'must only contain uppercase characters',
        trim: 'must not have leading or trailing whitespace',
        creditCard: 'must be a credit card',
        ref: 'references "***REMOVED******REMOVED***ref***REMOVED******REMOVED***" which is not a number',
        ip: 'must be a valid ip address with a ***REMOVED******REMOVED***cidr***REMOVED******REMOVED*** CIDR',
        ipVersion: 'must be a valid ip address of one of the following versions ***REMOVED******REMOVED***version***REMOVED******REMOVED*** with a ***REMOVED******REMOVED***cidr***REMOVED******REMOVED*** CIDR'
    ***REMOVED***
***REMOVED***;
