// Load modules

var Hoek = require('hoek');
var Ref = require('./ref');

// Type modules are delay-loaded to prevent circular dependencies


// Declare internals

var internals = ***REMOVED***
    any: null,
    date: require('./date'),
    string: require('./string'),
    number: require('./number'),
    boolean: require('./boolean'),
    alt: null,
    object: null
***REMOVED***;


exports.schema = function (config) ***REMOVED***

    internals.any = internals.any || new (require('./any'))();
    internals.alt = internals.alt || require('./alternatives');
    internals.object = internals.object || require('./object');

    if (config &&
        typeof config === 'object') ***REMOVED***

        if (config.isJoi) ***REMOVED***
            return config;
        ***REMOVED***

        if (Array.isArray(config)) ***REMOVED***
            return internals.alt.try(config);
        ***REMOVED***

        if (config instanceof RegExp) ***REMOVED***
            return internals.string.regex(config);
        ***REMOVED***

        if (config instanceof Date) ***REMOVED***
            return internals.date.valid(config);
        ***REMOVED***

        return internals.object.keys(config);
    ***REMOVED***

    if (typeof config === 'string') ***REMOVED***
        return internals.string.valid(config);
    ***REMOVED***

    if (typeof config === 'number') ***REMOVED***
        return internals.number.valid(config);
    ***REMOVED***

    if (typeof config === 'boolean') ***REMOVED***
        return internals.boolean.valid(config);
    ***REMOVED***

    if (Ref.isRef(config)) ***REMOVED***
        return internals.any.valid(config);
    ***REMOVED***

    Hoek.assert(config === null, 'Invalid schema content:', config);

    return internals.any.valid(null);
***REMOVED***;


exports.ref = function (id) ***REMOVED***

    return Ref.isRef(id) ? id : Ref.create(id);
***REMOVED***;
